#!/usr/bin/env python3
"""
betty-policy - CLI wrapper for Betty Framework policy operations

Provides a unified interface for policy profile management and enforcement.
"""

import sys
import argparse
import json
from pathlib import Path

# Add betty to path
betty_dir = Path(__file__).resolve().parent.parent
sys.path.insert(0, str(betty_dir))

from betty.skills.policy.define import define_policy, PolicyDefinitionError
from betty.skills.policy.validate import validate_policy, load_policy_file, PolicyValidationError
from betty.skills.policy.enforce.policy_enforce import (
    validate_manifest_policies,
    validate_against_profile,
    load_policy_profile,
    find_all_manifests,
    PolicyEnforcementError,
    POLICIES_DIR
)
from betty.config import BASE_DIR
from betty.logging_utils import setup_logger

# Import meta-agent directly (agents don't have import infrastructure like skills)
import importlib.util
meta_agent_path = betty_dir / "agents" / "meta.policy.profile" / "meta_policy_profile.py"
spec = importlib.util.spec_from_file_location("meta_policy_profile", meta_agent_path)
meta_policy_profile = importlib.util.module_from_spec(spec)
spec.loader.exec_module(meta_policy_profile)
generate_policy_profile = meta_policy_profile.generate_policy_profile

logger = setup_logger(__name__)


def cmd_list(args):
    """List all available policy profiles."""
    profiles_dir = Path(POLICIES_DIR)

    if not profiles_dir.exists():
        print(json.dumps({
            "success": False,
            "message": "Policy profiles directory not found",
            "profiles": []
        }, indent=2))
        return 1

    profiles = []
    for profile_file in profiles_dir.glob("*.yaml"):
        profile_name = profile_file.stem
        try:
            profile = load_policy_profile(profile_name)
            profiles.append({
                "name": profile_name,
                "type": profile.get("type", "unknown"),
                "description": profile.get("description", ""),
                "rules": len(profile.get("rules", [])),
                "enforcement": profile.get("enforcement", "blocking")
            })
        except Exception as e:
            logger.warning(f"Failed to load profile {profile_name}: {e}")

    print(json.dumps({
        "success": True,
        "profiles": profiles,
        "count": len(profiles)
    }, indent=2))
    return 0


def cmd_show(args):
    """Show details of a specific policy profile."""
    try:
        profile = load_policy_profile(args.profile)
        print(json.dumps({
            "success": True,
            "profile": profile
        }, indent=2))
        return 0
    except PolicyEnforcementError as e:
        print(json.dumps({
            "success": False,
            "error": e.message,
            "details": e.details
        }, indent=2))
        return 1


def cmd_create(args):
    """Create a new policy profile from Markdown specification."""
    try:
        # Read spec file
        with open(args.spec_file, 'r') as f:
            spec_content = f.read()

        # Generate profile using meta-agent
        result = generate_policy_profile(
            profile_name=args.name,
            policy_spec=spec_content,
            policy_type=args.type,
            scope=args.scope if args.scope else ["artifact"],
            enforcement=args.enforcement
        )

        print(json.dumps(result, indent=2))
        return 0 if result.get('success') else 1

    except FileNotFoundError:
        print(json.dumps({
            "success": False,
            "error": f"Specification file not found: {args.spec_file}"
        }, indent=2))
        return 1
    except Exception as e:
        print(json.dumps({
            "success": False,
            "error": str(e),
            "type": type(e).__name__
        }, indent=2))
        return 1


def cmd_validate(args):
    """Validate policy profile YAML."""
    try:
        policy = load_policy_file(args.policy_file)
        result = validate_policy(policy, strict=args.strict)

        print(json.dumps(result, indent=2))
        return 0 if result.get('valid') else 1

    except Exception as e:
        print(json.dumps({
            "success": False,
            "valid": False,
            "error": str(e),
            "type": type(e).__name__
        }, indent=2))
        return 1


def cmd_enforce(args):
    """Enforce policy rules on manifests."""
    try:
        if args.manifest:
            # Single manifest
            if args.profile:
                profile = load_policy_profile(args.profile)
                result = validate_against_profile(args.manifest, profile)
            else:
                result = validate_manifest_policies(args.manifest)

            print(json.dumps(result, indent=2))
            return 0 if result.get('success') else 1
        else:
            # All manifests
            manifests = find_all_manifests()
            results = []

            for manifest_path, manifest_type in manifests:
                if args.profile:
                    profile = load_policy_profile(args.profile)
                    result = validate_against_profile(manifest_path, profile, manifest_type)
                else:
                    result = validate_manifest_policies(manifest_path, manifest_type)

                results.append(result)

            total = len(results)
            passed = sum(1 for r in results if r.get('success'))
            failed = total - passed

            summary = {
                "success": failed == 0,
                "total": total,
                "passed": passed,
                "failed": failed,
                "results": results
            }

            print(json.dumps(summary, indent=2))
            return 0 if failed == 0 else 1

    except Exception as e:
        print(json.dumps({
            "success": False,
            "error": str(e),
            "type": type(e).__name__
        }, indent=2))
        return 1


def cmd_test(args):
    """Test a policy profile against a manifest."""
    try:
        profile = load_policy_profile(args.profile)
        result = validate_against_profile(args.manifest, profile)

        # Pretty print result
        success = result.get('success', False)
        violations = result.get('violations', [])

        if success:
            print(f"‚úì Policy '{args.profile}' validation passed")
            print(f"  Manifest: {args.manifest}")
            print(f"  Rules checked: {result.get('rules_checked', 0)}")
        else:
            print(f"‚úó Policy '{args.profile}' validation failed")
            print(f"  Manifest: {args.manifest}")
            print(f"  Violations: {len(violations)}")

            for v in violations:
                severity = v.get('severity', 'error')
                icon = 'üî¥' if severity == 'error' else '‚ö†Ô∏è'
                print(f"\n  {icon} {v.get('field')}: {v.get('message')}")

        if args.json:
            print("\nFull JSON output:")
            print(json.dumps(result, indent=2))

        return 0 if success else 1

    except Exception as e:
        print(f"‚úó Error: {e}")
        if args.json:
            print(json.dumps({
                "success": False,
                "error": str(e),
                "type": type(e).__name__
            }, indent=2))
        return 1


def main():
    """Main CLI entry point."""
    parser = argparse.ArgumentParser(
        description="Betty Policy Management CLI",
        formatter_class=argparse.RawDescriptionHelpFormatter,
        epilog="""
Examples:
  # List all policy profiles
  betty-policy list

  # Show a specific profile
  betty-policy show default

  # Create a new profile
  betty-policy create security-strict policy-spec.md --type security

  # Validate a policy YAML
  betty-policy validate registry/policies/custom.yaml

  # Enforce policies on a manifest
  betty-policy enforce skills/my.skill/skill.yaml

  # Enforce with a specific profile
  betty-policy enforce skills/my.skill/skill.yaml --profile strict

  # Test a profile against a manifest
  betty-policy test default skills/my.skill/skill.yaml

  # Enforce policies on all manifests
  betty-policy enforce --all
        """
    )

    subparsers = parser.add_subparsers(dest='command', help='Available commands')

    # List command
    parser_list = subparsers.add_parser('list', help='List all policy profiles')
    parser_list.set_defaults(func=cmd_list)

    # Show command
    parser_show = subparsers.add_parser('show', help='Show policy profile details')
    parser_show.add_argument('profile', help='Profile name')
    parser_show.set_defaults(func=cmd_show)

    # Create command
    parser_create = subparsers.add_parser('create', help='Create new policy profile')
    parser_create.add_argument('name', help='Profile name')
    parser_create.add_argument('spec_file', help='Path to Markdown specification')
    parser_create.add_argument('--type', default='validation',
                              choices=['validation', 'security', 'compliance'],
                              help='Policy type')
    parser_create.add_argument('--scope', nargs='+', help='Policy scope')
    parser_create.add_argument('--enforcement', default='blocking',
                              choices=['blocking', 'warning', 'info'],
                              help='Enforcement level')
    parser_create.set_defaults(func=cmd_create)

    # Validate command
    parser_validate = subparsers.add_parser('validate', help='Validate policy YAML')
    parser_validate.add_argument('policy_file', help='Path to policy YAML file')
    parser_validate.add_argument('--strict', action='store_true',
                                help='Enable strict validation')
    parser_validate.set_defaults(func=cmd_validate)

    # Enforce command
    parser_enforce = subparsers.add_parser('enforce', help='Enforce policy rules')
    parser_enforce.add_argument('manifest', nargs='?', help='Path to manifest file')
    parser_enforce.add_argument('--profile', help='Policy profile to use')
    parser_enforce.add_argument('--all', action='store_true',
                               help='Enforce on all manifests')
    parser_enforce.set_defaults(func=cmd_enforce)

    # Test command
    parser_test = subparsers.add_parser('test', help='Test policy against manifest')
    parser_test.add_argument('profile', help='Policy profile name')
    parser_test.add_argument('manifest', help='Path to manifest file')
    parser_test.add_argument('--json', action='store_true',
                            help='Output full JSON result')
    parser_test.set_defaults(func=cmd_test)

    # Parse args
    args = parser.parse_args()

    if not args.command:
        parser.print_help()
        return 1

    # Execute command
    try:
        return args.func(args)
    except Exception as e:
        logger.exception("Unexpected error")
        print(json.dumps({
            "success": False,
            "error": str(e),
            "type": type(e).__name__
        }, indent=2))
        return 1


if __name__ == '__main__':
    sys.exit(main())
