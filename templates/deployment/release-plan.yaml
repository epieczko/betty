# Release Plan
# See also: artifact_descriptions/release-plan.md for complete guidance

# The Release Plan is a critical Agile delivery artifact that defines the release strategy, feature scope, deployment schedule, and go-live criteria for software releases across Agile Release Trains (AR...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact defines the release strategy and deployment roadmap for delivering software features to production. It solves the problem of coordinating multi-team releases, managing deployment dependencies, and aligning release timing with business objectives while maintaining continuous delivery pr

# BEST PRACTICES
# - Version Control: Store in centralized version control system (Git, SharePoint with versioning, etc.) to maintain comp
# - Naming Conventions: Follow organization's document naming standards for consistency and discoverability
# - Template Usage: Use approved templates to ensure completeness and consistency across teams
# - Peer Review: Have at least one qualified peer review before submitting for approval
# - Metadata Completion: Fully complete all metadata fields to enable search, classification, and lifecycle management

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "Release train schedule and cadence (SAFe PI releases, sprint-based releases, con"
      - "Feature scope per release with acceptance criteria and Definition of Done"
      - "Release dependencies across teams, services, and infrastructure components"
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
