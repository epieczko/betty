# Monitoring Dashboards
# See also: artifact_descriptions/monitoring-dashboards.md for complete guidance

# The Monitoring Dashboards artifact defines comprehensive visualization and alerting strategies for system observability using industry-standard platforms like Grafana, Datadog, New Relic, and Dynatrac...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact defines standardized monitoring dashboard configurations that visualize system health, performance metrics, and user experience across distributed systems. It establishes reusable dashboard templates implementing RED metrics (request Rate, Error rate, Duration), USE metrics (Utilizatio

# BEST PRACTICES
# - Dashboard as Code: Store Grafana/Datadog dashboard definitions in Git using JSON/Terraform for version control, peer re
# - RED Metrics Implementation: Implement request Rate, Error rate, and Duration (latency) for all user-facing services following SR
# - USE Metrics for Resources: Track Utilization, Saturation, and Errors for all infrastructure resources (CPU, memory, disk, netwo
# - Consistent Time Windows: Standardize time ranges (1h, 6h, 24h, 7d, 30d) and refresh intervals across dashboards for consisten
# - Multi-Level Dashboards: Create hierarchical dashboards (executive overview, service health, detailed diagnostics) for differ

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "Grafana dashboard configurations (JSON models, provisioning, variables, templati"
      - "RED metrics dashboards (request rate, error rate, latency percentiles P50/P90/P9"
      - "USE metrics dashboards (CPU/memory/disk utilization, saturation, I/O errors)"
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
