# Software Bill Of Materials
# See also: artifact_descriptions/software-bill-of-materials.md for complete guidance

# The Software Bill of Materials (SBOM) is a machine-readable inventory documenting all software components, dependencies, licenses, and metadata within an application or system. Mandated by Executive O...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact serves as the authoritative, machine-readable inventory of all software components (libraries, frameworks, dependencies, packages) comprising a software product. It enables rapid vulnerability identification, license compliance verification, and supply chain risk assessment by document

# BEST PRACTICES
# - Automated Generation: Generate SBOMs automatically in CI/CD pipelines using Syft, CycloneDX plugins, or SPDX tools on ever
# - NTIA Minimum Elements: Ensure all SBOMs include required fields: supplier, component name, version, unique identifiers, dep
# - Multi-Format Support: Generate both SPDX 2.3 (for government/standards) and CycloneDX 1.4+ (for security tooling) formats
# - Cryptographic Signing: Sign SBOMs with Sigstore/Cosign and publish signatures to Rekor transparency log for attestation
# - SBOM-per-Artifact: Generate separate SBOMs for each release artifact, container image, and firmware build

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "Component inventory with Package URLs (PURLs) and Common Platform Enumeration (C"
      - "Dependency graph mapping (direct dependencies, transitive dependencies, dependen"
      - "NTIA minimum elements"
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
