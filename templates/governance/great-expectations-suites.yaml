# Great Expectations Suites
# See also: artifact_descriptions/great-expectations-suites.md for complete guidance

# The Great Expectations Suites artifact defines data quality validation rules, expectation suites, validation checkpoints, and automated testing procedures using Great Expectations, dbt tests, Soda Cor...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact defines comprehensive data quality validation suites that programmatically test data at rest and in motion, ensuring data meets quality standards before being consumed by downstream applications, ML models, and business intelligence tools. It prevents data quality issues from propagati

# BEST PRACTICES
# - Start with Schema Validation: Always validate schema (columns exist, types correct) before value-level validation
# - Profile First: Use data profiling to automatically generate baseline expectations from historical data
# - Critical vs. Warning: Distinguish critical expectations (fail pipeline) from warnings (alert but continue)
# - Version Expectation Suites: Version control expectation suites alongside data pipeline code
# - Test in Development: Run validation on development/staging data before deploying to production

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "Great Expectations expectation suites and validation definitions"
      - "Data profiling and automatic expectation generation"
      - "Validation checkpoints integrated into data pipelines"
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
