# Eviction Policies
# See also: artifact_descriptions/eviction-policies.md for complete guidance

# The Eviction Policies artifact defines strategies for removing stale, unused, or low-value data from caches, feature flag systems, and data storage layers. This artifact establishes eviction algorithm...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact defines eviction and retention policies that govern the lifecycle of cached data, feature flags, ephemeral data, and stored records. It establishes clear rules for what data to retain, when to evict or archive, and how to automate cleanup to maintain system performance, control costs, 

# BEST PRACTICES
# - Choose Appropriate Eviction Algorithm: Use LRU for general caching, LFU for stable access patterns, TTL for time-sensitive data
# - Monitor Cache Hit Rates: Track hit rates before/after eviction changes; aim for >80% hit rate for performance-critical caches
# - Set Memory Limits: Configure maxmemory for Redis with headroom (80-90% of available memory) to prevent OOM errors
# - Redis Eviction Selection: Use volatile-lru for caches with explicit TTLs; allkeys-lru when all keys are candidates
# - TTL Consistency: Set TTLs at write time; avoid infinite TTLs unless data is truly permanent

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "Cache eviction policies (LRU, LFU, LRA, TTL, random eviction)"
      - "Redis eviction policies (volatile-lru, allkeys-lru, volatile-ttl, noeviction)"
      - "Memcached eviction algorithms and memory management"
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
