# Network Policies
# See also: artifact_descriptions/network-policies.md for complete guidance

# Network Policies are the fundamental security constructs that implement zero-trust networking principles within Kubernetes clusters by defining granular rules for pod-to-pod, pod-to-external, and ingr...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact defines Layer 3/Layer 4 network segmentation rules that control traffic flow between pods, namespaces, and external networks within Kubernetes clusters. It implements zero-trust networking principles by specifying which workloads can communicate with each other based on labels, namespa

# BEST PRACTICES
# - Default Deny All: Implement default deny-all policies for both ingress and egress as baseline security posture
# - Incremental Rollout: Deploy network policies incrementally, starting with audit mode before enforcement
# - Label Standardization: Establish consistent labeling conventions for pod and namespace selectors across organization
# - Namespace Isolation: Implement namespace-level isolation to prevent cross-tenant traffic by default
# - DNS Allowlisting: Use FQDN-based policies (Cilium) to control egress to specific external domains

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "Kubernetes NetworkPolicy resources (Ingress and Egress rules)"
      - "Calico NetworkPolicy and GlobalNetworkPolicy for advanced features"
      - "Cilium NetworkPolicy and CiliumClusterwideNetworkPolicy with L7 awareness"
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
