# Chaos Engineering Experiments
# See also: artifact_descriptions/chaos-engineering-experiments.md for complete guidance

# Chaos Engineering Experiments are controlled, hypothesis-driven tests that inject failures into production or production-like systems to discover weaknesses before they manifest as outages. These expe...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact documents planned chaos engineering experiments including hypothesis, failure injection methodology, blast radius controls, monitoring approach, rollback procedures, and success criteria to systematically validate system resilience and discover failure modes before they impact producti

# BEST PRACTICES
# - Start Small: Begin with smallest possible blast radius (single instance, 1% traffic, test environment)
# - Hypothesis First: Always define clear hypothesis and success criteria before running experiments
# - Monitor Everything: Ensure comprehensive monitoring (metrics, logs, traces) before injecting failures
# - Automated Rollback: Implement automatic abort triggers based on SLO breaches or error rate thresholds
# - Business Hours Only: Run initial experiments during business hours with full team availability

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "Experiment design and hypothesis formulation (steady-state definition, predicted"
      - "Failure injection scenarios (pod kills, network failures, resource exhaustion, d"
      - "Chaos engineering platform configurations (Chaos Monkey, Gremlin, Litmus Chaos, "
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
