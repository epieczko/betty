# Dockerfiles
# See also: artifact_descriptions/dockerfiles.md for complete guidance

# The Dockerfiles artifact defines container image build specifications that transform application source code into production-ready, immutable container images optimized for security, size, and perform

metadata:
  # Document Control
  version: "1.0.0"  # Semantic versioning (MAJOR.MINOR.PATCH)
  created: "YYYY-MM-DD"  # Date this artifact was created
  lastModified: "YYYY-MM-DD"  # Date of most recent update
  status: "Draft"  # Draft | Review | Approved | Published | Deprecated

  # Ownership & Accountability
  author: "Author Name"  # Primary author of this artifact
  documentOwner: "Owner Role/Name"  # Person/role responsible for maintenance
  classification: "Internal"  # Public | Internal | Confidential | Restricted

  # Approvals
  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      approvalDate: null  # Date of approval (YYYY-MM-DD)

# PURPOSE
# This artifact defines Dockerfile specifications to build secure, efficient, and reproducible container images that reduce image size by 60-90% through multi-stage builds, minimize vulnerabilities through minimal base images and security scanning, and optimize build performance through intelligent la...

# MAIN CONTENT
# Complete the sections below based on your specific artifact needs

# BEST PRACTICES:
# - Version Control: Store Dockerfiles in Git alongside application source code, use semantic versioning for image tags
# - Multi-Stage Builds: Implement multi-stage builds with separate builder and production stages to reduce final image size 
# - Minimal Base Images: Use Alpine Linux (5MB), Distroless (<20MB), or scratch images instead of full Ubuntu/Debian (100MB+)
# - Base Image Pinning: Pin specific base image digests (`FROM alpine:3.18.2@sha256:...`) for reproducible builds
# - Non-Root User: Run containers as non-root user (USER 1001) to limit blast radius of container escape vulnerabilitie

content:
  overview: |
    # Provide a high-level overview of this artifact
    # What is this document about?
    # Why does it exist?
    
  scope:
    inScope:
      - "Multi-stage Dockerfile patterns (builder stage, production stage, test stage)"
      - "Base image selection (Alpine Linux 3.18+, Distroless, Ubuntu minimal, Red Hat UBI, scratch images)"
      - "Layer optimization and caching strategies (COPY vs ADD, layer ordering, .dockerignore)"
      # Add additional in-scope items
    outOfScope:
      - "Item explicitly out of scope"
      # Add additional out-of-scope items

  details: |
    # Provide detailed information specific to this artifact type
    # Include all necessary technical details
    # Reference the artifact description for required sections
    
# QUALITY CHECKLIST
# Before finalizing, verify:
# ✓ Completeness: All required sections present and adequately detailed
# ✓ Accuracy: Information verified and validated by appropriate subject matter experts
# ✓ Clarity: Written in clear, unambiguous language appropriate for intended audience
# ✓ Consistency: Aligns with organizational standards, templates, and related artifacts
# ✓ Currency: Based on current information; outdated content removed or updated

relatedDocuments:
  - type: "Related Artifact Type"
    path: "path/to/related/artifact"
    relationship: "depends-on | references | supersedes | implements"

changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
