# Data Lineage Maps
# See also: artifact_descriptions/data-lineage-maps.md for complete guidance

# Data Lineage Maps are visual and technical documentation artifacts that trace the complete end-to-end flow of data from source systems through transformations, integrations, and consumption points. Th...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact documents the complete data flow topology from source extraction through transformation pipelines to consumption endpoints, capturing table-level and column-level lineage, transformation logic, data dependencies, and processing sequences. It enables impact analysis, debugging, complian

# BEST PRACTICES
# - Automate Lineage Capture: Implement automated lineage harvesting using OpenLineage, DataHub extractors, or Apache Atlas hooks 
# - Column-Level Granularity: Capture field-level lineage wherever possible to enable precise impact analysis and debugging of dat
# - dbt DAG Integration: Leverage dbt's built-in lineage graph generation and integrate with DataHub or Collibra for enterpri
# - OpenLineage Events: Emit OpenLineage events from Airflow, Spark, and custom pipelines to maintain real-time lineage accu
# - Bi-directional Lineage: Capture both upstream (where data comes from) and downstream (where data is used) lineage for compre

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "Source-to-target mappings across ETL/ELT pipelines (Informatica, Talend, Azure D"
      - "Column-level lineage showing field-to-field transformations and derivations"
      - "Data flow through streaming platforms (Apache Kafka, AWS Kinesis, Azure Event Hu"
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
