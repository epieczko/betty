# Data Dictionaries
# See also: artifact_descriptions/data-dictionaries.md for complete guidance

# The Data Dictionary is a foundational metadata management artifact that provides comprehensive documentation of data elements, business definitions, and technical specifications across an organization...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact serves as a comprehensive registry of all data elements within a database, data warehouse, data lake, or data product, documenting entity definitions, attribute specifications, data types, constraints, business rules, and valid value domains. It enables consistent understanding and usa

# BEST PRACTICES
# - Automated Metadata Discovery: Leverage data catalog tools (Collibra, Alation, Apache Atlas, DataHub) to automatically harvest tech
# - ISO 11179 Naming Conventions: Follow ISO 11179 standards for data element naming including object class, property, and representat
# - Business Glossary Integration: Link every technical data element to business glossary terms to ensure business context and consiste
# - Data Classification Tagging: Apply sensitivity classifications (PII, PHI, PCI, confidential, public) to all data elements per GDP
# - Data Steward Assignment: Assign both business data stewards (define semantics) and technical data custodians (manage implemen

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "Entity and table definitions with business purpose and ownership"
      - "Attribute/column specifications including data types (VARCHAR, INTEGER, DECIMAL,"
      - "Primary keys, foreign keys, and referential integrity constraints"
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
