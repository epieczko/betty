# Data Residency Plan
# See also: artifact_descriptions/data-residency-plan.md for complete guidance

# The Data Residency Plan is a strategic compliance framework that defines where personal data and regulated information must be physically stored and processed to satisfy data localization laws, cross-...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact serves as a strategic roadmap defining data storage locations, cross-border transfer mechanisms, cloud infrastructure regions, and technical controls necessary to comply with data localization laws, GDPR Chapter V transfer requirements, and data sovereignty mandates while optimizing sy

# BEST PRACTICES
# - Data Flow Mapping: Document complete data flows from collection through storage, processing, transfer, and deletion usi
# - Transfer Impact Assessments (TIAs): Conduct Schrems II-compliant TIAs for transfers to countries without adequacy decisions, evaluating 
# - Cloud Region Strategy: Select cloud provider regions based on regulatory requirements (e.g., AWS eu-central-1 for GDPR, Ali
# - Geo-Fencing Controls: Implement technical geo-blocking using AWS Organizations SCPs, Azure Policy, GCP Organization Polici
# - Encryption Everywhere: Deploy encryption in transit (TLS 1.3) and at rest (AES-256) with customer-managed keys (AWS KMS, Az

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "Data localization law requirements (China PIPL, Russia Federal Law 242-FZ, Indon"
      - "GDPR Chapter V international transfer mechanisms (Articles 44-50) including adeq"
      - "Cloud provider region selection and configuration (AWS Regions, Azure Geographie"
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
