# Data Lineage Tracking
# See also: artifact_descriptions/data-lineage-tracking.md for complete guidance

# Data Lineage Tracking is the operational process and technical implementation for continuously capturing, updating, and maintaining data lineage metadata in real-time as data flows through pipelines, ...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact documents the technical implementation, configuration, and operational procedures for automated data lineage capture, including instrumentation code, event schemas, metadata extraction schedules, and integration patterns with data platforms and catalog systems.

# BEST PRACTICES
# - Infrastructure as Code: Deploy lineage tracking configuration (DataHub recipes, Atlas hooks, OpenLineage configs) using Terr
# - OpenLineage First: Prioritize OpenLineage standard for new integrations to ensure portability across lineage tools and 
# - Event-Driven Architecture: Design lineage capture as event-driven using Kafka, AWS EventBridge, or Azure Event Grid for scalabi
# - Column-Level Instrumentation: Implement SQL parsing (sqlglot, sqlparse, JSQLParser) for automatic column-level lineage extraction
# - Idempotent Events: Ensure lineage events are idempotent to handle retries and avoid duplicate metadata creation

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "OpenLineage event emission configuration for Apache Airflow, Spark, dbt, and cus"
      - "Apache Atlas hook implementation for Hive, HBase, Kafka, and Hadoop ecosystem li"
      - "DataHub metadata ingestion recipes and scheduled extraction from databases, ETL "
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
