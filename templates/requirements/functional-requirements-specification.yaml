# Functional Requirements Specification
# See also: artifact_descriptions/functional-requirements-specification.md for complete guidance

# The Functional Requirements Specification (FRS) is the authoritative document that defines what a system must do from a functional perspective, serving as the contractual foundation between business s...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact serves as the definitive specification of functional requirements, detailing what the system must do to meet business objectives. It documents user interactions, business processes, data transformations, system behaviors, validation rules, and acceptance criteria in sufficient detail t

# BEST PRACTICES
# - Requirements Elicitation: Conduct structured elicitation workshops with stakeholders; use techniques like interviews, observat
# - Unique Identifiers: Assign unique IDs to each functional requirement (e.g., FR-001) for traceability through RTM
# - Atomic Requirements: Write single, testable requirements; avoid compound statements that contain multiple requirements
# - User Story Format: Use "As a [role], I want [capability], so that [benefit]" format for user-centric requirements
# - Acceptance Criteria: Define clear, measurable acceptance criteria using Given-When-Then (Gherkin) format for each require

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "Detailed functional requirements with unique identifiers and traceability"
      - "User roles, personas, and permission models"
      - "Business rules, validation logic, and decision tables"
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
