# Data Quality Rules
# See also: artifact_descriptions/data-quality-rules.md for complete guidance

# Data Quality Rules are executable specifications that define acceptable data characteristics, constraints, thresholds, and validation logic across the six DAMA data quality dimensions: accuracy, compl...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact documents executable data quality rules, validation logic, acceptance thresholds, and testing specifications that are implemented in data pipelines and monitored continuously to ensure data meets defined quality standards across accuracy, completeness, consistency, validity, timeliness

# BEST PRACTICES
# - Quality as Code: Store all quality rules in version control (Git) alongside data transformation code using Great Expe
# - DAMA Dimension Coverage: Ensure quality rules cover all six DAMA dimensions (accuracy, completeness, consistency, validity, t
# - Test Pyramid Approach: Layer tests from simple schema checks to complex business rule validations, balancing coverage and e
# - Critical Path Focus: Prioritize quality rules for business-critical fields, regulatory data elements, and downstream depe
# - Threshold Calibration: Set realistic pass/fail thresholds based on data profiling and business tolerance for quality issues

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "DAMA data quality dimension rules (accuracy, completeness, consistency, validity"
      - "Great Expectations test suites with expectation definitions and validation thres"
      - "dbt test specifications (schema tests, data tests, custom singular tests)"
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
