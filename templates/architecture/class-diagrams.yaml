# Class Diagrams
# See also: artifact_descriptions/class-diagrams.md for complete guidance

# Class Diagrams are fundamental UML (Unified Modeling Language) diagrams that represent the static structure of object-oriented systems through classes, attributes, methods, and relationships. These di...

metadata:
  version: "1.0.0"
  created: "YYYY-MM-DD"
  lastModified: "YYYY-MM-DD"
  status: "Draft"
  author: "Author Name"
  documentOwner: "Owner Name/Role"
  classification: "Internal"

  approvers:
    - name: "Approver Name"
      role: "Approver Role"
      date: null

# PURPOSE
# This artifact serves as the authoritative visual representation of a system's static structure, defining classes, their attributes, operations, and relationships including inheritance, associations, aggregations, and compositions. It enables object-oriented analysis, design validation, and serves as

# BEST PRACTICES
# - Appropriate Granularity: Include enough detail for implementation but avoid cluttering diagram with every getter/setter; focu
# - Clear Naming: Use domain-driven design naming that reflects business concepts; avoid technical jargon in domain mo
# - Package Organization: Group related classes into packages/namespaces; show package dependencies in separate package diagra
# - Relationship Clarity: Use correct UML relationship types (composition vs aggregation vs association); annotate multiplicit
# - Design Patterns: Explicitly identify and label design pattern usage (Factory, Strategy, etc.) to communicate design i

# Main content - customize based on artifact type
content:
  summary: |
    Provide overview and context for this artifact.
  
  scope:
    included:
      - "Class definitions with attributes, operations, and visibility modifiers"
      - "Relationships"
      - "Multiplicity and cardinality specifications for associations"
    
    excluded:
      - "Items explicitly out of scope"
  
# Related artifacts
relatedArtifacts:
  - type: "Related Artifact Type"
    path: "path/to/artifact"
    relationship: "depends-on | references | implements"

# Change history
changeHistory:
  - version: "1.0.0"
    date: "YYYY-MM-DD"
    author: "Author Name"
    changes: "Initial version"
