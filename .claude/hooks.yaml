hooks:
- name: performance-monitor-pre
  event: before-tool-call
  command: echo "$(date +%s.%N),$(ps -o %cpu= -p $$),$(ps -o rss= -p $$),$CLAUDE_TOOL_NAME,start"
    >> ~/.claude/performance.csv
  description: Monitor system performance - track CPU, memory usage at tool start
  enabled: true
  timeout: 5000
- name: performance-monitor-post
  event: after-tool-call
  command: echo "$(date +%s.%N),$(ps -o %cpu= -p $$),$(ps -o rss= -p $$),$CLAUDE_TOOL_NAME,end"
    >> ~/.claude/performance.csv; if [[ $(wc -l < ~/.claude/performance.csv) -gt 1000
    ]]; then tail -n 500 ~/.claude/performance.csv > ~/.claude/performance.csv.tmp
    && mv ~/.claude/performance.csv.tmp ~/.claude/performance.csv; fi
  description: Monitor system performance - track CPU, memory usage at tool end and
    rotate logs
  enabled: true
- name: auto-stage-edited-files
  event: after-tool-call
  command: if [[ -n "$CLAUDE_TOOL_FILE_PATH" ]] && git rev-parse --git-dir >/dev/null
    2>&1; then git add "$CLAUDE_TOOL_FILE_PATH" 2>/dev/null || true; fi
  description: Automatically stage modified files with git add after editing. Helps
    maintain a clean git workflow by staging changes as they're made.
  enabled: true
  tool_filter: Edit|Write
  timeout: 5000
- name: validate-skill-manifests
  event: after-tool-call
  command: |
    if [[ "$CLAUDE_TOOL_FILE_PATH" =~ skill\.yaml$ ]] || [[ "$CLAUDE_TOOL_FILE_PATH" =~ agent\.yaml$ ]]; then
      cd /home/user/betty && \
      PYTHONPATH=/home/user/betty:$PYTHONPATH python3 skills/policy.enforce/policy_enforce.py \
        "$CLAUDE_TOOL_FILE_PATH" --profile default 2>&1 | grep -E "(success|violation)" || true
    fi
  description: Automatically validate skill.yaml and agent.yaml files against default policy profile after edits
  enabled: false
  tool_filter: Edit|Write
  timeout: 10000
