# Betty Framework - Claude Code Plugin
# Structured, auditable AI-assisted engineering built on Claude Code Plugins

name: betty-framework
version: 1.0.0
description: |
  Betty Framework is RiskExec's system for structured, auditable AI-assisted engineering.
  Where Claude Code provides the runtime, Betty adds methodology, orchestration, and governanceâ€”
  turning raw agent capability into a repeatable, enterprise-grade engineering discipline.

author:
  name: RiskExec
  email: platform@riskexec.com
  url: https://github.com/epieczko/betty

license: MIT

# Plugin metadata
metadata:
  homepage: https://github.com/epieczko/betty
  repository: https://github.com/epieczko/betty
  documentation: https://github.com/epieczko/betty/tree/main/docs
  tags:
    - framework
    - api-development
    - workflow
    - governance
    - enterprise
    - skills
    - agents

# Runtime requirements
requirements:
  python: ">=3.11"
  packages:
    - pyyaml
  optional:
    - datamodel-code-generator  # For API model generation

# Permissions requested by the plugin
permissions:
  - filesystem:read
  - filesystem:write
  - process:execute
  - network:none

# Slash commands exposed by the plugin
commands:
  # ==========================================
  # FOUNDATION SKILLS
  # ==========================================

  - name: skill/create
    description: Create a new Betty Framework skill with scaffolded structure
    handler:
      runtime: python
      script: skills/skill.create/skill_create.py
    parameters:
      - name: skill_name
        type: string
        required: true
        description: Name of the new skill (e.g., runtime.execute)
      - name: description
        type: string
        required: true
        description: Description of what the skill does
      - name: inputs
        type: string
        required: false
        description: Comma-separated list of input parameters
      - name: outputs
        type: string
        required: false
        description: Comma-separated list of output parameters
    examples:
      - command: /skill/create data.transform "Transform data between formats"
        description: Create a new data transformation skill
      - command: /skill/create api.monitor "Monitor API health and performance" --inputs=endpoint,interval --outputs=status,metrics
        description: Create API monitoring skill with parameters

  - name: skill/define
    description: Validate a skill manifest and check for required fields
    handler:
      runtime: python
      script: skills/skill.define/skill_define.py
    parameters:
      - name: manifest_path
        type: string
        required: true
        description: Path to skill.yaml manifest file
    examples:
      - command: /skill/define skills/data.transform/skill.yaml
        description: Validate a skill manifest

  - name: agent/define
    description: Validate an agent manifest and register it in the Agent Registry
    handler:
      runtime: python
      script: skills/agent.define/agent_define.py
    parameters:
      - name: manifest_path
        type: string
        required: true
        description: Path to agent.yaml manifest file
    examples:
      - command: /agent/define agents/api.designer/agent.yaml
        description: Validate and register an agent manifest

  - name: registry/update
    description: Add or update entries in the Betty Framework Skill Registry
    handler:
      runtime: python
      script: skills/registry.update/registry_update.py
    parameters:
      - name: manifest_path
        type: string
        required: true
        description: Path to skill manifest file to register
    examples:
      - command: /registry/update skills/data.transform/skill.yaml
        description: Register or update a skill in the registry

  - name: workflow/compose
    description: Execute multi-step workflows by chaining Betty skills together
    handler:
      runtime: python
      script: skills/workflow.compose/workflow_compose.py
    parameters:
      - name: workflow_file
        type: string
        required: true
        description: Path to workflow YAML definition
    examples:
      - command: /workflow/compose workflows/api_first_development.yaml
        description: Execute an API-first development workflow

  # ==========================================
  # API DEVELOPMENT SKILLS
  # ==========================================

  - name: api-define
    description: Create OpenAPI and AsyncAPI specifications from enterprise templates
    handler:
      runtime: python
      script: skills/api.define/api_define.py
    parameters:
      - name: service_name
        type: string
        required: true
        description: Name of the service/API (e.g., user-service, order-api)
      - name: spec_type
        type: string
        required: false
        default: openapi
        description: Type of specification (openapi or asyncapi)
      - name: template
        type: string
        required: false
        default: zalando
        description: Template to use (zalando, basic, minimal)
      - name: output-dir
        type: string
        required: false
        default: specs
        description: Output directory for generated specification
      - name: version
        type: string
        required: false
        default: "1.0.0"
        description: API version
    examples:
      - command: /api-define user-service
        description: Create OpenAPI spec using Zalando template
      - command: /api-define order-service openapi --template=zalando --version=2.0.0
        description: Create OpenAPI v2.0.0 spec with Zalando guidelines
      - command: /api-define notification-service asyncapi
        description: Create AsyncAPI spec for event-driven service

  - name: api-validate
    description: Validate API specifications against enterprise guidelines (Zalando, Google, Microsoft)
    handler:
      runtime: python
      script: skills/api.validate/api_validate.py
    parameters:
      - name: spec_path
        type: string
        required: true
        description: Path to API specification file (YAML or JSON)
      - name: guideline_set
        type: string
        required: false
        default: zalando
        description: Guidelines to validate against (zalando, google, microsoft)
      - name: strict
        type: boolean
        required: false
        default: false
        description: Enable strict mode (warnings become errors)
      - name: format
        type: string
        required: false
        default: json
        description: Output format (json or human)
    examples:
      - command: /api-validate specs/user-service.openapi.yaml
        description: Validate spec against Zalando guidelines
      - command: /api-validate specs/order-api.yaml zalando --strict --format=human
        description: Validate with strict mode and human-readable output
      - command: /api-validate specs/payment-api.yaml google
        description: Validate against Google API guidelines

  - name: api-generate
    description: Generate type-safe models from API specifications (TypeScript, Python, Java, Go, etc.)
    handler:
      runtime: python
      script: skills/api.generate-models/modelina_generate.py
    parameters:
      - name: spec_path
        type: string
        required: true
        description: Path to API specification file
      - name: language
        type: string
        required: true
        description: Target language (typescript, python, java, go, csharp, rust, kotlin, dart)
      - name: output-dir
        type: string
        required: false
        default: src/models
        description: Output directory for generated models
      - name: package-name
        type: string
        required: false
        description: Package/module name for generated code
    examples:
      - command: /api-generate specs/user-service.openapi.yaml typescript
        description: Generate TypeScript interfaces
      - command: /api-generate specs/order-api.yaml python --output-dir=backend/models
        description: Generate Python dataclasses
      - command: /api-generate specs/payment-api.yaml java --package-name=com.company.payment
        description: Generate Java classes with package name

  - name: api-compatibility
    description: Detect breaking changes between API specification versions
    handler:
      runtime: python
      script: skills/api.compatibility/check_compatibility.py
    parameters:
      - name: old_spec_path
        type: string
        required: true
        description: Path to the old/previous API specification
      - name: new_spec_path
        type: string
        required: true
        description: Path to the new/current API specification
      - name: fail-on-breaking
        type: boolean
        required: false
        default: true
        description: Exit with error if breaking changes detected
      - name: format
        type: string
        required: false
        default: json
        description: Output format (json or human)
    examples:
      - command: /api-compatibility specs/user-service.v1.yaml specs/user-service.v2.yaml
        description: Check compatibility between v1 and v2
      - command: /api-compatibility specs/api-old.yaml specs/api-new.yaml --format=human
        description: Get human-readable compatibility report
      - command: /api-compatibility specs/v1.yaml specs/v2.yaml --fail-on-breaking=false
        description: Report breaking changes without failing

# Agents provided by the plugin
agents:
  - name: api.designer
    description: Design APIs with iterative refinement following enterprise guidelines
    manifest: agents/api.designer/agent.yaml

  - name: api.analyzer
    description: Analyze API specifications for compatibility and best practices
    manifest: agents/api.analyzer/agent.yaml

# Configuration defaults
config:
  # Default paths
  paths:
    skills: skills
    agents: agents
    registry: registry
    workflows: workflows
    specs: specs

  # Default API development settings
  api:
    default_template: zalando
    default_guideline: zalando
    default_version: "1.0.0"

  # Audit and governance
  governance:
    policy_enforcement: true
    audit_logging: true
    registry_validation: true

# Installation hooks
install:
  post_install:
    - command: python -c "from betty.config import ensure_directories; ensure_directories()"
      description: Initialize Betty Framework directories
    - command: python -c "import os; os.makedirs('specs', exist_ok=True); os.makedirs('workflows', exist_ok=True)"
      description: Create additional working directories

# Health checks
health:
  checks:
    - name: python_version
      command: python --version
      expected_pattern: "Python 3\\.(1[1-9]|[2-9][0-9])"
    - name: yaml_support
      command: python -c "import yaml; print('ok')"
      expected_pattern: "ok"
    - name: registry_exists
      command: python -c "import os; print('ok' if os.path.exists('registry/skills.json') else 'missing')"
      expected_pattern: "(ok|missing)"
