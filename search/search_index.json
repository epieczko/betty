{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"CODEBASE_ANALYSIS/","title":"Betty Framework - Comprehensive Codebase Analysis","text":""},{"location":"CODEBASE_ANALYSIS/#executive-summary","title":"Executive Summary","text":"<p>The Betty Framework is an AI-native SDLC system built on Anthropic's Claude Code Plugins platform. It implements a five-layer architecture that transforms Claude Code's plugin system into a structured, auditable engineering discipline for API-driven development.</p> <p>Status: Phase 3 (Commands/User Interface) currently implemented; Phase 4 (Agents) in progress</p>"},{"location":"CODEBASE_ANALYSIS/#project-organization-directory-structure","title":"Project Organization &amp; Directory Structure","text":"<pre><code>/home/user/betty/\n\u251c\u2500\u2500 betty/                           # Core Python utilities (shared)\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u251c\u2500\u2500 config.py                   # Configuration, paths, constants, enums\n\u2502   \u251c\u2500\u2500 errors.py                   # Exception classes for error handling\n\u2502   \u251c\u2500\u2500 validation.py               # Input validation functions\n\u2502   \u251c\u2500\u2500 file_utils.py              # File I/O utilities\n\u2502   \u2514\u2500\u2500 logging_utils.py            # Logging setup\n\u2502\n\u251c\u2500\u2500 skills/                          # Skills (Execution Layer)\n\u2502   \u251c\u2500\u2500 agent.define/              # Layer 2: Validate/register agents (ACTIVE)\n\u2502   \u251c\u2500\u2500 api.compatibility/          # Detect breaking changes (ACTIVE)\n\u2502   \u251c\u2500\u2500 api.define/                # Create OpenAPI specs (ACTIVE)\n\u2502   \u251c\u2500\u2500 api.generate-models/       # Generate models via Modelina (ACTIVE)\n\u2502   \u251c\u2500\u2500 api.validate/              # Validate specs (ACTIVE)\n\u2502   \u251c\u2500\u2500 hook.define/               # Register hooks (ACTIVE)\n\u2502   \u251c\u2500\u2500 registry.update/           # Update skill registry (ACTIVE)\n\u2502   \u251c\u2500\u2500 skill.create/              # Scaffold new skills (ACTIVE)\n\u2502   \u251c\u2500\u2500 skill.define/              # Validate/register skills (ACTIVE)\n\u2502   \u251c\u2500\u2500 workflow.compose/          # Execute workflows (ACTIVE)\n\u2502   \u2514\u2500\u2500 workflow.validate/         # Validate workflow YAML (ACTIVE)\n\u2502\n\u251c\u2500\u2500 agents/                          # Agents (Reasoning Layer - Phase 4)\n\u2502   \u251c\u2500\u2500 api.designer/              # Design APIs [draft]\n\u2502   \u2514\u2500\u2500 api.analyzer/              # Analyze API compatibility [draft]\n\u2502\n\u251c\u2500\u2500 .claude/                         # Claude Code Plugin Configuration\n\u2502   \u251c\u2500\u2500 commands/                  # Slash commands (Phase 3)\n\u2502   \u2502   \u251c\u2500\u2500 README.md             # Command documentation\n\u2502   \u2502   \u251c\u2500\u2500 api-design.md         # /api-design command\n\u2502   \u2502   \u251c\u2500\u2500 api-validate.md       # /api-validate command\n\u2502   \u2502   \u251c\u2500\u2500 api-generate.md       # /api-generate command\n\u2502   \u2502   \u2514\u2500\u2500 api-compatibility.md  # /api-compatibility command\n\u2502   \u2514\u2500\u2500 hooks.yaml                 # Hook definitions (generated by hook.define)\n\u2502\n\u251c\u2500\u2500 workflows/                       # Workflow definitions (Orchestration Layer)\n\u2502   \u2514\u2500\u2500 [example workflows]\n\u2502\n\u251c\u2500\u2500 registry/                        # Registries (databases)\n\u2502   \u251c\u2500\u2500 skills.json               # Skill registry (11 active skills)\n\u2502   \u251c\u2500\u2500 agents.json               # Agent registry (2 draft agents)\n\u2502   \u2514\u2500\u2500 workflow_history.json     # Workflow execution audit trail\n\u2502\n\u251c\u2500\u2500 docs/                           # Documentation\n\u2502   \u251c\u2500\u2500 betty-architecture.md      # Five-layer architecture spec\n\u2502   \u251c\u2500\u2500 betty-framework-overview.md\n\u2502   \u251c\u2500\u2500 api-driven-development.md # Complete API-first guide\n\u2502   \u251c\u2500\u2500 agent-define-implementation-plan.md\n\u2502   \u251c\u2500\u2500 agent-schema-reference.md\n\u2502   \u2514\u2500\u2500 references.md\n\u2502\n\u251c\u2500\u2500 src/                            # Generated models (output)\n\u2502   \u2514\u2500\u2500 models/user-service/*.ts   # TypeScript models example\n\u2502\n\u251c\u2500\u2500 tests/                          # Test suite\n\u251c\u2500\u2500 specs/                          # API specifications\n\u2514\u2500\u2500 README.md                       # Project overview\n</code></pre>"},{"location":"CODEBASE_ANALYSIS/#the-five-layer-architecture","title":"The Five-Layer Architecture","text":""},{"location":"CODEBASE_ANALYSIS/#layer-1-commands-user-interface-phase-3-complete","title":"Layer 1: Commands (User Interface) - PHASE 3 COMPLETE","text":"<p>Purpose: Provide intuitive slash commands for users</p> <p>Status: IMPLEMENTED - \u2705 <code>/api-design &lt;service-name&gt;</code> - Design API from scratch - \u2705 <code>/api-validate &lt;spec-path&gt;</code> - Validate specifications - \u2705 <code>/api-generate &lt;spec-path&gt; &lt;language&gt;</code> - Generate models - \u2705 <code>/api-compatibility &lt;old&gt; &lt;new&gt;</code> - Check breaking changes</p> <p>Location: <code>/home/user/betty/.claude/commands/</code></p> <p>What's Missing: command.define skill (planned in api-driven-development.md line 97-99) - No skill exists yet to programmatically create/register new commands - Commands are currently manually defined in markdown files - Need infrastructure to support command registration via skill</p>"},{"location":"CODEBASE_ANALYSIS/#layer-2-agents-reasoning-layer-phase-4-in-progress","title":"Layer 2: Agents (Reasoning Layer) - PHASE 4 IN PROGRESS","text":"<p>Purpose: Provide intelligent, iterative orchestration with feedback loops</p> <p>Status: PARTIALLY IMPLEMENTED - \u2705 <code>agent.define</code> skill (validates &amp; registers agents) - ACTIVE - \u2705 <code>api.designer</code> agent (draft) - defined in <code>/registry/agents.json</code> - \u2705 <code>api.analyzer</code> agent (draft) - defined in <code>/registry/agents.json</code> - \u2705 Agent manifest schema defined in <code>betty-architecture.md</code> - \u2705 Agent registry infrastructure: <code>/registry/agents.json</code></p> <p>Implementation: <code>/home/user/betty/skills/agent.define/agent_define.py</code> - Full implementation with validation logic - Validates: name format, version (semver), reasoning_mode, skill references, capabilities - Creates/updates <code>/registry/agents.json</code></p> <p>Schema Fields: - Required: <code>name</code>, <code>version</code>, <code>description</code>, <code>capabilities</code>, <code>skills_available</code>, <code>reasoning_mode</code> - Optional: <code>status</code>, <code>context_requirements</code>, <code>workflow_pattern</code>, <code>example_task</code>, <code>error_handling</code>, <code>output</code>, <code>tags</code>, <code>dependencies</code></p> <p>Agent Configuration in betty/config.py: <pre><code>REQUIRED_AGENT_FIELDS = [\"name\", \"version\", \"description\", \"capabilities\", \"skills_available\", \"reasoning_mode\"]\n\nclass AgentStatus(Enum):\n    DRAFT = \"draft\"\n    ACTIVE = \"active\"\n    DEPRECATED = \"deprecated\"\n    ARCHIVED = \"archived\"\n\nclass ReasoningMode(Enum):\n    ITERATIVE = \"iterative\"      # Can retry with feedback\n    ONESHOT = \"oneshot\"          # Executes once without retry\n</code></pre></p>"},{"location":"CODEBASE_ANALYSIS/#layer-3-workflows-orchestration-layer-stable","title":"Layer 3: Workflows (Orchestration Layer) - STABLE","text":"<p>Purpose: Define repeatable, auditable multi-step processes</p> <p>Status: FULLY IMPLEMENTED - \u2705 <code>workflow.compose</code> skill - Executes YAML workflows - \u2705 <code>workflow.validate</code> skill - Validates workflow structure - \u2705 Workflow execution audit trail in <code>/registry/workflow_history.json</code></p> <p>Location: <code>/home/user/betty/skills/workflow.compose/</code></p> <p>Features: - Sequential execution of skills - Conditional execution (when clauses) - Output variable passing - Audit trail logging - Error handling and cleanup</p>"},{"location":"CODEBASE_ANALYSIS/#layer-4-skills-execution-layer-stable","title":"Layer 4: Skills (Execution Layer) - STABLE","text":"<p>Purpose: Provide atomic, testable, reusable operations</p> <p>Status: FULLY IMPLEMENTED - 11 Active Skills</p> Skill Purpose Status <code>skill.create</code> Scaffold new skill directories ACTIVE <code>skill.define</code> Validate &amp; register skills ACTIVE <code>registry.update</code> Update skill registry ACTIVE <code>workflow.compose</code> Execute workflows ACTIVE <code>workflow.validate</code> Validate workflow YAML ACTIVE <code>api.define</code> Create OpenAPI/AsyncAPI specs ACTIVE <code>api.validate</code> Validate specs against guidelines ACTIVE <code>api.generate-models</code> Generate models via Modelina ACTIVE <code>api.compatibility</code> Detect breaking changes ACTIVE <code>hook.define</code> Register validation hooks ACTIVE <code>agent.define</code> Validate &amp; register agents ACTIVE <p>Skill Manifest Structure (in <code>skill.yaml</code>): - Required: <code>name</code>, <code>version</code>, <code>description</code>, <code>inputs</code>, <code>outputs</code>, <code>status</code> - Optional: <code>dependencies</code>, <code>entrypoints</code>, <code>permissions</code>, <code>tags</code></p> <p>Validation (in <code>betty/validation.py</code>): - Skill names must match: <code>^[a-z][a-z0-9._-]*$</code> - Versions must follow semantic versioning</p>"},{"location":"CODEBASE_ANALYSIS/#layer-5-hooks-validationpolicy-layer-stable","title":"Layer 5: Hooks (Validation/Policy Layer) - STABLE","text":"<p>Purpose: Automatic validation and policy enforcement</p> <p>Status: FULLY IMPLEMENTED</p> <p>Location: <code>/home/user/betty/.claude/hooks.yaml</code></p> <p>Implemented Hook Configuration (from real file): <pre><code>hooks:\n  on_file_edit:\n    - name: python betty-skills-api-validate-api_validate-py {file_path} zalando-all.openapi.yaml\n      command: python betty/skills/api.validate/api_validate.py {file_path} zalando\n      blocking: true\n      timeout: 10000\n      when:\n        pattern: '*.openapi.yaml'\n      description: Validate OpenAPI specs against Zalando guidelines on every edit\n\n    - name: python betty-skills-api-validate-api_validate-py {file_path}-all.asyncapi.yaml\n      command: python betty/skills/api.validate/api_validate.py {file_path}\n      blocking: true\n      timeout: 10000\n      when:\n        pattern: '*.asyncapi.yaml'\n      description: Validate AsyncAPI specs on every edit\n</code></pre></p> <p>Supported Events: - <code>on_file_edit</code> - File edited in editor - <code>on_file_save</code> - File saved - <code>on_commit</code> - Git commit attempted - <code>on_push</code> - Git push attempted - <code>on_tool_use</code> - Tool used - <code>on_agent_start</code> - Agent execution begins - <code>on_workflow_end</code> - Workflow completes</p> <p>Hook Features: - Pattern matching for file selection - Blocking vs non-blocking execution - Timeout configuration - Error handling strategy</p> <p>Implementation: <code>/home/user/betty/skills/hook.define/hook_define.py</code> - Creates hook configurations - Updates <code>.claude/hooks.yaml</code> - Manages hook registry</p>"},{"location":"CODEBASE_ANALYSIS/#core-infrastructure-components","title":"Core Infrastructure Components","text":""},{"location":"CODEBASE_ANALYSIS/#configuration-system-bettyconfigpy","title":"Configuration System (<code>betty/config.py</code>)","text":"<p>Key Configuration: <pre><code>BETTY_HOME = os.environ.get('BETTY_HOME', ...)\nBASE_DIR = BETTY_HOME\nSKILLS_DIR = os.path.join(BASE_DIR, \"skills\")\nAGENTS_DIR = os.path.join(BASE_DIR, \"agents\")\nREGISTRY_DIR = os.path.join(BASE_DIR, \"registry\")\nWORKFLOWS_DIR = os.path.join(BASE_DIR, \"workflows\")\nDOCS_DIR = os.path.join(BASE_DIR, \"docs\")\n\nREGISTRY_FILE = os.path.join(REGISTRY_DIR, \"skills.json\")\nAGENTS_REGISTRY_FILE = os.path.join(REGISTRY_DIR, \"agents.json\")\nWORKFLOW_HISTORY_FILE = os.path.join(REGISTRY_DIR, \"workflow_history.json\")\n</code></pre></p> <p>Helper Functions: - <code>get_skill_path(skill_name)</code> - Directory path for skill - <code>get_skill_manifest_path(skill_name)</code> - Path to skill.yaml - <code>get_agent_path(agent_name)</code> - Directory path for agent - <code>get_agent_manifest_path(agent_name)</code> - Path to agent.yaml - <code>ensure_directories()</code> - Create required directories</p>"},{"location":"CODEBASE_ANALYSIS/#validation-system-bettyvalidationpy","title":"Validation System (<code>betty/validation.py</code>)","text":"<p>Functions: - <code>validate_skill_name(name)</code> - Check naming convention - <code>validate_agent_name(name)</code> - Check agent naming convention - <code>validate_path(path, must_exist)</code> - File path validation - <code>validate_manifest_fields(manifest, required_fields)</code> - Check required fields - <code>validate_version(version)</code> - Semantic version validation - <code>validate_reasoning_mode(mode)</code> - Agent reasoning mode validation - <code>validate_skills_exist(skills, skill_registry)</code> - Verify skills in registry</p>"},{"location":"CODEBASE_ANALYSIS/#error-handling-bettyerrorspy","title":"Error Handling (<code>betty/errors.py</code>)","text":"<p>Exception Classes: <pre><code>BettyError                    # Base exception\n\u251c\u2500\u2500 SkillNotFoundError\n\u251c\u2500\u2500 SkillValidationError\n\u251c\u2500\u2500 RegistryError\n\u251c\u2500\u2500 WorkflowError\n\u251c\u2500\u2500 ManifestError\n\u251c\u2500\u2500 AgentValidationError      # NEW - Phase 4\n\u251c\u2500\u2500 AgentRegistryError        # NEW - Phase 4\n\u2514\u2500\u2500 ...\n\nformat_error_response(error, include_traceback)  # Standardized error formatting\n</code></pre></p>"},{"location":"CODEBASE_ANALYSIS/#registries","title":"Registries","text":"<p>Skills Registry (<code>/registry/skills.json</code>): <pre><code>{\n  \"registry_version\": \"1.0.0\",\n  \"generated_at\": \"2025-10-23T01:40:13.390630+00:00\",\n  \"skills\": [\n    {\n      \"name\": \"skill.define\",\n      \"version\": \"0.1.0\",\n      \"description\": \"...\",\n      \"inputs\": [...],\n      \"outputs\": [...],\n      \"dependencies\": [],\n      \"status\": \"active\",\n      \"entrypoints\": [...]\n    }\n  ]\n}\n</code></pre></p> <p>Agents Registry (<code>/registry/agents.json</code>): <pre><code>{\n  \"registry_version\": \"1.0.0\",\n  \"generated_at\": \"2025-10-23T01:39:51.136417+00:00\",\n  \"agents\": [\n    {\n      \"name\": \"api.designer\",\n      \"version\": \"0.1.0\",\n      \"description\": \"...\",\n      \"reasoning_mode\": \"iterative\",\n      \"skills_available\": [...],\n      \"capabilities\": [...],\n      \"status\": \"draft\",\n      \"tags\": [...],\n      \"dependencies\": []\n    }\n  ]\n}\n</code></pre></p>"},{"location":"CODEBASE_ANALYSIS/#what-exists-vs-whats-missing","title":"What Exists vs What's Missing","text":""},{"location":"CODEBASE_ANALYSIS/#fully-implemented-green-light","title":"Fully Implemented (Green Light)","text":"<p>\u2705 Skill Infrastructure - Skill creation, validation, registration - Skill manifest schema - Skill registry with full CRUD operations - Skill naming conventions and validation</p> <p>\u2705 Workflow Infrastructure - Workflow composition and orchestration - Workflow validation - Workflow execution audit trail - Multi-step process support</p> <p>\u2705 Hook Infrastructure - Hook definition and registration - Hook event handling (on_file_edit, on_commit, etc.) - Hook configuration in <code>.claude/hooks.yaml</code> - Integration with API validation</p> <p>\u2705 Agent Infrastructure (Phase 4) - Agent validation and registration - Agent registry with full CRUD operations - Agent manifest schema - Agent naming conventions and validation - Agent reasoning modes (iterative/oneshot) - Skill reference validation from agents</p> <p>\u2705 API Development Skills - OpenAPI/AsyncAPI spec creation (api.define) - Spec validation against Zalando guidelines (api.validate) - Type-safe model generation (api.generate-models) - Breaking change detection (api.compatibility)</p> <p>\u2705 User Interface (Phase 3) - Slash commands documented in markdown - Command structure defined - Integration with agents/workflows planned</p>"},{"location":"CODEBASE_ANALYSIS/#missing-incomplete-red-flags","title":"Missing / Incomplete (Red Flags)","text":"<p>\u274c command.define Skill (CRITICAL) - Referenced in api-driven-development.md (line 97-99) - Not implemented in <code>/skills/</code> - No command registration system - Commands currently hardcoded in markdown files</p> <p>What Needs to Be Built: 1. Skill manifest for <code>command.define</code> (skill.yaml) 2. Command validation logic (command naming, parameter validation) 3. Command manifest schema definition 4. Command registry or integration with Claude Code plugin system 5. Handler script to programmatically register commands 6. Documentation for command creation workflow</p> <p>Current Workaround: - Commands are manually documented in <code>.claude/commands/</code> - No programmatic way to create/manage commands - Commands reference agents/workflows but no registration system</p> <p>\u274c Command Registry - No <code>/registry/commands.json</code> exists - No mechanism to query available commands - No versioning for commands - No audit trail for command usage</p> <p>What Needs to Be Built: 1. Command registry file format 2. CRUD operations for commands 3. Command status tracking (active, deprecated, etc.) 4. Integration with command.define skill</p> <p>\u274c Command-to-Agent/Workflow Mapping - Commands documented but not linked to agents - No formal execution model defined - Parameter passing between command and agent not specified</p> <p>What Needs to Be Built: 1. Formal command execution model 2. Parameter type definitions for commands 3. Response format specification 4. Error handling and validation</p>"},{"location":"CODEBASE_ANALYSIS/#implementation-plans-references","title":"Implementation Plans &amp; References","text":""},{"location":"CODEBASE_ANALYSIS/#documented-plans","title":"Documented Plans","text":"<p>File: <code>/home/user/betty/docs/agent-define-implementation-plan.md</code> - Complete implementation plan for agent.define skill (COMPLETED) - Includes configuration updates, validation strategy, checklist - Provides testing strategy and error handling examples</p> <p>File: <code>/home/user/betty/docs/betty-architecture.md</code> - Comprehensive five-layer architecture specification - Includes examples of each layer - Integration flow documentation - Design principles and separation of concerns</p> <p>File: <code>/home/user/betty/docs/api-driven-development.md</code> - Complete guide for API-first development workflow - Zalando guidelines compliance documentation - Modelina integration guide - Workflow examples and usage patterns</p>"},{"location":"CODEBASE_ANALYSIS/#missing-documentation","title":"Missing Documentation","text":"<ul> <li>\u274c Command infrastructure specification</li> <li>\u274c Command manifest schema</li> <li>\u274c Command.define skill implementation plan</li> <li>\u274c Command registry specification</li> </ul>"},{"location":"CODEBASE_ANALYSIS/#code-quality-standards","title":"Code Quality &amp; Standards","text":""},{"location":"CODEBASE_ANALYSIS/#naming-conventions","title":"Naming Conventions","text":"<p>Skills: <code>&lt;domain&gt;.&lt;action&gt;</code>  - Examples: <code>api.define</code>, <code>workflow.validate</code>, <code>hook.define</code>, <code>agent.define</code> - Regex: <code>^[a-z][a-z0-9._-]*$</code></p> <p>Agents: <code>&lt;domain&gt;.&lt;action&gt;</code> - Examples: <code>api.designer</code>, <code>api.analyzer</code>, <code>compliance.checker</code> - Regex: <code>^[a-z][a-z0-9._-]*$</code></p> <p>Version Format: Semantic versioning <code>MAJOR.MINOR.PATCH[-prerelease]</code></p> <p>Status Values: <code>draft</code>, <code>active</code>, <code>deprecated</code>, <code>archived</code></p>"},{"location":"CODEBASE_ANALYSIS/#error-handling-patterns","title":"Error Handling Patterns","text":"<p>All skills follow consistent error response format: <pre><code>{\n  \"ok\": false,\n  \"status\": \"failed\",\n  \"errors\": [\"Error message 1\", \"Error message 2\"],\n  \"path\": \"path/to/file\",\n  \"details\": { ... }\n}\n</code></pre></p>"},{"location":"CODEBASE_ANALYSIS/#testing-infrastructure","title":"Testing Infrastructure","text":"<p>Current: - pytest.ini configured - Test files in <code>/tests/</code> directory - skill.create includes test scaffolding</p> <p>Missing: - No command.define tests - Limited test documentation - No integration test suite for full five-layer flow</p>"},{"location":"CODEBASE_ANALYSIS/#todo-comments-found-in-codebase","title":"TODO Comments Found in Codebase","text":"<p>File: <code>/home/user/betty/skills/skill.create/skill_create.py</code> <pre><code>TODO: Add usage instructions\nTODO: Document inputs\nTODO: Document outputs\nTODO: List dependencies\nTODO: Add arguments (line 96)\nTODO: Implement skill logic (line 104)\n</code></pre></p>"},{"location":"CODEBASE_ANALYSIS/#key-technology-stack","title":"Key Technology Stack","text":"<ul> <li>Language: Python 3.11+</li> <li>YAML: PyYAML for manifest parsing</li> <li>API Validation: Zally (Zalando's linter)</li> <li>Code Generation: Modelina</li> <li>OpenAPI: 3.1 specification</li> <li>AsyncAPI: 3.0 specification</li> <li>Git: Hooks support via Claude Code</li> <li>JSON: Registry serialization</li> </ul>"},{"location":"CODEBASE_ANALYSIS/#current-phase-status","title":"Current Phase Status","text":""},{"location":"CODEBASE_ANALYSIS/#phase-1-foundation-hooks-skills-complete","title":"Phase 1: Foundation (Hooks + Skills) - COMPLETE \u2705","text":"<ul> <li>Implemented basic skill infrastructure</li> <li>Implemented hook system</li> <li>Created api.validate and api.define skills</li> <li>Generated hooks for automatic validation</li> </ul>"},{"location":"CODEBASE_ANALYSIS/#phase-2-orchestration-workflows-complete","title":"Phase 2: Orchestration (Workflows) - COMPLETE \u2705","text":"<ul> <li>Implemented workflow composition</li> <li>Implemented workflow validation</li> <li>Created api.generate-models and api.compatibility skills</li> </ul>"},{"location":"CODEBASE_ANALYSIS/#phase-3-interface-commands-complete","title":"Phase 3: Interface (Commands) - COMPLETE \u2705","text":"<ul> <li>Documented slash commands</li> <li>Created command markdown files</li> <li>Integration with agents planned</li> </ul>"},{"location":"CODEBASE_ANALYSIS/#phase-4-intelligence-agents-in-progress","title":"Phase 4: Intelligence (Agents) - IN PROGRESS \ud83d\ude80","text":"<ul> <li>Implemented agent.define skill</li> <li>Created agent registry infrastructure</li> <li>Defined agent manifest schema</li> <li>Drafted api.designer and api.analyzer agents</li> <li>Missing: command.define skill to bridge to user interface</li> </ul>"},{"location":"CODEBASE_ANALYSIS/#phase-5-advanced-features-not-started","title":"Phase 5: Advanced Features - NOT STARTED","text":"<ul> <li>Multi-agent collaboration</li> <li>Advanced reasoning patterns</li> <li>Marketplace integration</li> <li>Policy enforcement system</li> </ul>"},{"location":"CODEBASE_ANALYSIS/#recommendations-for-command-infrastructure","title":"Recommendations for Command Infrastructure","text":""},{"location":"CODEBASE_ANALYSIS/#immediate-needs-critical-path","title":"Immediate Needs (Critical Path)","text":"<ol> <li>Create command.define Skill</li> <li>Mirror structure of agent.define and skill.define</li> <li>Validate command naming, parameters, and execution targets</li> <li> <p>Register commands in command registry</p> </li> <li> <p>Define Command Manifest Schema</p> </li> <li>Name, description, parameters</li> <li>Execution target (agent/workflow/skill)</li> <li>Parameter type definitions and validation</li> <li> <p>Status and versioning</p> </li> <li> <p>Create Command Registry (<code>/registry/commands.json</code>)</p> </li> <li>Track all registered commands</li> <li>Version tracking</li> <li>Status and deprecation tracking</li> <li> <p>Execution audit trail</p> </li> <li> <p>Implement Command Execution Model</p> </li> <li>How commands receive parameters</li> <li>How commands invoke agents/workflows</li> <li>How responses are formatted</li> <li>Error handling and validation</li> </ol>"},{"location":"CODEBASE_ANALYSIS/#future-enhancements","title":"Future Enhancements","text":"<ul> <li>Command discovery API</li> <li>Command versioning and compatibility checking</li> <li>Command deprecation warnings</li> <li>Command usage analytics</li> <li>Dynamic command registration</li> <li>Command aliases and shortcuts</li> <li>Context-aware command suggestions</li> </ul>"},{"location":"CODEBASE_ANALYSIS/#integration-points","title":"Integration Points","text":"<p>The five layers integrate as follows:</p> <pre><code>User Input\n    \u2193\nCommands (Layer 1)\n    \u2193 delegates to\nAgents (Layer 2)\n    \u2193 orchestrates\nWorkflows (Layer 3)\n    \u2193 executes\nSkills (Layer 4)\n    \u2193 protected by\nHooks (Layer 5)\n    \u2193 validates/blocks\nUser Output\n</code></pre> <p>Current Status: - Layers 4-5 (Skills + Hooks): FULLY FUNCTIONAL - Layer 3 (Workflows): FULLY FUNCTIONAL - Layer 2 (Agents): MOSTLY DONE (waiting on commands) - Layer 1 (Commands): DOCUMENTED but INCOMPLETE (missing command.define)</p>"},{"location":"CODEBASE_ANALYSIS/#summary","title":"Summary","text":"<p>The Betty Framework is a well-architected system that successfully implements: - A five-layer architecture for AI-driven development - Comprehensive skill infrastructure with validation and registry - Automatic validation via hooks - Workflow orchestration with audit trails - Agent-based reasoning layer with skill composition</p> <p>The critical gap is the command infrastructure, specifically: - No <code>command.define</code> skill to programmatically register commands - No command registry to track available commands - No formal command execution model - Commands exist only as documentation</p> <p>This gap prevents the full integration of the five-layer architecture. Once <code>command.define</code> is implemented, users can run <code>/api-design service-name</code> which will delegate to agents, which orchestrate workflows, which execute skills, all protected by hooks\u2014completing the vision of structured, auditable AI-assisted engineering.</p>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/","title":"Command and Hook Infrastructure","text":"<p>This document describes the command and hook infrastructure added to the Betty Framework in Layer 1 (Commands) and Layer 5 (Hooks).</p>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#overview","title":"Overview","text":"<p>The Betty Framework now has complete infrastructure for:</p> <ol> <li>Commands (Layer 1) - User-facing entry points</li> <li>Hooks (Layer 5) - Automatic validation and policy enforcement</li> </ol> <p>Both support manifest-based definition, validation, and registry management, consistent with Skills (Layer 4) and Agents (Layer 2).</p>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#architecture","title":"Architecture","text":"<pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  COMMANDS (User Interface Layer)            \u2502\n\u2502  Slash commands: /api-design, /validate     \u2502\n\u2502  \u2705 command.define skill validates          \u2502\n\u2502  \u2705 commands.json registry tracks all       \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502 triggers\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  AGENTS (Reasoning Layer)                   \u2502\n\u2502  Intelligent orchestration with feedback    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502 orchestrates\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  WORKFLOWS (Orchestration Layer)            \u2502\n\u2502  Declarative YAML multi-step processes      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502 executes\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  SKILLS (Execution Layer)                   \u2502\n\u2502  Atomic, testable operations                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502 protected by\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  HOOKS (Validation/Policy Layer)            \u2502\n\u2502  Automatic validation and governance        \u2502\n\u2502  \u2705 hook.define skill creates hooks         \u2502\n\u2502  \u2705 hook.register validates manifests       \u2502\n\u2502  \u2705 hooks.json registry tracks all          \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#layer-1-commands","title":"Layer 1: Commands","text":""},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#command-manifest-schema","title":"Command Manifest Schema","text":"<p>Commands are defined using YAML manifests that specify:</p> <ul> <li>name: Command name (must start with <code>/</code>)</li> <li>version: Semantic version</li> <li>description: Human-readable purpose</li> <li>parameters: Optional list of parameters</li> <li>execution: How the command executes (agent/skill/workflow)</li> <li>status: Lifecycle status (draft/active/deprecated/archived)</li> <li>tags: Categorization tags</li> </ul>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#example-command-manifest","title":"Example Command Manifest","text":"<pre><code># examples/test-command.yaml\n\nname: /api-design\nversion: 0.1.0\ndescription: \"Design a new API following enterprise guidelines\"\n\nparameters:\n  - name: service_name\n    type: string\n    required: true\n    description: \"Name of the service/API\"\n\n  - name: spec_type\n    type: enum\n    values: [openapi, asyncapi]\n    default: openapi\n    description: \"Type of API specification\"\n\nexecution:\n  type: agent              # Delegates to an agent\n  target: api.designer     # Which agent to invoke\n  context:\n    guidelines: zalando    # Context passed to agent\n    generate_models: true\n\nstatus: active\n\ntags: [api, design, user-facing]\n</code></pre>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#command-execution-types","title":"Command Execution Types","text":"<p>Commands can execute in three modes:</p> <ol> <li>agent: Delegates to an intelligent agent</li> <li>Example: <code>/api-design</code> \u2192 <code>api.designer</code> agent</li> <li> <p>Best for: Complex tasks requiring reasoning</p> </li> <li> <p>skill: Calls a skill directly</p> </li> <li>Example: <code>/api-validate</code> \u2192 <code>api.validate</code> skill</li> <li> <p>Best for: Simple, deterministic operations</p> </li> <li> <p>workflow: Executes a workflow</p> </li> <li>Example: <code>/api-pipeline</code> \u2192 <code>api_first_development.yaml</code></li> <li>Best for: Multi-step processes</li> </ol>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#commanddefine-skill","title":"command.define Skill","text":"<p>The <code>command.define</code> skill validates and registers command manifests.</p> <p>Usage:</p> <pre><code>python skills/command.define/command_define.py &lt;path-to-command.yaml&gt;\n</code></pre> <p>Validation checks:</p> <ol> <li>Required fields present (name, version, description, execution)</li> <li>Name format valid (starts with <code>/</code>, lowercase, hyphens only)</li> <li>Version follows semantic versioning</li> <li>Execution type is valid (agent/skill/workflow)</li> <li>Execution target exists in appropriate registry</li> <li>Parameters are properly formatted</li> </ol> <p>Output:</p> <pre><code>{\n  \"ok\": true,\n  \"status\": \"success\",\n  \"errors\": [],\n  \"path\": \"examples/test-command.yaml\",\n  \"details\": {\n    \"valid\": true,\n    \"status\": \"registered\",\n    \"registry_updated\": true\n  }\n}\n</code></pre>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#command-registry","title":"Command Registry","text":"<p>Commands are tracked in <code>/registry/commands.json</code>:</p> <pre><code>{\n  \"registry_version\": \"1.0.0\",\n  \"generated_at\": \"2025-10-23T01:53:41.669518+00:00\",\n  \"commands\": [\n    {\n      \"name\": \"/api-design\",\n      \"version\": \"0.1.0\",\n      \"description\": \"Design API following enterprise guidelines\",\n      \"execution\": {\n        \"type\": \"agent\",\n        \"target\": \"api.designer\"\n      },\n      \"parameters\": [...],\n      \"status\": \"active\",\n      \"tags\": [\"api\", \"design\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#layer-5-hooks","title":"Layer 5: Hooks","text":""},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#hook-manifest-schema","title":"Hook Manifest Schema","text":"<p>Hooks are defined using YAML manifests that specify:</p> <ul> <li>name: Hook identifier (lowercase, hyphens, underscores)</li> <li>version: Semantic version</li> <li>description: Human-readable purpose</li> <li>event: When the hook triggers (on_file_edit, on_commit, etc.)</li> <li>command: Command to execute</li> <li>when: Optional conditions (file pattern)</li> <li>blocking: Whether hook blocks on failure</li> <li>timeout: Timeout in milliseconds</li> <li>status: Lifecycle status (draft/active/disabled/archived)</li> <li>tags: Categorization tags</li> </ul>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#example-hook-manifest","title":"Example Hook Manifest","text":"<pre><code># examples/test-hook.yaml\n\nname: validate-openapi-spec\nversion: 0.1.0\ndescription: \"Validate OpenAPI specs against Zalando guidelines on every edit\"\n\nevent: on_file_edit\n\ncommand: \"python betty/skills/api.validate/api_validate.py {file_path} zalando\"\n\nwhen:\n  pattern: \"*.openapi.yaml\"\n\nblocking: true\n\ntimeout: 30000\n\non_failure: show_errors\n\nstatus: active\n\ntags: [validation, openapi, zalando]\n</code></pre>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#hook-events","title":"Hook Events","text":"<p>Hooks can trigger on these events:</p> Event Description Use Case <code>on_file_edit</code> File is edited Validate syntax on every edit <code>on_file_save</code> File is saved Trigger code generation <code>on_commit</code> Git commit Prevent breaking changes <code>on_push</code> Git push Run full validation suite <code>on_tool_use</code> Tool is used Audit trail logging <code>on_agent_start</code> Agent starts Context injection <code>on_workflow_end</code> Workflow completes Cleanup/notification"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#hookdefine-skill","title":"hook.define Skill","text":"<p>The <code>hook.define</code> skill creates hooks programmatically via CLI.</p> <p>Usage:</p> <pre><code>python skills/hook.define/hook_define.py \\\n  on_file_edit \\\n  \"python betty/skills/api.validate/api_validate.py {file_path} zalando\" \\\n  --pattern=\"*.openapi.yaml\" \\\n  --blocking=true \\\n  --timeout=30000 \\\n  --description=\"Validate OpenAPI specs on edit\"\n</code></pre> <p>This creates entries in <code>.claude/hooks.yaml</code> for Claude Code to execute.</p>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#hookregister-skill","title":"hook.register Skill","text":"<p>The <code>hook.register</code> skill validates and registers hook manifests (similar to <code>command.define</code>).</p> <p>Usage:</p> <pre><code>python skills/hook.register/hook_register.py &lt;path-to-hook.yaml&gt;\n</code></pre> <p>Validation checks:</p> <ol> <li>Required fields present (name, version, description, event, command)</li> <li>Name format valid (lowercase, hyphens, underscores)</li> <li>Version follows semantic versioning</li> <li>Event type is valid</li> <li>Command is not empty</li> <li>Blocking is boolean (if present)</li> <li>Timeout is positive number (if present)</li> <li>when.pattern is valid (if present)</li> </ol> <p>Output:</p> <pre><code>{\n  \"ok\": true,\n  \"status\": \"success\",\n  \"errors\": [],\n  \"path\": \"examples/test-hook.yaml\",\n  \"details\": {\n    \"valid\": true,\n    \"status\": \"registered\",\n    \"registry_updated\": true\n  }\n}\n</code></pre>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#hook-registry","title":"Hook Registry","text":"<p>Hooks are tracked in <code>/registry/hooks.json</code>:</p> <pre><code>{\n  \"registry_version\": \"1.0.0\",\n  \"generated_at\": \"2025-10-23T01:55:03.830469+00:00\",\n  \"hooks\": [\n    {\n      \"name\": \"validate-openapi-spec\",\n      \"version\": \"0.1.0\",\n      \"description\": \"Validate OpenAPI specs against Zalando guidelines\",\n      \"event\": \"on_file_edit\",\n      \"command\": \"python betty/skills/api.validate/api_validate.py {file_path} zalando\",\n      \"when\": {\n        \"pattern\": \"*.openapi.yaml\"\n      },\n      \"blocking\": true,\n      \"timeout\": 30000,\n      \"on_failure\": \"show_errors\",\n      \"status\": \"active\",\n      \"tags\": [\"validation\", \"openapi\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#configuration","title":"Configuration","text":""},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#configpy","title":"config.py","text":"<p>New configuration constants:</p> <pre><code># File paths\nCOMMANDS_REGISTRY_FILE = os.path.join(REGISTRY_DIR, \"commands.json\")\nHOOKS_REGISTRY_FILE = os.path.join(REGISTRY_DIR, \"hooks.json\")\n\n# Required fields\nREQUIRED_COMMAND_FIELDS = [\"name\", \"version\", \"description\", \"execution\"]\nREQUIRED_HOOK_FIELDS = [\"name\", \"version\", \"description\", \"event\", \"command\"]\n\n# Enums\nclass CommandExecutionType(Enum):\n    AGENT = \"agent\"\n    SKILL = \"skill\"\n    WORKFLOW = \"workflow\"\n\nclass HookEvent(Enum):\n    ON_FILE_EDIT = \"on_file_edit\"\n    ON_FILE_SAVE = \"on_file_save\"\n    ON_COMMIT = \"on_commit\"\n    ON_PUSH = \"on_push\"\n    ON_TOOL_USE = \"on_tool_use\"\n    ON_AGENT_START = \"on_agent_start\"\n    ON_WORKFLOW_END = \"on_workflow_end\"\n\nclass CommandStatus(Enum):\n    DRAFT = \"draft\"\n    ACTIVE = \"active\"\n    DEPRECATED = \"deprecated\"\n    ARCHIVED = \"archived\"\n\nclass HookStatus(Enum):\n    DRAFT = \"draft\"\n    ACTIVE = \"active\"\n    DISABLED = \"disabled\"\n    ARCHIVED = \"archived\"\n</code></pre>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#validationpy","title":"validation.py","text":"<p>New validation functions:</p> <pre><code>def validate_command_name(name: str) -&gt; None:\n    \"\"\"Validate command name (must start with '/', lowercase, hyphens).\"\"\"\n\ndef validate_hook_name(name: str) -&gt; None:\n    \"\"\"Validate hook name (lowercase, hyphens, underscores).\"\"\"\n\ndef validate_command_execution_type(execution_type: str) -&gt; None:\n    \"\"\"Validate execution type (agent/skill/workflow).\"\"\"\n\ndef validate_hook_event(event: str) -&gt; None:\n    \"\"\"Validate hook event type.\"\"\"\n</code></pre>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#skills-summary","title":"Skills Summary","text":"Skill Purpose Registry Status <code>command.define</code> Validate and register command manifests <code>commands.json</code> \u2705 Active <code>hook.define</code> Create hooks programmatically <code>.claude/hooks.yaml</code> \u2705 Active <code>hook.register</code> Validate and register hook manifests <code>hooks.json</code> \u2705 Active"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#example-workflows","title":"Example Workflows","text":""},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#creating-a-new-command","title":"Creating a New Command","text":"<ol> <li>Define manifest:</li> </ol> <pre><code># commands/my-command.yaml\nname: /my-command\nversion: 0.1.0\ndescription: \"My custom command\"\nexecution:\n  type: skill\n  target: my.skill\nstatus: active\n</code></pre> <ol> <li>Validate and register:</li> </ol> <pre><code>python skills/command.define/command_define.py commands/my-command.yaml\n</code></pre> <ol> <li>Verify registration:</li> </ol> <pre><code>cat registry/commands.json\n</code></pre>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#creating-a-new-hook","title":"Creating a New Hook","text":"<ol> <li>Define manifest:</li> </ol> <pre><code># hooks/my-hook.yaml\nname: my-validation-hook\nversion: 0.1.0\ndescription: \"Validate my files\"\nevent: on_file_edit\ncommand: \"python skills/my.validate/validate.py {file_path}\"\nwhen:\n  pattern: \"*.myfile\"\nblocking: true\nstatus: active\n</code></pre> <ol> <li>Validate and register:</li> </ol> <pre><code>python skills/hook.register/hook_register.py hooks/my-hook.yaml\n</code></pre> <ol> <li>Verify registration:</li> </ol> <pre><code>cat registry/hooks.json\n</code></pre>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#integration-with-betty-layers","title":"Integration with Betty Layers","text":""},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#commands-agents","title":"Commands \u2192 Agents","text":"<pre><code>execution:\n  type: agent\n  target: api.designer\n</code></pre> <p>Command <code>/api-design</code> delegates to <code>api.designer</code> agent.</p>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#commands-skills","title":"Commands \u2192 Skills","text":"<pre><code>execution:\n  type: skill\n  target: api.validate\n</code></pre> <p>Command <code>/api-validate</code> calls <code>api.validate</code> skill directly.</p>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#commands-workflows","title":"Commands \u2192 Workflows","text":"<pre><code>execution:\n  type: workflow\n  target: api_first_development\n</code></pre> <p>Command <code>/api-pipeline</code> executes <code>api_first_development.yaml</code> workflow.</p>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#hooks-skills","title":"Hooks \u2192 Skills","text":"<pre><code>command: \"python skills/api.validate/api_validate.py {file_path} zalando\"\n</code></pre> <p>Hook calls <code>api.validate</code> skill on file edit.</p>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#benefits","title":"Benefits","text":""},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#commands","title":"Commands","text":"<p>\u2705 User-friendly: Simple slash commands for complex operations \u2705 Type-safe: Parameter validation before execution \u2705 Traceable: Registry tracks all available commands \u2705 Flexible: Can delegate to agents, skills, or workflows \u2705 Versioned: Semantic versioning for compatibility</p>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#hooks","title":"Hooks","text":"<p>\u2705 Automatic: Validation happens without user action \u2705 Immediate: Fast feedback on errors \u2705 Enforced: Blocking hooks prevent invalid states \u2705 Auditable: Registry tracks all hooks \u2705 Configurable: Pattern matching, timeouts, blocking mode</p>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#future-enhancements","title":"Future Enhancements","text":""},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#commands_1","title":"Commands","text":"<ul> <li>[ ] Command aliases (<code>/api</code> \u2192 <code>/api-design</code>)</li> <li>[ ] Command composition (combine multiple commands)</li> <li>[ ] Command history and analytics</li> <li>[ ] Interactive parameter prompts</li> </ul>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#hooks_1","title":"Hooks","text":"<ul> <li>[ ] Hook chains (multiple hooks on same event)</li> <li>[ ] Hook priorities (execution order)</li> <li>[ ] Hook analytics (execution times, failure rates)</li> <li>[ ] Conditional hooks (complex when clauses)</li> </ul>"},{"location":"COMMAND_HOOK_INFRASTRUCTURE/#see-also","title":"See Also","text":"<ul> <li>Betty Architecture - Five-layer design</li> <li>Agent Define Implementation - Layer 2</li> <li>Skills Framework - Layer 4</li> <li>Claude Code Hooks Documentation</li> </ul>"},{"location":"agent-define-implementation-plan/","title":"Implementation Plan: agent.define Skill","text":"<p>This document outlines the implementation plan for the <code>agent.define</code> skill, which validates and registers agent manifests in the Betty Framework.</p>"},{"location":"agent-define-implementation-plan/#status-ready-for-implementation","title":"Status: Ready for Implementation","text":"<p>Created: 2025-10-23 Target: Phase 4 of Betty Framework (Intelligence Layer) Priority: High (blocking agent development)</p>"},{"location":"agent-define-implementation-plan/#overview","title":"Overview","text":"<p>The <code>agent.define</code> skill will: 1. Validate agent manifests (<code>agent.yaml</code>) for schema compliance 2. Verify all referenced skills exist in the skill registry 3. Check for circular dependencies 4. Register valid agents in the agent registry (<code>/registry/agents.json</code>) 5. Generate documentation scaffolding</p>"},{"location":"agent-define-implementation-plan/#architecture-decisions","title":"Architecture Decisions","text":""},{"location":"agent-define-implementation-plan/#1-directory-structure","title":"1. Directory Structure","text":"<pre><code>betty-framework/\n\u251c\u2500\u2500 agents/                      # New directory for agent manifests\n\u2502   \u251c\u2500\u2500 api.designer/\n\u2502   \u2502   \u251c\u2500\u2500 agent.yaml          # Agent manifest\n\u2502   \u2502   \u251c\u2500\u2500 README.md           # Auto-generated documentation\n\u2502   \u2502   \u2514\u2500\u2500 tests/              # Agent behavior tests (optional)\n\u2502   \u2514\u2500\u2500 compliance.checker/\n\u2502       \u2514\u2500\u2500 agent.yaml\n\u2502\n\u251c\u2500\u2500 skills/\n\u2502   \u2514\u2500\u2500 agent.define/           # New skill\n\u2502       \u251c\u2500\u2500 skill.yaml          # Skill manifest\n\u2502       \u251c\u2500\u2500 agent_define.py     # Handler implementation\n\u2502       \u251c\u2500\u2500 SKILL.md           # Skill documentation\n\u2502       \u2514\u2500\u2500 tests/\n\u2502           \u2514\u2500\u2500 test_agent_define.py\n\u2502\n\u251c\u2500\u2500 registry/\n\u2502   \u251c\u2500\u2500 skills.json            # Existing skill registry\n\u2502   \u2514\u2500\u2500 agents.json            # New agent registry\n\u2502\n\u2514\u2500\u2500 betty/\n    \u2514\u2500\u2500 config.py              # Update with agent-related constants\n</code></pre>"},{"location":"agent-define-implementation-plan/#2-agent-registry-format","title":"2. Agent Registry Format","text":"<p><code>/registry/agents.json</code>: <pre><code>{\n  \"registry_version\": \"1.0.0\",\n  \"generated_at\": \"2025-10-23T10:00:00Z\",\n  \"agents\": [\n    {\n      \"name\": \"api.designer\",\n      \"version\": \"0.1.0\",\n      \"description\": \"Design RESTful APIs following enterprise guidelines\",\n      \"reasoning_mode\": \"iterative\",\n      \"skills_available\": [\"api.define\", \"api.validate\", \"api.generate-models\"],\n      \"status\": \"draft\",\n      \"capabilities\": [...],\n      \"dependencies\": [],\n      \"tags\": [\"api\", \"design\", \"openapi\"]\n    }\n  ]\n}\n</code></pre></p>"},{"location":"agent-define-implementation-plan/#3-validation-strategy","title":"3. Validation Strategy","text":"<p>Follow the same pattern as <code>skill.define</code>: - Load and parse YAML - Validate required fields - Validate field formats (name, version) - Validate skill references against skill registry - Check for circular dependencies - Delegate to registry updater (new <code>registry.update-agent</code> or extend existing)</p>"},{"location":"agent-define-implementation-plan/#implementation-checklist","title":"Implementation Checklist","text":""},{"location":"agent-define-implementation-plan/#phase-1-configuration-updates","title":"Phase 1: Configuration Updates","text":"<ul> <li> <p>[ ] Update <code>/betty/config.py</code>:   <pre><code># Add agent-related paths\nAGENTS_DIR = os.path.join(BASE_DIR, \"agents\")\nAGENTS_REGISTRY_FILE = os.path.join(REGISTRY_DIR, \"agents.json\")\n\n# Agent manifest required fields\nREQUIRED_AGENT_FIELDS = [\n    \"name\",\n    \"version\",\n    \"description\",\n    \"capabilities\",\n    \"skills_available\",\n    \"reasoning_mode\"\n]\n\n# Agent status enum\nclass AgentStatus(Enum):\n    DRAFT = \"draft\"\n    ACTIVE = \"active\"\n    DEPRECATED = \"deprecated\"\n    ARCHIVED = \"archived\"\n\n# Agent reasoning modes\nclass ReasoningMode(Enum):\n    ITERATIVE = \"iterative\"\n    ONESHOT = \"oneshot\"\n\n# Helper functions\ndef get_agent_path(agent_name: str) -&gt; str:\n    \"\"\"Get the directory path for an agent.\"\"\"\n    return os.path.join(AGENTS_DIR, agent_name)\n\ndef get_agent_manifest_path(agent_name: str) -&gt; str:\n    \"\"\"Get the manifest path for an agent.\"\"\"\n    return os.path.join(AGENTS_DIR, agent_name, \"agent.yaml\")\n</code></pre></p> </li> <li> <p>[ ] Update <code>/betty/validation.py</code>:   <pre><code>def validate_agent_name(name: str) -&gt; bool:\n    \"\"\"Validate agent name format.\"\"\"\n    import re\n    pattern = r'^[a-z][a-z0-9._-]*$'\n    return bool(re.match(pattern, name))\n\ndef validate_reasoning_mode(mode: str) -&gt; bool:\n    \"\"\"Validate reasoning mode.\"\"\"\n    valid_modes = [\"iterative\", \"oneshot\"]\n    return mode in valid_modes\n\ndef validate_skills_exist(skills: list, skill_registry: dict) -&gt; tuple[bool, list]:\n    \"\"\"\n    Validate that all skills exist in the skill registry.\n\n    Returns:\n        (valid, missing_skills)\n    \"\"\"\n    skill_names = {skill[\"name\"] for skill in skill_registry.get(\"skills\", [])}\n    missing = [skill for skill in skills if skill not in skill_names]\n    return len(missing) == 0, missing\n</code></pre></p> </li> <li> <p>[ ] Update <code>/betty/errors.py</code>:   <pre><code>class AgentValidationError(BettyError):\n    \"\"\"Raised when agent manifest validation fails.\"\"\"\n    pass\n\nclass AgentRegistryError(BettyError):\n    \"\"\"Raised when agent registry operations fail.\"\"\"\n    pass\n</code></pre></p> </li> </ul>"},{"location":"agent-define-implementation-plan/#phase-2-create-agent-registry-infrastructure","title":"Phase 2: Create Agent Registry Infrastructure","text":"<ul> <li> <p>[ ] Create <code>/registry/agents.json</code>:   <pre><code>{\n  \"registry_version\": \"1.0.0\",\n  \"generated_at\": \"2025-10-23T00:00:00Z\",\n  \"agents\": []\n}\n</code></pre></p> </li> <li> <p>[ ] Create <code>/agents/</code> directory:   <pre><code>mkdir -p /home/user/betty/agents\n</code></pre></p> </li> <li> <p>[ ] Create <code>/agents/README.md</code>:   <pre><code># Betty Framework Agents\n\nThis directory contains agent manifests for the Betty Framework.\n\n## What are Agents?\n\nAgents are intelligent orchestrators that compose skills with reasoning,\ncontext awareness, and error recovery.\n\n## Structure\n\nEach agent has its own directory containing:\n- `agent.yaml` - Agent manifest (required)\n- `README.md` - Documentation (auto-generated)\n- `tests/` - Agent behavior tests (optional)\n\n## Creating an Agent\n\nUse the `agent.define` skill:\n```bash\npython skills/agent.define/agent_define.py agents/my.agent/agent.yaml\n</code></pre></p> </li> </ul> <p>## See Also</p> <ul> <li>Agent Schema Reference</li> <li>Betty Architecture   ```</li> </ul>"},{"location":"agent-define-implementation-plan/#phase-3-implement-agentdefine-skill","title":"Phase 3: Implement agent.define Skill","text":"<ul> <li> <p>[ ] Create <code>/skills/agent.define/</code> directory</p> </li> <li> <p>[ ] Create <code>/skills/agent.define/skill.yaml</code>:   <pre><code>name: agent.define\nversion: 0.1.0\ndescription: &gt;\n  Validates and registers agent manifests for the Betty Framework.\n  Ensures schema compliance and updates the Agent Registry.\n\ninputs:\n  - name: manifest_path\n    type: string\n    required: true\n    description: Path to the agent.yaml file to validate\n\noutputs:\n  - name: validation_result\n    type: object\n    description: Validation results including errors and warnings\n  - name: registry_updated\n    type: boolean\n    description: Whether agent was successfully registered\n\ndependencies:\n  - skill.define\n\nstatus: active\n\nentrypoints:\n  - command: /agent/define\n    handler: agent_define.py\n    runtime: python\n    description: &gt;\n      Validate an agent manifest and register it in the Agent Registry.\n    parameters:\n      - name: manifest_path\n        type: string\n        required: true\n        description: Path to the agent.yaml file\n    permissions:\n      - filesystem:read\n      - filesystem:write\n\ntags:\n  - agents\n  - validation\n  - registry\n</code></pre></p> </li> <li> <p>[ ] Create <code>/skills/agent.define/agent_define.py</code>:</p> </li> </ul> <p>Key functions:   <pre><code>def load_agent_manifest(path: str) -&gt; Dict[str, Any]:\n    \"\"\"Load and parse agent manifest from YAML.\"\"\"\n    pass\n\ndef validate_manifest(path: str, skill_registry: dict) -&gt; Dict[str, Any]:\n    \"\"\"\n    Validate agent manifest:\n    1. Check required fields\n    2. Validate name format\n    3. Validate version format\n    4. Validate reasoning_mode enum\n    5. Verify all skills exist in skill registry\n    6. Check for circular dependencies\n    \"\"\"\n    pass\n\ndef load_skill_registry() -&gt; dict:\n    \"\"\"Load skill registry for validation.\"\"\"\n    pass\n\ndef load_agent_registry() -&gt; dict:\n    \"\"\"Load existing agent registry.\"\"\"\n    pass\n\ndef update_agent_registry(manifest: dict) -&gt; bool:\n    \"\"\"\n    Add or update agent in registry:\n    1. Load existing registry\n    2. Check if agent exists (update vs create)\n    3. Add/update agent entry\n    4. Update generated_at timestamp\n    5. Write registry back to disk\n    \"\"\"\n    pass\n\ndef main():\n    \"\"\"\n    CLI entry point:\n    1. Parse arguments\n    2. Validate manifest\n    3. Update registry if valid\n    4. Return JSON response\n    \"\"\"\n    pass\n</code></pre></p> <p>Implementation pattern (similar to skill.define):   <pre><code>#!/usr/bin/env python3\n\"\"\"\nagent_define.py \u2013 Implementation of the agent.define Skill\nValidates agent manifests (agent.yaml) and registers them in the Agent Registry.\n\"\"\"\n\nimport os\nimport sys\nimport json\nimport yaml\nfrom typing import Dict, Any, List, Optional\nfrom datetime import datetime, timezone\n\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), \"../..\")))\n\nfrom betty.config import (\n    BASE_DIR,\n    REQUIRED_AGENT_FIELDS,\n    AGENTS_REGISTRY_FILE,\n    REGISTRY_FILE,\n    ReasoningMode\n)\nfrom betty.validation import (\n    validate_path,\n    validate_manifest_fields,\n    validate_agent_name,\n    validate_version,\n    validate_reasoning_mode,\n    validate_skills_exist\n)\nfrom betty.logging_utils import setup_logger\nfrom betty.errors import AgentValidationError, format_error_response\n\nlogger = setup_logger(__name__)\n\n# Implementation here...\n</code></pre></p> <ul> <li>[ ] Create <code>/skills/agent.define/SKILL.md</code>:</li> <li>Purpose and usage</li> <li>Examples</li> <li>Validation rules</li> <li> <p>Error handling</p> </li> <li> <p>[ ] Create <code>/skills/agent.define/tests/test_agent_define.py</code>:   <pre><code>\"\"\"Tests for agent.define skill.\"\"\"\nimport pytest\nimport os\nimport yaml\nfrom agent_define import (\n    load_agent_manifest,\n    validate_manifest,\n    update_agent_registry\n)\n\ndef test_validate_valid_manifest():\n    \"\"\"Test validation of a valid agent manifest.\"\"\"\n    pass\n\ndef test_validate_missing_required_fields():\n    \"\"\"Test validation fails with missing required fields.\"\"\"\n    pass\n\ndef test_validate_invalid_name_format():\n    \"\"\"Test validation fails with invalid name format.\"\"\"\n    pass\n\ndef test_validate_invalid_version():\n    \"\"\"Test validation fails with invalid version.\"\"\"\n    pass\n\ndef test_validate_invalid_reasoning_mode():\n    \"\"\"Test validation fails with invalid reasoning mode.\"\"\"\n    pass\n\ndef test_validate_missing_skills():\n    \"\"\"Test validation fails when skills don't exist.\"\"\"\n    pass\n\ndef test_registry_update():\n    \"\"\"Test agent registry update.\"\"\"\n    pass\n</code></pre></p> </li> </ul>"},{"location":"agent-define-implementation-plan/#phase-4-documentation","title":"Phase 4: Documentation","text":"<ul> <li>[ ] Create example agent manifests in <code>/agents/</code>:</li> <li><code>api.designer/agent.yaml</code> - Example iterative agent</li> <li> <p><code>api.analyzer/agent.yaml</code> - Example oneshot agent</p> </li> <li> <p>[ ] Update <code>/docs/references.md</code> to include agent schema reference</p> </li> <li> <p>[ ] Create <code>/agents/.gitkeep</code> or example <code>.gitignore</code></p> </li> </ul>"},{"location":"agent-define-implementation-plan/#phase-5-integration","title":"Phase 5: Integration","text":"<ul> <li> <p>[ ] Update skill registry to activate <code>agent.define</code>:   <pre><code>python skills/registry.update/registry_update.py skills/agent.define/skill.yaml\n</code></pre></p> </li> <li> <p>[ ] Test end-to-end:   <pre><code># Create test agent manifest\nmkdir -p agents/test.agent\ncat &gt; agents/test.agent/agent.yaml &lt;&lt; EOF\nname: test.agent\nversion: 0.1.0\ndescription: \"Test agent for validation\"\ncapabilities:\n  - Test capability\nskills_available:\n  - skill.define\nreasoning_mode: oneshot\nstatus: draft\nEOF\n\n# Validate and register\npython skills/agent.define/agent_define.py agents/test.agent/agent.yaml\n\n# Verify registry updated\ncat registry/agents.json\n</code></pre></p> </li> </ul>"},{"location":"agent-define-implementation-plan/#success-criteria","title":"Success Criteria","text":"<ol> <li>\u2705 <code>agent.define</code> skill validates all required fields</li> <li>\u2705 <code>agent.define</code> skill validates name and version formats</li> <li>\u2705 <code>agent.define</code> skill verifies skill references</li> <li>\u2705 <code>agent.define</code> skill detects circular dependencies</li> <li>\u2705 <code>agent.define</code> skill updates agent registry correctly</li> <li>\u2705 All tests pass</li> <li>\u2705 Documentation is complete and accurate</li> <li>\u2705 Can create and validate example agents</li> </ol>"},{"location":"agent-define-implementation-plan/#error-handling","title":"Error Handling","text":""},{"location":"agent-define-implementation-plan/#validation-errors","title":"Validation Errors","text":"<ol> <li> <p>Missing Required Fields:    <pre><code>{\n  \"ok\": false,\n  \"status\": \"failed\",\n  \"errors\": [\"Missing required fields: capabilities, skills_available\"],\n  \"path\": \"agents/api.designer/agent.yaml\"\n}\n</code></pre></p> </li> <li> <p>Invalid Name Format:    <pre><code>{\n  \"ok\": false,\n  \"status\": \"failed\",\n  \"errors\": [\"Invalid agent name format: 'ApiDesigner' (must match ^[a-z][a-z0-9._-]*$)\"],\n  \"path\": \"agents/ApiDesigner/agent.yaml\"\n}\n</code></pre></p> </li> <li> <p>Missing Skills:    <pre><code>{\n  \"ok\": false,\n  \"status\": \"failed\",\n  \"errors\": [\"Skills not found in registry: api.nonexistent, api.missing\"],\n  \"path\": \"agents/api.designer/agent.yaml\"\n}\n</code></pre></p> </li> <li> <p>Invalid Reasoning Mode:    <pre><code>{\n  \"ok\": false,\n  \"status\": \"failed\",\n  \"errors\": [\"Invalid reasoning_mode: 'hybrid' (must be 'iterative' or 'oneshot')\"],\n  \"path\": \"agents/api.designer/agent.yaml\"\n}\n</code></pre></p> </li> </ol>"},{"location":"agent-define-implementation-plan/#registry-errors","title":"Registry Errors","text":"<ol> <li>Registry Not Found: Create new registry</li> <li>Registry Parse Error: Return error, suggest manual fix</li> <li>Write Permission Error: Return error with file path</li> </ol>"},{"location":"agent-define-implementation-plan/#testing-strategy","title":"Testing Strategy","text":""},{"location":"agent-define-implementation-plan/#unit-tests","title":"Unit Tests","text":"<ul> <li>Test each validation function independently</li> <li>Test manifest loading and parsing</li> <li>Test registry update logic</li> <li>Test error handling</li> </ul>"},{"location":"agent-define-implementation-plan/#integration-tests","title":"Integration Tests","text":"<ul> <li>End-to-end validation and registration</li> <li>Multi-agent registry updates</li> <li>Concurrent updates (if applicable)</li> </ul>"},{"location":"agent-define-implementation-plan/#validation-test-cases","title":"Validation Test Cases","text":"<ul> <li>\u2705 Valid minimal agent</li> <li>\u2705 Valid complete agent (all fields)</li> <li>\u274c Missing required fields</li> <li>\u274c Invalid name format</li> <li>\u274c Invalid version format</li> <li>\u274c Invalid reasoning mode</li> <li>\u274c Non-existent skills</li> <li>\u274c Empty capabilities</li> <li>\u274c Empty skills_available</li> <li>\u2705 Optional fields present</li> <li>\u2705 Update existing agent (version change)</li> </ul>"},{"location":"agent-define-implementation-plan/#dependencies","title":"Dependencies","text":""},{"location":"agent-define-implementation-plan/#required-before-implementation","title":"Required Before Implementation","text":"<ul> <li>\u2705 Agent frontmatter specification (completed)</li> <li>\u2705 Agent schema reference documentation (completed)</li> <li>\u2705 <code>skill.define</code> skill (exists)</li> <li>\u2705 <code>registry.update</code> skill (exists)</li> </ul>"},{"location":"agent-define-implementation-plan/#created-during-implementation","title":"Created During Implementation","text":"<ul> <li><code>/betty/config.py</code> updates</li> <li><code>/betty/validation.py</code> agent validation functions</li> <li><code>/betty/errors.py</code> agent-specific errors</li> <li><code>/registry/agents.json</code> agent registry</li> <li><code>/agents/</code> directory structure</li> <li><code>agent.define</code> skill implementation</li> </ul>"},{"location":"agent-define-implementation-plan/#timeline-estimate","title":"Timeline Estimate","text":"Phase Estimated Time Notes Phase 1: Configuration 1 hour Config updates, validation functions Phase 2: Registry Infrastructure 30 minutes Create directories and initial files Phase 3: agent.define Implementation 3-4 hours Core logic, following skill.define pattern Phase 4: Documentation 1 hour Examples, SKILL.md Phase 5: Testing 2-3 hours Unit tests, integration tests Total 7-9 hours Could be split across multiple sessions"},{"location":"agent-define-implementation-plan/#open-questions","title":"Open Questions","text":"<ol> <li>Agent Execution: Should we implement agent execution logic now, or just focus on definition/validation?</li> <li> <p>Decision: Focus on definition/validation first. Execution can be a separate skill (<code>agent.run</code>)</p> </li> <li> <p>Registry Merging: How to handle registry updates from multiple sources?</p> </li> <li> <p>Decision: Single source of truth in <code>/registry/agents.json</code>, updated atomically</p> </li> <li> <p>Version Conflicts: What happens if an agent with the same name but different version is registered?</p> </li> <li> <p>Decision: Update existing entry, maintain single version (similar to skills)</p> </li> <li> <p>Circular Dependencies: Should we detect agent-to-agent dependencies?</p> </li> <li> <p>Decision: Yes, add to validation logic</p> </li> <li> <p>Auto-generation: Should we auto-generate README.md for agents?</p> </li> <li>Decision: Yes, generate basic README with manifest info (Phase 4+)</li> </ol>"},{"location":"agent-define-implementation-plan/#next-steps","title":"Next Steps","text":"<ol> <li>Review this plan with team</li> <li>Prioritize phases</li> <li>Begin implementation with Phase 1</li> <li>Create git branch: <code>feature/agent-define-implementation</code></li> <li>Implement incrementally with tests</li> <li>Submit PR when complete</li> </ol>"},{"location":"agent-define-implementation-plan/#references","title":"References","text":"<ul> <li>Agent Schema Reference</li> <li>Betty Architecture</li> <li>Skills Framework</li> <li>Existing implementation: <code>/skills/skill.define/</code></li> </ul>"},{"location":"agent-schema-reference/","title":"Agent Manifest Schema Reference","text":"<p>This document provides the formal specification for Betty Framework agent manifests.</p>"},{"location":"agent-schema-reference/#overview","title":"Overview","text":"<p>Agents are intelligent orchestrators that compose skills with reasoning, context awareness, and error recovery. Unlike workflows (which follow fixed sequential steps) or skills (which execute atomic operations), agents can:</p> <ul> <li>Reason about requirements and choose appropriate strategies</li> <li>Iterate based on feedback and validation results</li> <li>Recover from errors with intelligent retry logic</li> <li>Adapt their approach based on context</li> </ul>"},{"location":"agent-schema-reference/#file-structure","title":"File Structure","text":"<pre><code>agents/\n\u251c\u2500\u2500 &lt;agent-name&gt;/\n\u2502   \u251c\u2500\u2500 agent.yaml              # Agent manifest (required)\n\u2502   \u251c\u2500\u2500 README.md               # Documentation (auto-generated)\n\u2502   \u251c\u2500\u2500 tests/                  # Agent behavior tests (optional)\n\u2502   \u2502   \u2514\u2500\u2500 test_agent.py\n\u2502   \u2514\u2500\u2500 examples/               # Example invocations (optional)\n\u2502       \u2514\u2500\u2500 example_usage.md\n</code></pre>"},{"location":"agent-schema-reference/#manifest-format","title":"Manifest Format","text":""},{"location":"agent-schema-reference/#complete-example","title":"Complete Example","text":"<pre><code># agents/api.designer/agent.yaml\n\n# === REQUIRED FIELDS ===\n\nname: api.designer\nversion: 0.1.0\ndescription: \"Design RESTful APIs following enterprise guidelines with iterative refinement\"\n\ncapabilities:\n  - Design RESTful APIs from natural language requirements\n  - Apply Zalando guidelines automatically\n  - Generate OpenAPI 3.1 specs with best practices\n  - Iteratively refine based on validation feedback\n  - Handle AsyncAPI for event-driven architectures\n\nskills_available:\n  - api.define\n  - api.validate\n  - api.generate-models\n  - api.compatibility\n\nreasoning_mode: iterative\n\n# === OPTIONAL FIELDS ===\n\nstatus: draft\n\ncontext_requirements:\n  guidelines: string\n  domain: string\n  existing_apis: list\n  strict_mode: boolean\n\nworkflow_pattern: |\n  1. Analyze requirements and domain context\n  2. Draft OpenAPI spec following guidelines\n  3. Run validation (api.validate)\n  4. If validation fails:\n     - Analyze errors\n     - Refine spec\n     - Re-validate\n     - Repeat until passing\n  5. Generate models for target languages\n  6. Verify generated models compile\n\nexample_task: |\n  Input: \"Create API for user management with CRUD operations\"\n\n  Agent will:\n  1. Draft OpenAPI spec with resource paths\n  2. Apply Zalando guidelines\n  3. Validate spec against Zally rules\n  4. Fix issues iteratively\n  5. Generate models\n  6. Verify compilation\n\nerror_handling:\n  max_retries: 3\n  on_validation_failure: \"Analyze errors, refine spec, retry\"\n  on_generation_failure: \"Try alternative configurations\"\n  timeout_seconds: 300\n\noutput:\n  success:\n    - OpenAPI spec (validated)\n    - Generated models (compiled)\n    - Validation report\n  failure:\n    - Error analysis\n    - Partial spec\n    - Suggested fixes\n\ntags:\n  - api\n  - design\n  - openapi\n\ndependencies:\n  - context.schema\n</code></pre>"},{"location":"agent-schema-reference/#field-reference","title":"Field Reference","text":""},{"location":"agent-schema-reference/#required-fields","title":"Required Fields","text":""},{"location":"agent-schema-reference/#name","title":"<code>name</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Format: <code>^[a-z][a-z0-9._-]*$</code></li> <li>Pattern: <code>&lt;domain&gt;.&lt;action&gt;</code></li> <li>Examples: <code>api.designer</code>, <code>compliance.checker</code>, <code>data.migrator</code></li> <li>Description: Unique identifier for the agent. Must be lowercase, start with a letter, and use dots, hyphens, or underscores as separators.</li> </ul> <p>Validation Rules: - Must match regex pattern - Must be unique within agent registry - Cannot be empty - Recommended max length: 50 characters</p>"},{"location":"agent-schema-reference/#version","title":"<code>version</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Format: <code>^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9.-]+)?$</code></li> <li>Examples: <code>0.1.0</code>, <code>1.0.0</code>, <code>2.3.1-beta</code>, <code>1.0.0-rc.1</code></li> <li>Description: Semantic version following semver specification.</li> </ul> <p>Versioning Guidelines: - MAJOR: Breaking changes to agent interface or behavior - MINOR: New capabilities or skills added (backward compatible) - PATCH: Bug fixes, refinements (backward compatible) - Prerelease: <code>-alpha</code>, <code>-beta</code>, <code>-rc.1</code> for pre-release versions</p>"},{"location":"agent-schema-reference/#description","title":"<code>description</code>","text":"<ul> <li>Type: <code>string</code></li> <li>Length: 1-200 characters</li> <li>Example: <code>\"Design RESTful APIs following enterprise guidelines with iterative refinement\"</code></li> <li>Description: Human-readable summary of what the agent does.</li> </ul> <p>Best Practices: - Start with an action verb (Design, Analyze, Validate, Generate) - Be specific about the domain and purpose - Mention key features or guidelines if applicable - Keep it concise but informative</p>"},{"location":"agent-schema-reference/#capabilities","title":"<code>capabilities</code>","text":"<ul> <li>Type: <code>array[string]</code></li> <li>Min Length: 1</li> <li>Example:   <pre><code>capabilities:\n  - Design RESTful APIs from natural language requirements\n  - Apply Zalando guidelines automatically\n  - Generate OpenAPI 3.1 specs with best practices\n  - Iteratively refine based on validation feedback\n</code></pre></li> <li>Description: List of what the agent can accomplish.</li> </ul> <p>Best Practices: - Each capability should be a complete sentence - Start with action verbs - Be specific about technologies, standards, or frameworks - Order by importance or typical execution order - Include iteration/refinement capabilities if applicable</p>"},{"location":"agent-schema-reference/#skills_available","title":"<code>skills_available</code>","text":"<ul> <li>Type: <code>array[string]</code></li> <li>Min Length: 1</li> <li>Format: Each element must be a valid skill name</li> <li>Example:   <pre><code>skills_available:\n  - api.define\n  - api.validate\n  - api.generate-models\n  - api.compatibility\n</code></pre></li> <li>Description: List of skills the agent can orchestrate.</li> </ul> <p>Validation Rules: - All skills must exist in the skill registry - Skill names must match regex: <code>^[a-z][a-z0-9._-]*$</code> - No duplicate skills - At least one skill required</p> <p>Best Practices: - List skills in logical execution order - Add inline comments explaining each skill's role - Only include skills the agent will actually use - Consider grouping related skills</p>"},{"location":"agent-schema-reference/#reasoning_mode","title":"<code>reasoning_mode</code>","text":"<ul> <li>Type: <code>enum</code></li> <li>Values: <code>iterative</code> | <code>oneshot</code></li> <li>Default: None (must be specified)</li> <li>Description: Defines how the agent approaches problem-solving.</li> </ul> <p>Mode Definitions:</p> <p><code>iterative</code> - Agent can retry with feedback - Use for: Validation loops, refinement tasks, error correction - Behavior: Agent analyzes failures, adjusts strategy, retries - Example: API design with validation feedback - Max iterations: Defined in <code>error_handling.max_retries</code></p> <p><code>oneshot</code> - Agent executes once without retry - Use for: Analysis, reporting, deterministic transformations - Behavior: Single execution, returns result or error - Example: API compatibility report, documentation generation - Failure: Returns immediately with error details</p>"},{"location":"agent-schema-reference/#optional-fields","title":"Optional Fields","text":""},{"location":"agent-schema-reference/#status","title":"<code>status</code>","text":"<ul> <li>Type: <code>enum</code></li> <li>Values: <code>draft</code> | <code>active</code> | <code>deprecated</code> | <code>archived</code></li> <li>Default: <code>draft</code></li> <li>Description: Lifecycle stage of the agent.</li> </ul> <p>Status Lifecycle: <pre><code>draft \u2192 active \u2192 deprecated \u2192 archived\n</code></pre></p> <p>Status Definitions: - <code>draft</code>: Under development, not ready for production - <code>active</code>: Production-ready, can be invoked by commands - <code>deprecated</code>: Still functional but not recommended (emits warnings) - <code>archived</code>: No longer maintained, cannot be executed</p> <p>Validation Rules: - Can only progress forward in lifecycle - Cannot transition from <code>archived</code> to any other state - Only <code>active</code> agents can be invoked by commands</p>"},{"location":"agent-schema-reference/#context_requirements","title":"<code>context_requirements</code>","text":"<ul> <li>Type: <code>object</code></li> <li>Default: <code>{}</code></li> <li>Example:   <pre><code>context_requirements:\n  guidelines: string\n  domain: string\n  existing_apis: list\n  strict_mode: boolean\n  target_languages: list\n</code></pre></li> <li>Description: Structured context the agent needs to make decisions.</li> </ul> <p>Best Practices: - Define type for each context field (string, boolean, number, list, object) - Document expected values or formats - Mark required vs optional context - Provide sensible defaults where possible</p> <p>Common Context Patterns: <pre><code># API Design Context\ncontext_requirements:\n  guidelines: string        # zalando, google, microsoft\n  domain: string           # user-management, payments\n  existing_apis: list      # Related APIs for consistency\n\n# Compliance Context\ncontext_requirements:\n  policy_set: string       # Which policies to enforce\n  severity_threshold: string  # error, warning, info\n\n# Code Generation Context\ncontext_requirements:\n  target_languages: list   # typescript, python, java\n  framework: string        # react, django, spring\n  style_guide: string      # airbnb, google\n</code></pre></p>"},{"location":"agent-schema-reference/#workflow_pattern","title":"<code>workflow_pattern</code>","text":"<ul> <li>Type: <code>string</code> (multi-line)</li> <li>Default: <code>null</code></li> <li>Example:   <pre><code>workflow_pattern: |\n  1. Analyze requirements and domain context\n  2. Draft OpenAPI spec following guidelines\n  3. Run validation (api.validate)\n  4. If validation fails:\n     - Analyze errors\n     - Refine spec\n     - Re-validate\n     - Repeat until passing\n  5. Generate models for target languages\n</code></pre></li> <li>Description: Narrative description of the agent's reasoning process.</li> </ul> <p>Best Practices: - Use numbered steps for sequential actions - Use bullet points for decision branches - Reference specific skills in parentheses - Describe iteration/retry logic clearly - Keep it high-level (not implementation details)</p>"},{"location":"agent-schema-reference/#example_task","title":"<code>example_task</code>","text":"<ul> <li>Type: <code>string</code> (multi-line)</li> <li>Default: <code>null</code></li> <li>Example:   <pre><code>example_task: |\n  Input: \"Create API for user management with CRUD operations\"\n\n  Agent will:\n  1. Draft OpenAPI spec with resource paths\n  2. Apply Zalando guidelines\n  3. Validate spec against Zally rules\n  4. Fix issues iteratively\n  5. Generate TypeScript and Python models\n</code></pre></li> <li>Description: Concrete example demonstrating agent behavior.</li> </ul> <p>Best Practices: - Show realistic input - Describe step-by-step what the agent does - Mention specific technologies or standards - Include expected outputs - Show iteration/refinement if applicable</p>"},{"location":"agent-schema-reference/#error_handling","title":"<code>error_handling</code>","text":"<ul> <li>Type: <code>object</code></li> <li>Default: <code>{}</code></li> <li>Example:   <pre><code>error_handling:\n  max_retries: 3\n  on_validation_failure: \"Analyze errors, refine spec, retry\"\n  on_generation_failure: \"Try alternative configurations\"\n  on_compilation_failure: \"Adjust spec to fix type issues\"\n  timeout_seconds: 300\n</code></pre></li> <li>Description: Retry strategies and failure handling.</li> </ul> <p>Common Fields: - <code>max_retries</code>: Maximum iteration attempts (for <code>iterative</code> mode) - <code>timeout_seconds</code>: Maximum execution time - <code>on_&lt;error_type&gt;_failure</code>: Strategy for specific error types - <code>backoff_strategy</code>: <code>exponential</code>, <code>linear</code>, <code>constant</code> - <code>retry_delay_seconds</code>: Base delay between retries</p>"},{"location":"agent-schema-reference/#output","title":"<code>output</code>","text":"<ul> <li>Type: <code>object</code></li> <li>Default: <code>{}</code></li> <li>Example:   <pre><code>output:\n  success:\n    - OpenAPI spec (validated)\n    - Generated models (compiled)\n    - Validation report\n    - Dependency graph\n  failure:\n    - Error analysis\n    - Partial spec\n    - Suggested fixes\n    - Validation errors\n</code></pre></li> <li>Description: Expected artifacts and reports for success and failure cases.</li> </ul> <p>Best Practices: - List artifacts in order of importance - Specify format or state in parentheses - Include both success and failure outputs - Mention partial results in failure case - Reference specific file types or formats</p>"},{"location":"agent-schema-reference/#tags","title":"<code>tags</code>","text":"<ul> <li>Type: <code>array[string]</code></li> <li>Default: <code>[]</code></li> <li>Example: <code>[\"api\", \"design\", \"openapi\", \"zalando\"]</code></li> <li>Description: Categorization tags for discovery and organization.</li> </ul> <p>Common Tags: - Domain: <code>api</code>, <code>data</code>, <code>compliance</code>, <code>security</code> - Action: <code>design</code>, <code>validate</code>, <code>generate</code>, <code>analyze</code>, <code>migrate</code> - Technology: <code>openapi</code>, <code>asyncapi</code>, <code>graphql</code>, <code>grpc</code> - Standard: <code>zalando</code>, <code>google</code>, <code>restful</code>, <code>jsonapi</code></p>"},{"location":"agent-schema-reference/#dependencies","title":"<code>dependencies</code>","text":"<ul> <li>Type: <code>array[string]</code></li> <li>Default: <code>[]</code></li> <li>Example: <code>[\"context.schema\", \"api.guidelines.zalando\"]</code></li> <li>Description: Other agents, schemas, or resources this agent depends on.</li> </ul> <p>Validation Rules: - No circular dependencies - Dependencies must exist in registry - Agent cannot depend on itself</p>"},{"location":"agent-schema-reference/#validation-rules","title":"Validation Rules","text":""},{"location":"agent-schema-reference/#1-name-validation","title":"1. Name Validation","text":"<pre><code>import re\n\ndef validate_agent_name(name: str) -&gt; bool:\n    \"\"\"Agent name must match pattern.\"\"\"\n    pattern = r'^[a-z][a-z0-9._-]*$'\n    return bool(re.match(pattern, name))\n\n# Valid: api.designer, compliance.checker, data-migrator\n# Invalid: ApiDesigner, 1agent, agent_name, AGENT\n</code></pre>"},{"location":"agent-schema-reference/#2-version-validation","title":"2. Version Validation","text":"<pre><code>import re\n\ndef validate_version(version: str) -&gt; bool:\n    \"\"\"Version must follow semantic versioning.\"\"\"\n    pattern = r'^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9.-]+)?$'\n    return bool(re.match(pattern, version))\n\n# Valid: 0.1.0, 1.0.0, 2.3.1-beta, 1.0.0-rc.1\n# Invalid: 1.0, v1.0.0, 1.0.0.0\n</code></pre>"},{"location":"agent-schema-reference/#3-skills-validation","title":"3. Skills Validation","text":"<pre><code>def validate_skills(skills: list, skill_registry: dict) -&gt; tuple[bool, str]:\n    \"\"\"All skills must exist in registry.\"\"\"\n    if not skills:\n        return False, \"At least one skill required\"\n\n    for skill in skills:\n        if skill not in skill_registry:\n            return False, f\"Skill '{skill}' not found in registry\"\n\n    return True, \"All skills valid\"\n</code></pre>"},{"location":"agent-schema-reference/#4-required-fields-check","title":"4. Required Fields Check","text":"<pre><code>REQUIRED_FIELDS = [\n    \"name\",\n    \"version\",\n    \"description\",\n    \"capabilities\",\n    \"skills_available\",\n    \"reasoning_mode\"\n]\n\ndef validate_required_fields(manifest: dict) -&gt; tuple[bool, list]:\n    \"\"\"Check all required fields are present.\"\"\"\n    missing = [field for field in REQUIRED_FIELDS if field not in manifest]\n    return len(missing) == 0, missing\n</code></pre>"},{"location":"agent-schema-reference/#agent-registry","title":"Agent Registry","text":"<p>Agents are registered in <code>/registry/agents.json</code> (similar to skills registry):</p> <pre><code>{\n  \"registry_version\": \"1.0.0\",\n  \"generated_at\": \"2025-10-23T10:00:00Z\",\n  \"agents\": [\n    {\n      \"name\": \"api.designer\",\n      \"version\": \"0.1.0\",\n      \"description\": \"Design RESTful APIs following enterprise guidelines\",\n      \"reasoning_mode\": \"iterative\",\n      \"skills_available\": [\n        \"api.define\",\n        \"api.validate\",\n        \"api.generate-models\"\n      ],\n      \"status\": \"draft\",\n      \"dependencies\": [\"context.schema\"],\n      \"tags\": [\"api\", \"design\", \"openapi\"]\n    }\n  ]\n}\n</code></pre>"},{"location":"agent-schema-reference/#best-practices","title":"Best Practices","text":""},{"location":"agent-schema-reference/#1-agent-naming","title":"1. Agent Naming","text":"<ul> <li>Use dot notation: <code>&lt;domain&gt;.&lt;action&gt;</code></li> <li>Keep names concise and descriptive</li> <li>Examples: <code>api.designer</code>, <code>compliance.auditor</code>, <code>code.refactor</code></li> </ul>"},{"location":"agent-schema-reference/#2-reasoning-mode-selection","title":"2. Reasoning Mode Selection","text":"<ul> <li>Use <code>iterative</code> for:</li> <li>Validation and refinement loops</li> <li>Tasks that benefit from error feedback</li> <li> <p>Complex multi-step processes with uncertain outcomes</p> </li> <li> <p>Use <code>oneshot</code> for:</p> </li> <li>Deterministic transformations</li> <li>Analysis and reporting</li> <li>Tasks where retry doesn't help</li> </ul>"},{"location":"agent-schema-reference/#3-capabilities-vs-skills","title":"3. Capabilities vs Skills","text":"<ul> <li>Capabilities: What the agent can accomplish (user-facing)</li> <li>Skills: How the agent accomplishes it (implementation)</li> </ul> <p>Example: <pre><code>capabilities:\n  - \"Design RESTful APIs following Zalando guidelines\"  # What\n\nskills_available:\n  - api.define       # How\n  - api.validate     # How\n</code></pre></p>"},{"location":"agent-schema-reference/#4-error-handling","title":"4. Error Handling","text":"<ul> <li>Always define <code>max_retries</code> for <code>iterative</code> agents</li> <li>Set reasonable timeouts (consider skill execution times)</li> <li>Provide specific strategies for known error types</li> <li>Include fallback behaviors</li> </ul>"},{"location":"agent-schema-reference/#5-documentation","title":"5. Documentation","text":"<ul> <li>Use <code>workflow_pattern</code> to explain reasoning process</li> <li>Use <code>example_task</code> to show realistic usage</li> <li>Keep <code>description</code> concise but informative</li> <li>Add tags for discoverability</li> </ul>"},{"location":"agent-schema-reference/#examples","title":"Examples","text":""},{"location":"agent-schema-reference/#example-1-iterative-refinement-agent","title":"Example 1: Iterative Refinement Agent","text":"<pre><code>name: api.designer\nversion: 0.1.0\ndescription: \"Design and refine OpenAPI specs until they pass validation\"\nreasoning_mode: iterative\n\ncapabilities:\n  - Design RESTful APIs from requirements\n  - Apply enterprise API guidelines\n  - Iteratively refine based on validation feedback\n\nskills_available:\n  - api.define\n  - api.validate\n\nerror_handling:\n  max_retries: 3\n  on_validation_failure: \"Analyze errors and refine spec\"\n  timeout_seconds: 180\n\nstatus: active\n</code></pre>"},{"location":"agent-schema-reference/#example-2-one-shot-analysis-agent","title":"Example 2: One-Shot Analysis Agent","text":"<pre><code>name: api.compatibility\nversion: 1.0.0\ndescription: \"Analyze API changes for backward compatibility\"\nreasoning_mode: oneshot\n\ncapabilities:\n  - Detect breaking changes between API versions\n  - Generate compatibility reports\n  - Suggest migration paths\n\nskills_available:\n  - api.diff\n  - api.compatibility\n\noutput:\n  success:\n    - Compatibility report\n    - Breaking changes list\n    - Migration recommendations\n  failure:\n    - Error analysis\n    - Partial comparison results\n\nstatus: active\n</code></pre>"},{"location":"agent-schema-reference/#example-3-multi-domain-agent","title":"Example 3: Multi-Domain Agent","text":"<pre><code>name: compliance.auditor\nversion: 0.2.0\ndescription: \"Audit code, APIs, and infrastructure for compliance\"\nreasoning_mode: iterative\n\ncapabilities:\n  - Audit API specs for compliance violations\n  - Check code for security vulnerabilities\n  - Validate infrastructure configurations\n  - Generate compliance reports\n\nskills_available:\n  - api.validate\n  - code.scan\n  - policy.validate\n  - audit.report\n\ncontext_requirements:\n  policy_set: string       # gdpr, hipaa, sox, pci-dss\n  severity_threshold: string  # critical, high, medium, low\n\nerror_handling:\n  max_retries: 2\n  timeout_seconds: 600\n  on_policy_violation: \"Document and continue audit\"\n\ntags:\n  - compliance\n  - security\n  - audit\n  - governance\n\nstatus: active\n</code></pre>"},{"location":"agent-schema-reference/#see-also","title":"See Also","text":"<ul> <li>Betty Architecture - Five-layer architecture overview</li> <li>Skills Framework - Complete skill taxonomy</li> <li>API-Driven Development - API-first workflow example</li> </ul>"},{"location":"api-driven-development/","title":"API-Driven Development with Betty","text":""},{"location":"api-driven-development/#overview","title":"Overview","text":"<p>This guide explains how to implement API-first development in Betty Framework following Zalando's RESTful API Guidelines and using Modelina for model generation.</p>"},{"location":"api-driven-development/#philosophy","title":"Philosophy","text":"<p>API-Driven Development means: 1. Define the API contract first (OpenAPI/AsyncAPI) 2. Validate against enterprise guidelines (Zalando, internal standards) 3. Generate shared models from specifications (Modelina) 4. Implement services that conform to the contract 5. Maintain compatibility across versions</p> <p>Betty enforces this discipline through automatic validation hooks that prevent non-compliant specs from ever being saved.</p>"},{"location":"api-driven-development/#zalando-restful-api-guidelines","title":"Zalando RESTful API Guidelines","text":""},{"location":"api-driven-development/#core-principles","title":"Core Principles","text":"<p>Source: https://opensource.zalando.com/restful-api-guidelines/</p> <p>Key requirements Betty will enforce:</p> <ol> <li>API First Principle</li> <li>Define APIs using OpenAPI before coding</li> <li>Use OpenAPI 3.1 for new APIs</li> <li>Single self-contained YAML file per API</li> <li> <p>Subject to version control</p> </li> <li> <p>Design Consistency</p> </li> <li>Follow Zalando naming conventions (snake_case for fields)</li> <li>Use standard HTTP methods correctly</li> <li>Implement proper error responses (RFC 7807 Problem JSON)</li> <li> <p>Include required headers (X-Flow-ID, etc.)</p> </li> <li> <p>Peer Review</p> </li> <li>APIs must be reviewed before implementation</li> <li>Use API linter (Zally) for automated checks</li> <li> <p>Document breaking changes</p> </li> <li> <p>Compatibility</p> </li> <li>Avoid breaking changes</li> <li>Use API versioning when necessary</li> <li>Implement compatibility validation</li> </ol>"},{"location":"api-driven-development/#architecture","title":"Architecture","text":""},{"location":"api-driven-development/#skills-for-api-driven-development","title":"Skills for API-Driven Development","text":"<pre><code>skills/\n\u251c\u2500\u2500 api.define/              # Create OpenAPI specs\n\u2502   \u251c\u2500\u2500 skill.yaml\n\u2502   \u251c\u2500\u2500 api_define.py\n\u2502   \u2514\u2500\u2500 templates/\n\u2502       \u251c\u2500\u2500 openapi_3.1.yaml.j2\n\u2502       \u2514\u2500\u2500 zalando_compliant.yaml.j2\n\u2502\n\u251c\u2500\u2500 api.validate/            # Validate against Zalando guidelines\n\u2502   \u251c\u2500\u2500 skill.yaml\n\u2502   \u251c\u2500\u2500 api_validate.py\n\u2502   \u2514\u2500\u2500 validators/\n\u2502       \u251c\u2500\u2500 zally_client.py      # Zalando's Zally linter integration\n\u2502       \u251c\u2500\u2500 zalando_rules.py     # Local rule implementations\n\u2502       \u2514\u2500\u2500 custom_rules.py      # Enterprise-specific rules\n\u2502\n\u251c\u2500\u2500 api.generate-models/     # Use Modelina for code generation\n\u2502   \u251c\u2500\u2500 skill.yaml\n\u2502   \u251c\u2500\u2500 modelina_generate.py\n\u2502   \u2514\u2500\u2500 configs/\n\u2502       \u251c\u2500\u2500 typescript.json\n\u2502       \u251c\u2500\u2500 python.json\n\u2502       \u2514\u2500\u2500 java.json\n\u2502\n\u251c\u2500\u2500 api.compatibility/       # Check for breaking changes\n\u2502   \u251c\u2500\u2500 skill.yaml\n\u2502   \u251c\u2500\u2500 check_compatibility.py\n\u2502   \u2514\u2500\u2500 rules/\n\u2502       \u2514\u2500\u2500 breaking_changes.yaml\n\u2502\n\u251c\u2500\u2500 asyncapi.define/         # AsyncAPI for event-driven APIs\n\u2502   \u251c\u2500\u2500 skill.yaml\n\u2502   \u2514\u2500\u2500 asyncapi_define.py\n\u2502\n\u251c\u2500\u2500 hook.define/             # Define validation hooks\n\u2502   \u251c\u2500\u2500 skill.yaml\n\u2502   \u2514\u2500\u2500 hook_define.py\n\u2502\n\u251c\u2500\u2500 command.define/          # Register slash commands\n\u2502   \u251c\u2500\u2500 skill.yaml\n\u2502   \u2514\u2500\u2500 command_define.py\n\u2502\n\u2514\u2500\u2500 agent.define/            # Create agent manifests\n    \u251c\u2500\u2500 skill.yaml\n    \u2514\u2500\u2500 agent_define.py\n</code></pre>"},{"location":"api-driven-development/#workflows","title":"Workflows","text":"<pre><code>workflows/\n\u251c\u2500\u2500 api_first_development.yaml       # Complete API-first workflow\n\u251c\u2500\u2500 api_validation_suite.yaml        # Comprehensive validation\n\u251c\u2500\u2500 api_version_migration.yaml       # Handle version upgrades\n\u2514\u2500\u2500 shared_model_generation.yaml     # Generate models for all languages\n</code></pre>"},{"location":"api-driven-development/#agents","title":"Agents","text":"<pre><code>agents/\n\u251c\u2500\u2500 api.designer/            # Design APIs from requirements\n\u251c\u2500\u2500 api.reviewer/            # Review specs for compliance\n\u251c\u2500\u2500 api.migrator/            # Handle API versioning\n\u2514\u2500\u2500 compliance.checker/      # Ensure enterprise standards\n</code></pre>"},{"location":"api-driven-development/#hooks","title":"Hooks","text":"<pre><code>.claude/\n\u2514\u2500\u2500 hooks.yaml               # Generated by hook.define skill\n</code></pre>"},{"location":"api-driven-development/#implementation-details","title":"Implementation Details","text":""},{"location":"api-driven-development/#1-openapi-spec-structure-zalando-compliant","title":"1. OpenAPI Spec Structure (Zalando-Compliant)","text":"<pre><code># specs/user-service.openapi.yaml\n\nopenapi: 3.1.0\n\ninfo:\n  title: User Service API\n  version: 1.0.0\n  description: RESTful API for user management\n  contact:\n    name: Platform Team\n    email: platform@company.com\n  x-api-id: d0184f38-b98d-11e7-9c56-68f728c1ba70  # Zalando requirement\n  x-audience: company-internal                     # Zalando requirement\n\nservers:\n  - url: https://api.company.com/users/v1\n    description: Production\n\n# Zalando requires all paths to use kebab-case or snake_case\npaths:\n  /users:\n    get:\n      summary: List all users\n      operationId: listUsers\n      tags: [Users]\n      parameters:\n        - name: limit\n          in: query\n          schema:\n            type: integer\n            minimum: 1\n            maximum: 100\n            default: 20\n        - name: offset\n          in: query\n          schema:\n            type: integer\n            minimum: 0\n            default: 0\n      responses:\n        '200':\n          description: List of users\n          headers:\n            X-Flow-ID:                            # Zalando requirement\n              schema:\n                type: string\n                format: uuid\n          content:\n            application/json:\n              schema:\n                type: object\n                properties:\n                  users:\n                    type: array\n                    items:\n                      $ref: '#/components/schemas/User'\n                  pagination:\n                    $ref: '#/components/schemas/Pagination'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '500':\n          $ref: '#/components/responses/InternalError'\n\n    post:\n      summary: Create a new user\n      operationId: createUser\n      tags: [Users]\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserCreate'\n      responses:\n        '201':\n          description: User created successfully\n          headers:\n            Location:\n              schema:\n                type: string\n                format: uri\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '400':\n          $ref: '#/components/responses/BadRequest'\n        '409':\n          $ref: '#/components/responses/Conflict'\n\n  /users/{user_id}:\n    parameters:\n      - name: user_id\n        in: path\n        required: true\n        schema:\n          type: string\n          format: uuid\n\n    get:\n      summary: Get user by ID\n      operationId: getUserById\n      tags: [Users]\n      responses:\n        '200':\n          description: User details\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '404':\n          $ref: '#/components/responses/NotFound'\n\n    put:\n      summary: Update user\n      operationId: updateUser\n      tags: [Users]\n      requestBody:\n        required: true\n        content:\n          application/json:\n            schema:\n              $ref: '#/components/schemas/UserUpdate'\n      responses:\n        '200':\n          description: User updated\n          content:\n            application/json:\n              schema:\n                $ref: '#/components/schemas/User'\n        '404':\n          $ref: '#/components/responses/NotFound'\n\n    delete:\n      summary: Delete user\n      operationId: deleteUser\n      tags: [Users]\n      responses:\n        '204':\n          description: User deleted successfully\n        '404':\n          $ref: '#/components/responses/NotFound'\n\ncomponents:\n  schemas:\n    # Zalando requires snake_case for JSON properties\n    User:\n      type: object\n      required: [user_id, email, created_at]\n      properties:\n        user_id:\n          type: string\n          format: uuid\n          description: Unique user identifier\n        email:\n          type: string\n          format: email\n        first_name:\n          type: string\n          minLength: 1\n          maxLength: 100\n        last_name:\n          type: string\n          minLength: 1\n          maxLength: 100\n        is_active:\n          type: boolean\n          default: true\n        created_at:\n          type: string\n          format: date-time\n        updated_at:\n          type: string\n          format: date-time\n\n    UserCreate:\n      type: object\n      required: [email]\n      properties:\n        email:\n          type: string\n          format: email\n        first_name:\n          type: string\n        last_name:\n          type: string\n\n    UserUpdate:\n      type: object\n      properties:\n        first_name:\n          type: string\n        last_name:\n          type: string\n        is_active:\n          type: boolean\n\n    Pagination:\n      type: object\n      required: [limit, offset, total]\n      properties:\n        limit:\n          type: integer\n        offset:\n          type: integer\n        total:\n          type: integer\n\n    # Zalando requires RFC 7807 Problem JSON for errors\n    Problem:\n      type: object\n      required: [type, title, status]\n      properties:\n        type:\n          type: string\n          format: uri\n          description: URI reference identifying the problem type\n        title:\n          type: string\n          description: Short, human-readable summary\n        status:\n          type: integer\n          description: HTTP status code\n        detail:\n          type: string\n          description: Human-readable explanation\n        instance:\n          type: string\n          format: uri\n          description: URI reference identifying the specific occurrence\n\n  responses:\n    BadRequest:\n      description: Bad request\n      content:\n        application/problem+json:                # Zalando requirement\n          schema:\n            $ref: '#/components/schemas/Problem'\n\n    NotFound:\n      description: Resource not found\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/Problem'\n\n    Conflict:\n      description: Conflict (e.g., duplicate email)\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/Problem'\n\n    InternalError:\n      description: Internal server error\n      content:\n        application/problem+json:\n          schema:\n            $ref: '#/components/schemas/Problem'\n\n# Zalando requires security schemes\nsecuritySchemes:\n  bearerAuth:\n    type: http\n    scheme: bearer\n    bearerFormat: JWT\n\nsecurity:\n  - bearerAuth: []\n</code></pre>"},{"location":"api-driven-development/#2-asyncapi-spec-structure","title":"2. AsyncAPI Spec Structure","text":"<pre><code># specs/user-events.asyncapi.yaml\n\nasyncapi: 3.0.0\n\ninfo:\n  title: User Events API\n  version: 1.0.0\n  description: Event-driven user lifecycle notifications\n\nservers:\n  production:\n    host: kafka.company.com:9092\n    protocol: kafka\n    description: Production Kafka cluster\n\nchannels:\n  user.created:\n    address: user.created.v1\n    messages:\n      UserCreated:\n        $ref: '#/components/messages/UserCreated'\n\n  user.updated:\n    address: user.updated.v1\n    messages:\n      UserUpdated:\n        $ref: '#/components/messages/UserUpdated'\n\n  user.deleted:\n    address: user.deleted.v1\n    messages:\n      UserDeleted:\n        $ref: '#/components/messages/UserDeleted'\n\noperations:\n  publishUserCreated:\n    action: send\n    channel:\n      $ref: '#/channels/user.created'\n\n  subscribeUserCreated:\n    action: receive\n    channel:\n      $ref: '#/channels/user.created'\n\ncomponents:\n  messages:\n    UserCreated:\n      name: UserCreated\n      title: User Created Event\n      contentType: application/json\n      payload:\n        $ref: '#/components/schemas/UserCreatedPayload'\n\n    UserUpdated:\n      name: UserUpdated\n      title: User Updated Event\n      contentType: application/json\n      payload:\n        $ref: '#/components/schemas/UserUpdatedPayload'\n\n    UserDeleted:\n      name: UserDeleted\n      title: User Deleted Event\n      contentType: application/json\n      payload:\n        $ref: '#/components/schemas/UserDeletedPayload'\n\n  schemas:\n    UserCreatedPayload:\n      type: object\n      required: [event_id, user_id, occurred_at]\n      properties:\n        event_id:\n          type: string\n          format: uuid\n        user_id:\n          type: string\n          format: uuid\n        email:\n          type: string\n          format: email\n        occurred_at:\n          type: string\n          format: date-time\n\n    UserUpdatedPayload:\n      type: object\n      required: [event_id, user_id, occurred_at, changes]\n      properties:\n        event_id:\n          type: string\n          format: uuid\n        user_id:\n          type: string\n          format: uuid\n        changes:\n          type: object\n        occurred_at:\n          type: string\n          format: date-time\n\n    UserDeletedPayload:\n      type: object\n      required: [event_id, user_id, occurred_at]\n      properties:\n        event_id:\n          type: string\n          format: uuid\n        user_id:\n          type: string\n          format: uuid\n        occurred_at:\n          type: string\n          format: date-time\n</code></pre>"},{"location":"api-driven-development/#3-shared-models-via-modelina","title":"3. Shared Models via Modelina","text":"<p>Betty uses Modelina to generate type-safe models from OpenAPI and AsyncAPI specs.</p> <p>TypeScript Models (generated from <code>user-service.openapi.yaml</code>): <pre><code>// src/models/user-service/User.ts\nexport interface User {\n  user_id: string;        // UUID format\n  email: string;          // Email format\n  first_name?: string;\n  last_name?: string;\n  is_active: boolean;\n  created_at: string;     // ISO 8601 datetime\n  updated_at?: string;    // ISO 8601 datetime\n}\n\n// src/models/user-service/UserCreate.ts\nexport interface UserCreate {\n  email: string;\n  first_name?: string;\n  last_name?: string;\n}\n\n// src/models/user-service/Pagination.ts\nexport interface Pagination {\n  limit: number;\n  offset: number;\n  total: number;\n}\n\n// src/models/user-service/Problem.ts\nexport interface Problem {\n  type: string;           // URI\n  title: string;\n  status: number;\n  detail?: string;\n  instance?: string;      // URI\n}\n</code></pre></p> <p>Python Models (generated from same spec): <pre><code># src/models/user_service/user.py\nfrom dataclasses import dataclass\nfrom datetime import datetime\nfrom typing import Optional\nfrom uuid import UUID\n\n@dataclass\nclass User:\n    user_id: UUID\n    email: str\n    created_at: datetime\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n    is_active: bool = True\n    updated_at: Optional[datetime] = None\n\n@dataclass\nclass UserCreate:\n    email: str\n    first_name: Optional[str] = None\n    last_name: Optional[str] = None\n\n@dataclass\nclass Pagination:\n    limit: int\n    offset: int\n    total: int\n</code></pre></p> <p>Benefits of Shared Models: - \u2705 Single source of truth (the OpenAPI spec) - \u2705 Type safety across frontend and backend - \u2705 Automatic synchronization when spec changes - \u2705 Reduced errors from manual type definitions - \u2705 IDE autocomplete and type checking</p>"},{"location":"api-driven-development/#validation-rules-zalando-guidelines","title":"Validation Rules (Zalando Guidelines)","text":"<p>Betty's <code>api.validate</code> skill checks these rules:</p>"},{"location":"api-driven-development/#required-fields","title":"Required Fields","text":"<ul> <li>\u2705 <code>info.x-api-id</code> - Unique API identifier (UUID)</li> <li>\u2705 <code>info.x-audience</code> - Target audience (component-internal, company-internal, etc.)</li> <li>\u2705 <code>info.contact</code> - API owner contact information</li> </ul>"},{"location":"api-driven-development/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>\u2705 Paths use kebab-case or snake_case</li> <li>\u2705 JSON properties use snake_case</li> <li>\u2705 Query parameters use snake_case</li> <li>\u2705 Headers use standard casing (X-Flow-ID, etc.)</li> </ul>"},{"location":"api-driven-development/#http-methods","title":"HTTP Methods","text":"<ul> <li>\u2705 GET for retrieval (idempotent, safe)</li> <li>\u2705 POST for creation (non-idempotent)</li> <li>\u2705 PUT for full updates (idempotent)</li> <li>\u2705 PATCH for partial updates (non-idempotent)</li> <li>\u2705 DELETE for deletion (idempotent)</li> </ul>"},{"location":"api-driven-development/#response-codes","title":"Response Codes","text":"<ul> <li>\u2705 200 for successful GET/PUT/PATCH</li> <li>\u2705 201 for successful POST (with Location header)</li> <li>\u2705 204 for successful DELETE</li> <li>\u2705 400 for bad request</li> <li>\u2705 404 for not found</li> <li>\u2705 409 for conflict</li> <li>\u2705 500 for internal error</li> </ul>"},{"location":"api-driven-development/#error-handling","title":"Error Handling","text":"<ul> <li>\u2705 Use RFC 7807 Problem JSON for errors</li> <li>\u2705 Content-Type: <code>application/problem+json</code></li> <li>\u2705 Include <code>type</code>, <code>title</code>, <code>status</code> fields</li> </ul>"},{"location":"api-driven-development/#headers","title":"Headers","text":"<ul> <li>\u2705 X-Flow-ID for request tracing (UUID)</li> <li>\u2705 Location for 201 Created responses</li> <li>\u2705 Content-Type for all responses</li> </ul>"},{"location":"api-driven-development/#compatibility","title":"Compatibility","text":"<ul> <li>\u2705 No breaking changes in minor versions</li> <li>\u2705 Additive changes only (new fields optional)</li> <li>\u2705 Deprecation warnings before removal</li> </ul>"},{"location":"api-driven-development/#workflow-api-first-development","title":"Workflow: API-First Development","text":"<pre><code># workflows/api_first_development.yaml\n\nname: api_first_development\nversion: 1.0.0\ndescription: \"Complete API-first development workflow following Zalando guidelines\"\n\ninputs:\n  service_name: string\n  spec_type: openapi|asyncapi\n  target_languages: list[string]  # e.g., [typescript, python, java]\n  guidelines: string              # e.g., zalando, google, internal\n\nsteps:\n  # Step 1: Create the specification from template\n  - skill: api.define\n    args:\n      - \"{service_name}\"\n      - \"{spec_type}\"\n      - \"--template=zalando\"\n    output: spec_path\n    description: \"Create API specification from Zalando-compliant template\"\n\n  # Step 2: Validate against Zalando guidelines\n  # (Also runs automatically via hook on file edit)\n  - skill: api.validate\n    args:\n      - \"{spec_path}\"\n      - \"{guidelines}\"\n    output: validation_report\n    description: \"Validate spec against enterprise guidelines\"\n    required: true\n\n  # Step 3: Generate models for each target language\n  - skill: api.generate-models\n    args:\n      - \"{spec_path}\"\n      - \"typescript\"\n      - \"--output=src/models/{service_name}\"\n    output: ts_models_path\n    description: \"Generate TypeScript models via Modelina\"\n    when: \"'typescript' in target_languages\"\n\n  - skill: api.generate-models\n    args:\n      - \"{spec_path}\"\n      - \"python\"\n      - \"--output=src/models/{service_name}\"\n    output: py_models_path\n    description: \"Generate Python models via Modelina\"\n    when: \"'python' in target_languages\"\n\n  - skill: api.generate-models\n    args:\n      - \"{spec_path}\"\n      - \"java\"\n      - \"--output=src/main/java/models/{service_name}\"\n    output: java_models_path\n    description: \"Generate Java models via Modelina\"\n    when: \"'java' in target_languages\"\n\n  # Step 4: Verify generated models compile\n  - skill: code.verify\n    args:\n      - \"{ts_models_path}\"\n      - \"typescript\"\n    description: \"Verify TypeScript models compile\"\n    when: \"'typescript' in target_languages\"\n\n  - skill: code.verify\n    args:\n      - \"{py_models_path}\"\n      - \"python\"\n    description: \"Verify Python models pass type checking\"\n    when: \"'python' in target_languages\"\n\n  # Step 5: Check for breaking changes (if updating existing API)\n  - skill: api.compatibility\n    args:\n      - \"specs/{service_name}.{spec_type}.yaml\"  # old version\n      - \"{spec_path}\"                             # new version\n    output: compatibility_report\n    description: \"Check for breaking API changes\"\n    when: \"file_exists('specs/{service_name}.{spec_type}.yaml')\"\n    blocking: true  # Fail workflow if breaking changes detected\n\n  # Step 6: Generate API documentation\n  - skill: api.generate-docs\n    args:\n      - \"{spec_path}\"\n      - \"--format=markdown\"\n      - \"--output=docs/api/{service_name}.md\"\n    output: docs_path\n    description: \"Generate API documentation\"\n\n  # Step 7: Publish to registry\n  - skill: api.publish\n    args:\n      - \"{spec_path}\"\n      - \"{service_name}\"\n      - \"--models={ts_models_path},{py_models_path}\"\n      - \"--docs={docs_path}\"\n    output: registry_entry\n    description: \"Publish spec, models, and docs to Betty registry\"\n\n  # Step 8: Log completion\n  - skill: audit.log\n    args:\n      - \"api_first_development\"\n      - \"{service_name}\"\n      - \"{registry_entry}\"\n    description: \"Log workflow completion for audit trail\"\n\naudit:\n  log_to: /registry/workflow_history.json\n  include:\n    - All input parameters\n    - Validation results\n    - Compatibility report (if ran)\n    - Generated artifacts\n    - Execution time per step\n\non_failure:\n  cleanup:\n    - Remove partial spec if validation failed\n    - Remove partial models if generation failed\n  notify:\n    - skill: audit.log\n      args: [\"api_first_development_failed\", \"{service_name}\", \"{error}\"]\n</code></pre>"},{"location":"api-driven-development/#hooks-automatic-validation","title":"Hooks: Automatic Validation","text":"<pre><code># .claude/hooks.yaml (generated by hook.define skill)\n\nhooks:\n  # Validate OpenAPI specs on every edit\n  on_file_edit:\n    - name: validate-openapi-zalando\n      description: \"Validate OpenAPI specs against Zalando guidelines\"\n      when:\n        pattern: \"*.openapi.yaml\"\n      command: \"python betty/skills/api.validate/api_validate.py {file_path} zalando\"\n      blocking: true\n      timeout: 10000  # 10 seconds\n      on_failure:\n        action: show_errors\n        message: \"OpenAPI spec violates Zalando guidelines. See errors above.\"\n\n    - name: validate-asyncapi\n      description: \"Validate AsyncAPI specs\"\n      when:\n        pattern: \"*.asyncapi.yaml\"\n      command: \"python betty/skills/asyncapi.validate/asyncapi_validate.py {file_path}\"\n      blocking: true\n      timeout: 10000\n\n  # Regenerate models when specs change\n  on_file_save:\n    - name: regenerate-models-on-spec-change\n      description: \"Auto-regenerate models when API specs are saved\"\n      when:\n        pattern: \"specs/*.openapi.yaml\"\n      command: \"python betty/skills/api.generate-models/auto_generate.py {file_path}\"\n      blocking: false  # Run async, don't block save\n      async: true\n\n  # Check compatibility before commit\n  on_commit:\n    - name: check-breaking-changes\n      description: \"Prevent commits with breaking API changes\"\n      when:\n        changed_files: \"specs/**/*.yaml\"\n      command: \"python betty/skills/api.compatibility/check_breaking_changes.py {file_path}\"\n      blocking: true\n      on_failure:\n        action: abort_commit\n        message: \"Breaking API changes detected. Use major version bump.\"\n\n  # Run full validation suite before push\n  on_push:\n    - name: full-api-validation-suite\n      description: \"Run complete API validation before pushing\"\n      when:\n        changed_files: \"specs/**\"\n      command: \"python betty/skills/workflow.compose/workflow_compose.py workflows/api_validation_suite.yaml\"\n      blocking: true\n      timeout: 300000  # 5 minutes\n</code></pre>"},{"location":"api-driven-development/#usage-examples","title":"Usage Examples","text":""},{"location":"api-driven-development/#example-1-design-a-new-api","title":"Example 1: Design a New API","text":"<pre><code># User runs command\n/api-design user-service\n\n# Betty executes:\n# 1. api.designer agent starts\n# 2. Loads Zalando template\n# 3. Creates specs/user-service.openapi.yaml\n# 4. Hook validates automatically (BLOCKS if invalid)\n# 5. Generates TypeScript models\n# 6. Generates Python models\n# 7. Verifies models compile\n# 8. Publishes to registry\n\n# Output:\n\u2713 Created specs/user-service.openapi.yaml\n\u2713 Validated against Zalando guidelines (PASSED)\n\u2713 Generated TypeScript models \u2192 src/models/user-service/\n\u2713 Generated Python models \u2192 src/models/user-service/\n\u2713 All models compile successfully\n\u2713 Published to registry\n\n# Files created:\nspecs/user-service.openapi.yaml\nsrc/models/user-service/User.ts\nsrc/models/user-service/UserCreate.ts\nsrc/models/user-service/Pagination.ts\nsrc/models/user-service/user.py\ndocs/api/user-service.md\n</code></pre>"},{"location":"api-driven-development/#example-2-validate-existing-spec","title":"Example 2: Validate Existing Spec","text":"<pre><code># Direct skill invocation\npython betty/skills/api.validate/api_validate.py specs/user-service.openapi.yaml zalando\n\n# Or via command\n/api-validate specs/user-service.openapi.yaml\n\n# Output:\n{\n  \"status\": \"success\",\n  \"data\": {\n    \"valid\": true,\n    \"errors\": [],\n    \"warnings\": [\n      \"Consider adding rate limit documentation\"\n    ],\n    \"guideline_version\": \"zalando-1.0\",\n    \"spec_version\": \"3.1.0\"\n  }\n}\n</code></pre>"},{"location":"api-driven-development/#example-3-automatic-validation-on-edit","title":"Example 3: Automatic Validation on Edit","text":"<pre><code># User edits specs/user-service.openapi.yaml\n# Hook runs automatically:\n\n\u2192 Running validate-openapi-zalando...\n\n\u2717 Validation failed:\n  - Missing required field: info.x-api-id\n  - Property 'userId' should use snake_case (user_id)\n  - Response 400 must use application/problem+json\n\n\u274c File edit blocked until errors are fixed\n</code></pre>"},{"location":"api-driven-development/#example-4-generate-models-in-multiple-languages","title":"Example 4: Generate Models in Multiple Languages","text":"<pre><code># Run workflow\npython betty/skills/workflow.compose/workflow_compose.py \\\n  workflows/api_first_development.yaml \\\n  --service-name=user-service \\\n  --spec-type=openapi \\\n  --target-languages=typescript,python,java\n\n# Generates:\nsrc/models/user-service/User.ts\nsrc/models/user-service/User.py\nsrc/main/java/models/userservice/User.java\n\n# All from the same OpenAPI spec!\n</code></pre>"},{"location":"api-driven-development/#benefits","title":"Benefits","text":""},{"location":"api-driven-development/#for-developers","title":"For Developers","text":"<ul> <li>\u2705 Immediate feedback: Validation happens on every edit, not at commit time</li> <li>\u2705 Consistent APIs: Zalando guidelines enforced automatically</li> <li>\u2705 Type safety: Shared models between frontend/backend</li> <li>\u2705 Less boilerplate: Models generated, not hand-written</li> <li>\u2705 Confidence: Breaking changes caught before merge</li> </ul>"},{"location":"api-driven-development/#for-teams","title":"For Teams","text":"<ul> <li>\u2705 Contract-first: API contracts defined before implementation</li> <li>\u2705 Parallel development: Frontend/backend can work independently</li> <li>\u2705 Documentation: Always up-to-date, generated from specs</li> <li>\u2705 Versioning: Breaking changes tracked and managed</li> <li>\u2705 Onboarding: New developers see the contract first</li> </ul>"},{"location":"api-driven-development/#for-organizations","title":"For Organizations","text":"<ul> <li>\u2705 Compliance: Zalando guidelines enforced, not suggested</li> <li>\u2705 Audit trail: Every API change logged</li> <li>\u2705 Consistency: All APIs follow same patterns</li> <li>\u2705 Quality: Automated validation reduces errors</li> <li>\u2705 Maintainability: Specs are living documentation</li> </ul>"},{"location":"api-driven-development/#next-steps","title":"Next Steps","text":"<ol> <li>Implement Phase 1: Create <code>hook.define</code> and <code>api.validate</code> skills</li> <li>Integrate Zally: Set up Zalando's Zally linter</li> <li>Integrate Modelina: Set up code generation</li> <li>Create Templates: Build Zalando-compliant OpenAPI templates</li> <li>Document Workflow: Create team runbook for API-first development</li> </ol>"},{"location":"api-driven-development/#references","title":"References","text":"<ul> <li>Zalando RESTful API Guidelines</li> <li>Zally API Linter</li> <li>Modelina Code Generator</li> <li>OpenAPI 3.1 Specification</li> <li>AsyncAPI 3.0 Specification</li> <li>RFC 7807 Problem Details</li> <li>Betty Architecture</li> <li>Betty Skills Framework</li> </ul>"},{"location":"betty-architecture/","title":"Betty Architecture: The Five-Layer Model","text":""},{"location":"betty-architecture/#overview","title":"Overview","text":"<p>Betty Framework implements a five-layer architecture that transforms Claude Code's plugin system into a structured, auditable engineering discipline. Each layer serves a distinct purpose, from user interaction down to policy enforcement.</p> <pre><code>\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  COMMANDS (User Interface Layer)            \u2502\n\u2502  Slash commands: /api-design, /validate     \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502 triggers\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  AGENTS (Reasoning Layer)                   \u2502\n\u2502  Intelligent orchestration with feedback    \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502 orchestrates\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  WORKFLOWS (Orchestration Layer)            \u2502\n\u2502  Declarative YAML multi-step processes      \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502 executes\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  SKILLS (Execution Layer)                   \u2502\n\u2502  Atomic, testable operations                \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n                   \u2502 protected by\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u25bc\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  HOOKS (Validation/Policy Layer)            \u2502\n\u2502  Automatic validation and governance        \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n</code></pre>"},{"location":"betty-architecture/#layer-1-commands-user-interface","title":"Layer 1: Commands (User Interface)","text":"<p>Purpose: Provide intuitive, user-facing entry points for Betty capabilities.</p> <p>Implementation: Slash commands registered via Claude Code's command system.</p> <p>Created by: <code>command.define</code> skill</p>"},{"location":"betty-architecture/#structure","title":"Structure","text":"<pre><code># .claude/commands/api-design.md\n# or commands/api-design.yaml (created by command.define)\n\nname: /api-design\ndescription: \"Design a new API following enterprise guidelines\"\n\nparameters:\n  - name: service_name\n    type: string\n    required: true\n    description: \"Name of the service/API\"\n\n  - name: spec_type\n    type: enum\n    values: [openapi, asyncapi]\n    default: openapi\n    description: \"Type of API specification\"\n\nexecution:\n  type: agent              # Delegates to an agent\n  target: api.designer     # Which agent to invoke\n  context:\n    guidelines: zalando    # Context passed to agent\n    generate_models: true\n\noutput:\n  - OpenAPI spec in specs/{service_name}.yaml\n  - Generated models in src/models/{service_name}/\n  - Validation report in .betty/reports/{service_name}-validation.json\n</code></pre>"},{"location":"betty-architecture/#command-examples","title":"Command Examples","text":"Command Purpose Delegates To <code>/api-design &lt;service&gt;</code> Design new API from scratch <code>api.designer</code> agent <code>/api-validate &lt;spec&gt;</code> Validate existing spec <code>api.validate</code> skill directly <code>/api-migrate &lt;v1&gt; &lt;v2&gt;</code> Handle API versioning <code>api.migrator</code> agent <code>/api-review &lt;spec&gt;</code> Review for compliance <code>api.reviewer</code> agent <code>/api-generate &lt;spec&gt; --lang=ts</code> Generate client models <code>api.generate-models</code> skill"},{"location":"betty-architecture/#when-to-use-commands","title":"When to Use Commands","text":"<ul> <li>\u2705 User-facing operations that need simple invocation</li> <li>\u2705 Common workflows that should be easy to remember</li> <li>\u2705 Operations that benefit from parameter validation</li> <li>\u274c Internal skill-to-skill communication (use direct skill calls)</li> <li>\u274c Hook triggers (hooks call skills directly)</li> </ul>"},{"location":"betty-architecture/#layer-2-agents-reasoning-layer","title":"Layer 2: Agents (Reasoning Layer)","text":"<p>Purpose: Provide intelligent, iterative orchestration with reasoning and error recovery.</p> <p>Implementation: Agents as defined in Claude Code's agent system, with manifest files.</p> <p>Created by: <code>agent.define</code> skill</p>"},{"location":"betty-architecture/#agent-manifest-schema","title":"Agent Manifest Schema","text":"<p>Agent manifests define intelligent orchestrators that compose skills with reasoning and context awareness.</p>"},{"location":"betty-architecture/#required-fields","title":"Required Fields","text":"Field Type Format Description <code>name</code> string <code>^[a-z][a-z0-9._-]*$</code> Unique identifier (e.g., <code>api.designer</code>, <code>compliance.checker</code>) <code>version</code> string <code>^\\d+\\.\\d+\\.\\d+(-[a-zA-Z0-9.-]+)?$</code> Semantic version (e.g., <code>0.1.0</code>, <code>1.0.0-beta</code>) <code>description</code> string 1-200 chars Human-readable purpose statement <code>capabilities</code> array[string] Non-empty List of what the agent can do <code>skills_available</code> array[string] Valid skill names Skills the agent can orchestrate <code>reasoning_mode</code> enum <code>iterative</code> | <code>oneshot</code> How the agent approaches tasks"},{"location":"betty-architecture/#optional-fields","title":"Optional Fields","text":"Field Type Default Description <code>context_requirements</code> object <code>{}</code> Structured context the agent needs <code>workflow_pattern</code> string <code>null</code> Narrative description of agent's reasoning process <code>example_task</code> string <code>null</code> Concrete example demonstrating agent behavior <code>error_handling</code> object <code>{}</code> Retry strategies and failure handling <code>output</code> object <code>{}</code> Expected outputs for success and failure cases <code>tags</code> array[string] <code>[]</code> Categorization tags (e.g., <code>api</code>, <code>validation</code>) <code>dependencies</code> array[string] <code>[]</code> Other agents or schemas this depends on <code>status</code> enum <code>draft</code> Lifecycle status: <code>draft</code> | <code>active</code> | <code>deprecated</code> | <code>archived</code>"},{"location":"betty-architecture/#field-specifications","title":"Field Specifications","text":"<p><code>reasoning_mode</code> - How the agent approaches problems: - <code>iterative</code>: Agent can retry with feedback, refine based on errors, and improve incrementally (for validation loops, refinement tasks) - <code>oneshot</code>: Agent executes once without retry (for analysis, reporting, deterministic tasks)</p> <p><code>context_requirements</code> - Structured context for decision-making: <pre><code>context_requirements:\n  guidelines: string           # Type definition\n  domain: string\n  existing_apis: list\n  strict_mode: boolean\n  target_languages: list\n</code></pre></p> <p><code>error_handling</code> - Defines retry and failure strategies: <pre><code>error_handling:\n  max_retries: 3\n  on_validation_failure: \"analyze_and_refine\"\n  on_generation_failure: \"try_alternative_config\"\n  timeout_seconds: 300\n</code></pre></p> <p><code>output</code> - Expected artifacts and reports: <pre><code>output:\n  success:\n    - OpenAPI spec (validated)\n    - Generated models (compiled)\n    - Validation report\n  failure:\n    - Error analysis\n    - Partial spec\n    - Suggested fixes\n</code></pre></p>"},{"location":"betty-architecture/#validation-rules","title":"Validation Rules","text":"<ol> <li>Name Validation:</li> <li>Must match regex: <code>^[a-z][a-z0-9._-]*$</code></li> <li>Should follow pattern: <code>&lt;domain&gt;.&lt;action&gt;</code> (e.g., <code>api.designer</code>, <code>compliance.checker</code>)</li> <li> <p>Must be unique within agent registry</p> </li> <li> <p>Version Validation:</p> </li> <li>Must follow semantic versioning: <code>MAJOR.MINOR.PATCH[-prerelease]</code></li> <li> <p>Examples: <code>0.1.0</code>, <code>1.0.0</code>, <code>2.3.1-beta</code></p> </li> <li> <p>Skills Validation:</p> </li> <li>All skills in <code>skills_available</code> must exist in skill registry</li> <li>Must have at least one skill</li> <li> <p>Agent should not list itself as a dependency (no circular references)</p> </li> <li> <p>Status Lifecycle:</p> </li> <li><code>draft</code> \u2192 <code>active</code> \u2192 <code>deprecated</code> \u2192 <code>archived</code> (one-way progression)</li> <li>Only <code>active</code> agents can be invoked by commands</li> <li><code>deprecated</code> agents emit warnings</li> <li><code>archived</code> agents cannot be executed</li> </ol>"},{"location":"betty-architecture/#example-api-designer-agent","title":"Example: API Designer Agent","text":"<pre><code># agents/api.designer/agent.yaml\n\nname: api.designer\nversion: 0.1.0\ndescription: \"Design RESTful APIs following enterprise guidelines with iterative refinement\"\n\ncapabilities:\n  - Design RESTful APIs from natural language requirements\n  - Apply Zalando guidelines automatically\n  - Generate OpenAPI 3.1 specs with best practices\n  - Iteratively refine based on validation feedback\n  - Handle AsyncAPI for event-driven architectures\n\nskills_available:\n  - api.define              # Core spec creation\n  - api.validate            # Zalando compliance checking\n  - api.generate-models     # Modelina integration\n  - api.compatibility       # Breaking change detection\n  - api.publish             # Registry publication (future)\n\nreasoning_mode: iterative   # Agent can retry with feedback\n\ncontext_requirements:\n  guidelines: string        # Which guidelines to follow (zalando, google, etc.)\n  domain: string           # Business domain context\n  existing_apis: list      # Related APIs for consistency\n\nworkflow_pattern: |\n  1. Analyze requirements and domain context\n  2. Draft OpenAPI spec following guidelines\n  3. Run validation (api.validate)\n  4. If validation fails:\n     - Analyze errors\n     - Refine spec\n     - Re-validate\n     - Repeat until passing\n  5. Generate models for target languages\n  6. Verify generated models compile\n  7. Publish to registry with metadata\n\nexample_task: |\n  Input: \"Create API for user management with CRUD operations,\n          authentication via JWT, and email verification workflow\"\n\n  Agent will:\n  1. Draft OpenAPI spec with proper resource paths (/users, /users/{id})\n  2. Apply Zalando guidelines (snake_case, problem JSON, etc.)\n  3. Validate spec against Zally rules\n  4. Fix issues (e.g., add required headers, fix naming)\n  5. Generate TypeScript and Python models via Modelina\n  6. Verify models compile in sample projects\n  7. Publish spec and models to registry\n\nerror_handling:\n  max_retries: 3\n  on_validation_failure: \"Analyze errors, refine spec, retry\"\n  on_generation_failure: \"Try alternative Modelina configurations\"\n  on_compilation_failure: \"Adjust spec to fix type issues\"\n  timeout_seconds: 300\n\noutput:\n  success:\n    - OpenAPI spec (validated)\n    - Generated models (compiled)\n    - Validation report\n    - Dependency graph\n  failure:\n    - Error analysis\n    - Partial spec\n    - Suggested fixes\n\nstatus: draft\n\ntags:\n  - api\n  - design\n  - openapi\n  - zalando\n</code></pre>"},{"location":"betty-architecture/#agent-examples","title":"Agent Examples","text":"Agent Purpose Skills Used Reasoning Pattern <code>api.designer</code> Design APIs from requirements api.define, api.validate, api.generate-models Iterative refinement <code>api.reviewer</code> Review specs for compliance api.validate, api.compatibility, audit.log Analysis and reporting <code>api.migrator</code> Handle API versioning api.compatibility, api.define, api.publish Multi-step migration <code>compliance.checker</code> Ensure enterprise standards api.validate, policy.validate, audit.log Policy enforcement"},{"location":"betty-architecture/#when-to-use-agents","title":"When to Use Agents","text":"<ul> <li>\u2705 Complex tasks requiring reasoning and decision-making</li> <li>\u2705 Iterative processes with validation and refinement</li> <li>\u2705 Operations that may need error recovery and retry logic</li> <li>\u2705 Tasks that benefit from contextual understanding</li> <li>\u274c Simple, deterministic operations (use skills directly)</li> <li>\u274c Operations requiring millisecond response times (too slow)</li> </ul>"},{"location":"betty-architecture/#agents-vs-skills-vs-workflows","title":"Agents vs Skills vs Workflows","text":"Feature Skills Workflows Agents Reasoning None None Yes Iteration No No Yes Error Recovery Basic Sequential Intelligent Speed Fast Medium Slower Use Case Atomic operations Fixed processes Complex goals"},{"location":"betty-architecture/#layer-3-workflows-orchestration-layer","title":"Layer 3: Workflows (Orchestration Layer)","text":"<p>Purpose: Define repeatable, auditable multi-step processes.</p> <p>Implementation: Declarative YAML files executed by <code>workflow.compose</code> skill.</p> <p>Created by: Manual authoring or <code>workflow.define</code> skill</p>"},{"location":"betty-architecture/#structure_1","title":"Structure","text":"<pre><code># workflows/api_first_development.yaml\n\nname: api_first_development\nversion: 1.0.0\ndescription: \"Complete API-first development workflow following Zalando guidelines\"\n\ninputs:\n  service_name: string\n  spec_type: openapi|asyncapi\n  target_languages: list[string]\n\nsteps:\n  # Step 1: Create the specification\n  - skill: api.define\n    args:\n      - \"{service_name}\"\n      - \"{spec_type}\"\n    output: spec_path\n    description: \"Create initial API specification\"\n\n  # Step 2: Validate against Zalando guidelines\n  - skill: api.validate\n    args:\n      - \"{spec_path}\"\n      - \"zalando\"\n    output: validation_report\n    description: \"Validate spec against Zalando guidelines\"\n    required: true  # Workflow fails if validation fails\n\n  # Step 3: Generate models for each target language\n  - skill: api.generate-models\n    args:\n      - \"{spec_path}\"\n      - \"typescript\"\n    output: ts_models_path\n    description: \"Generate TypeScript models via Modelina\"\n    when: \"'typescript' in target_languages\"\n\n  - skill: api.generate-models\n    args:\n      - \"{spec_path}\"\n      - \"python\"\n    output: py_models_path\n    description: \"Generate Python models via Modelina\"\n    when: \"'python' in target_languages\"\n\n  # Step 4: Verify models compile\n  - skill: code.verify\n    args:\n      - \"{ts_models_path}\"\n      - \"typescript\"\n    description: \"Verify TypeScript models compile\"\n    when: \"'typescript' in target_languages\"\n\n  # Step 5: Check for breaking changes (if updating existing API)\n  - skill: api.compatibility\n    args:\n      - \"specs/{service_name}.yaml\"  # old version\n      - \"{spec_path}\"                # new version\n    output: compatibility_report\n    description: \"Check for breaking changes\"\n    when: \"file_exists('specs/{service_name}.yaml')\"\n\n  # Step 6: Publish to registry\n  - skill: api.publish\n    args:\n      - \"{spec_path}\"\n      - \"{service_name}\"\n    output: registry_entry\n    description: \"Publish spec and models to Betty registry\"\n\naudit:\n  log_to: /registry/workflow_history.json\n  include:\n    - All input parameters\n    - Output of each step\n    - Execution time per step\n    - Validation results\n    - Compatibility reports\n\non_failure:\n  cleanup:\n    - Remove partial artifacts\n    - Log failure details\n  notify:\n    - Log to audit.log skill\n</code></pre>"},{"location":"betty-architecture/#workflow-patterns","title":"Workflow Patterns","text":"<p>Sequential Execution (current implementation): <pre><code>steps:\n  - skill: api.define\n    args: [...]\n  - skill: api.validate\n    args: [...]\n  - skill: api.generate-models\n    args: [...]\n</code></pre></p> <p>Conditional Execution (future): <pre><code>steps:\n  - skill: api.compatibility\n    args: [...]\n    when: \"file_exists('specs/{service_name}.yaml')\"\n</code></pre></p> <p>Parallel Execution (future): <pre><code>steps:\n  - parallel:\n      - skill: api.generate-models\n        args: [\"{spec}\", \"typescript\"]\n      - skill: api.generate-models\n        args: [\"{spec}\", \"python\"]\n      - skill: api.generate-models\n        args: [\"{spec}\", \"go\"]\n</code></pre></p>"},{"location":"betty-architecture/#when-to-use-workflows","title":"When to Use Workflows","text":"<ul> <li>\u2705 Multi-step processes that should be reproducible</li> <li>\u2705 Operations requiring audit trails</li> <li>\u2705 Standard procedures that multiple teams will use</li> <li>\u2705 Processes that need to be version-controlled</li> <li>\u274c One-off operations (just call skills directly)</li> <li>\u274c Processes requiring complex branching logic (use agents)</li> </ul>"},{"location":"betty-architecture/#layer-4-skills-execution-layer","title":"Layer 4: Skills (Execution Layer)","text":"<p>Purpose: Provide atomic, testable, reusable operations.</p> <p>Implementation: Python scripts with manifests, registered in Betty registry.</p> <p>Created by: <code>skill.create</code> skill</p>"},{"location":"betty-architecture/#structure_2","title":"Structure","text":"<pre><code>skills/api.validate/\n\u251c\u2500\u2500 skill.yaml              # Manifest\n\u251c\u2500\u2500 api_validate.py         # Handler implementation\n\u251c\u2500\u2500 SKILL.md               # Documentation\n\u2514\u2500\u2500 tests/\n    \u2514\u2500\u2500 test_api_validate.py\n</code></pre> <p>Manifest (<code>skill.yaml</code>): <pre><code>name: api.validate\nversion: 0.1.0\ndescription: \"Validate OpenAPI/AsyncAPI specs against enterprise guidelines\"\n\ninputs:\n  - name: spec_path\n    type: string\n    required: true\n    description: \"Path to the API specification file\"\n\n  - name: guideline_set\n    type: string\n    required: false\n    default: \"zalando\"\n    enum: [zalando, google, microsoft]\n    description: \"Which API guidelines to validate against\"\n\noutputs:\n  - name: validation_report\n    type: object\n    description: \"Detailed validation results\"\n    schema:\n      properties:\n        valid: boolean\n        errors: array\n        warnings: array\n        guideline_version: string\n\ndependencies:\n  - context.schema    # For validation rule definitions\n\nentrypoints:\n  - command: /skill/api/validate\n    handler: api_validate.py\n    runtime: python\n    permissions:\n      - filesystem:read\n      - network:http  # For Zally API calls\n\nstatus: active\n\ntags: [api, validation, openapi, asyncapi, zalando]\n</code></pre></p> <p>Handler (<code>api_validate.py</code>): <pre><code>#!/usr/bin/env python3\n\"\"\"\nValidate API specifications against enterprise guidelines.\n\"\"\"\n\nimport sys\nimport json\nimport argparse\nfrom pathlib import Path\n\nsys.path.insert(0, str(Path(__file__).parent.parent.parent))\n\nfrom betty.logging_utils import setup_logger\nfrom betty.errors import format_error_response, SkillExecutionError\nfrom betty.validation import validate_path\n\nlogger = setup_logger(__name__)\n\n\ndef validate_openapi_spec(spec_path: str, guideline_set: str) -&gt; dict:\n    \"\"\"\n    Validate OpenAPI spec against specified guidelines.\n\n    Args:\n        spec_path: Path to OpenAPI YAML/JSON file\n        guideline_set: Guidelines to validate against (zalando, google, etc.)\n\n    Returns:\n        Validation report with errors, warnings, and compliance info\n    \"\"\"\n    # Implementation here\n    # - Load spec\n    # - Call Zally API or local validator\n    # - Parse validation results\n    # - Return structured report\n\n    return {\n        \"valid\": True,\n        \"errors\": [],\n        \"warnings\": [],\n        \"guideline_version\": \"zalando-1.0\",\n        \"spec_version\": \"3.1.0\"\n    }\n\n\ndef main():\n    parser = argparse.ArgumentParser(\n        description=\"Validate API specifications against enterprise guidelines\"\n    )\n    parser.add_argument(\n        \"spec_path\",\n        type=str,\n        help=\"Path to the API specification file\"\n    )\n    parser.add_argument(\n        \"guideline_set\",\n        type=str,\n        nargs=\"?\",\n        default=\"zalando\",\n        choices=[\"zalando\", \"google\", \"microsoft\"],\n        help=\"Guidelines to validate against (default: zalando)\"\n    )\n\n    args = parser.parse_args()\n\n    try:\n        # Validate inputs\n        validate_path(args.spec_path)\n\n        # Execute validation\n        logger.info(f\"Validating {args.spec_path} against {args.guideline_set} guidelines\")\n        result = validate_openapi_spec(args.spec_path, args.guideline_set)\n\n        # Return structured result\n        output = {\n            \"status\": \"success\",\n            \"data\": result\n        }\n        print(json.dumps(output, indent=2))\n\n        # Exit with error code if validation failed\n        if not result[\"valid\"]:\n            sys.exit(1)\n\n    except Exception as e:\n        logger.error(f\"Validation failed: {e}\")\n        print(json.dumps(format_error_response(e), indent=2))\n        sys.exit(1)\n\n\nif __name__ == \"__main__\":\n    main()\n</code></pre></p>"},{"location":"betty-architecture/#skill-categories-for-api-driven-development","title":"Skill Categories for API-Driven Development","text":"Category Skills Purpose Definition api.define, asyncapi.define Create specifications Validation api.validate, api.lint Check compliance Generation api.generate-models, api.generate-docs Code/doc generation Compatibility api.compatibility, api.diff Version management Publishing api.publish, api.register Registry management"},{"location":"betty-architecture/#when-to-use-skills","title":"When to Use Skills","text":"<ul> <li>\u2705 Always - skills are the fundamental execution unit</li> <li>\u2705 Atomic operations that can be tested independently</li> <li>\u2705 Reusable logic needed by multiple workflows/agents</li> <li>\u2705 Operations that need clear input/output contracts</li> </ul>"},{"location":"betty-architecture/#layer-5-hooks-validationpolicy-layer","title":"Layer 5: Hooks (Validation/Policy Layer)","text":"<p>Purpose: Provide automatic validation, policy enforcement, and safety rails.</p> <p>Implementation: Event-triggered scripts registered in Claude Code's hooks system.</p> <p>Created by: <code>hook.define</code> skill</p>"},{"location":"betty-architecture/#structure_3","title":"Structure","text":"<pre><code># .claude/hooks.yaml (generated by hook.define skill)\n\nhooks:\n  # Validate OpenAPI specs on file edit\n  on_file_edit:\n    - name: validate-openapi-spec\n      description: \"Validate OpenAPI specs against Zalando guidelines on every edit\"\n      when:\n        pattern: \"*.openapi.yaml\"\n        # or: \"specs/**/*.yaml\"\n      command: \"python betty/skills/api.validate/api_validate.py {file_path} zalando\"\n      blocking: true        # Must pass before edit completes\n      timeout: 30000        # 30 seconds\n      on_failure: \"show_errors\"\n\n    - name: validate-asyncapi-spec\n      description: \"Validate AsyncAPI specs on edit\"\n      when:\n        pattern: \"*.asyncapi.yaml\"\n      command: \"python betty/skills/asyncapi.validate/asyncapi_validate.py {file_path}\"\n      blocking: true\n\n  # Check for breaking changes on commit\n  on_commit:\n    - name: check-api-compatibility\n      description: \"Prevent commits with breaking API changes\"\n      when:\n        pattern: \"specs/**/*.yaml\"\n      command: \"python betty/skills/api.compatibility/check_breaking_changes.py {file_path}\"\n      blocking: true\n      on_failure: \"abort_commit\"\n\n    - name: verify-api-versioning\n      description: \"Ensure proper API versioning on spec changes\"\n      when:\n        pattern: \"specs/**/*.yaml\"\n      command: \"python betty/skills/api.version/check_version.py {file_path}\"\n      blocking: true\n\n  # Audit trail on any tool use\n  on_tool_use:\n    - name: audit-api-changes\n      description: \"Log all API-related tool usage for compliance\"\n      command: \"python betty/skills/audit.log/log_api_change.py {tool_name} {file_path}\"\n      blocking: false       # Just log, don't block\n\n  # Re-generate models when specs change\n  on_file_save:\n    - name: regenerate-models\n      description: \"Auto-regenerate client models when specs change\"\n      when:\n        pattern: \"specs/*.openapi.yaml\"\n      command: \"python betty/skills/api.generate-models/auto_generate.py {file_path}\"\n      blocking: false       # Run async, don't block save\n      async: true\n\n  # Validate before push\n  on_push:\n    - name: full-api-validation\n      description: \"Run complete validation suite before pushing\"\n      when:\n        changed_files: \"specs/**\"\n      command: \"python betty/skills/workflow.compose/workflow_compose.py workflows/api_validation_suite.yaml\"\n      blocking: true\n      timeout: 300000       # 5 minutes\n</code></pre>"},{"location":"betty-architecture/#hook-definition-skill","title":"Hook Definition Skill","text":"<pre><code># Creating a hook via hook.define skill\npython betty/skills/hook.define/hook_define.py \\\n  --event=on_file_edit \\\n  --pattern=\"*.openapi.yaml\" \\\n  --command=\"api.validate {file_path} zalando\" \\\n  --blocking=true \\\n  --description=\"Validate OpenAPI specs on edit\"\n</code></pre> <p>This would: 1. Add entry to <code>.claude/hooks.yaml</code> 2. Register hook in Betty registry 3. Document in <code>.betty/hooks/README.md</code> 4. Create audit entry</p>"},{"location":"betty-architecture/#hook-events-for-api-driven-development","title":"Hook Events for API-Driven Development","text":"Event Use Case Example <code>on_file_edit</code> Validate syntax on every edit OpenAPI schema validation <code>on_file_save</code> Trigger code generation Regenerate models from spec <code>on_commit</code> Prevent breaking changes API compatibility check <code>on_push</code> Full validation suite Run all API tests <code>on_tool_use</code> Audit trail Log all spec modifications <code>on_agent_start</code> Context injection Load API guidelines <code>on_workflow_end</code> Cleanup/notification Publish new API version"},{"location":"betty-architecture/#why-hooks-for-validation","title":"Why Hooks for Validation?","text":"<p>Traditional Approach (manual): <pre><code># Developer has to remember to run:\npython api_validate.py specs/user.yaml\n# ...and they often forget\n</code></pre></p> <p>Betty Approach (automatic): <pre><code># Hook runs automatically on file edit\non_file_edit:\n  - pattern: \"*.openapi.yaml\"\n    command: api.validate {file_path}\n    blocking: true\n</code></pre></p> <p>Benefits: - \u2705 Validation happens automatically, not by memory - \u2705 Catches errors immediately, not at commit time - \u2705 Provides fast feedback loop (&lt; 1 second) - \u2705 Prevents invalid specs from ever being saved - \u2705 Enforces guidelines as guardrails, not afterthoughts - \u2705 No discipline required - it's just how the system works</p>"},{"location":"betty-architecture/#when-to-use-hooks","title":"When to Use Hooks","text":"<ul> <li>\u2705 Validation that should happen automatically</li> <li>\u2705 Policy enforcement that can't be bypassed</li> <li>\u2705 Audit logging for compliance</li> <li>\u2705 Code generation that should stay in sync</li> <li>\u274c Long-running operations (use async workflows)</li> <li>\u274c Operations requiring human decision (use agents)</li> </ul>"},{"location":"betty-architecture/#integration-example-api-driven-development","title":"Integration Example: API-Driven Development","text":"<p>Let's see how all five layers work together for API-driven development:</p>"},{"location":"betty-architecture/#user-action","title":"User Action","text":"<pre><code>/api-design user-service\n</code></pre>"},{"location":"betty-architecture/#layer-1-command-receives-request","title":"Layer 1: Command Receives Request","text":"<p><pre><code># commands/api-design.yaml\nname: /api-design\nexecution:\n  type: agent\n  target: api.designer\n</code></pre> The command delegates to the <code>api.designer</code> agent.</p>"},{"location":"betty-architecture/#layer-2-agent-reasons-and-plans","title":"Layer 2: Agent Reasons and Plans","text":"<pre><code># agents/api.designer/agent.yaml\nThe agent:\n1. Analyzes requirements: \"user-service\"\n2. Decides to use workflow: api_first_development.yaml\n3. Adds context: guidelines=zalando, domain=user-management\n</code></pre>"},{"location":"betty-architecture/#layer-3-workflow-orchestrates-steps","title":"Layer 3: Workflow Orchestrates Steps","text":"<pre><code># workflows/api_first_development.yaml\nsteps:\n  - skill: api.define\n  - skill: api.validate\n  - skill: api.generate-models\n  - skill: api.publish\n</code></pre>"},{"location":"betty-architecture/#layer-4-skills-execute","title":"Layer 4: Skills Execute","text":"<p>Each skill runs: 1. <code>api.define</code> \u2192 Creates <code>specs/user-service.openapi.yaml</code> 2. Triggers hook immediately...</p>"},{"location":"betty-architecture/#layer-5-hook-validates","title":"Layer 5: Hook Validates","text":"<pre><code># .claude/hooks.yaml\non_file_edit:\n  - pattern: \"*.openapi.yaml\"\n    command: api.validate {file_path} zalando\n    blocking: true\n</code></pre> <p>If validation passes: - Workflow continues - <code>api.generate-models</code> runs - Models generated in <code>src/models/user-service/</code> - <code>api.publish</code> adds to registry</p> <p>If validation fails: - Hook blocks the edit - Agent receives error feedback - Agent refines the spec - Process repeats</p>"},{"location":"betty-architecture/#complete-flow","title":"Complete Flow","text":"<pre><code>User: /api-design user-service\n  \u2193\nCommand: Delegates to api.designer agent\n  \u2193\nAgent: Analyzes, plans, selects workflow\n  \u2193\nWorkflow: Executes api.define skill\n  \u2193\nSkill: Creates specs/user-service.openapi.yaml\n  \u2193\nHook: Validates against Zalando (BLOCKS if invalid)\n  \u2193\n(if valid) Workflow continues...\n  \u2193\nSkill: api.generate-models (TypeScript)\n  \u2193\nHook: Verifies models compile (BLOCKS if broken)\n  \u2193\n(if valid) Workflow continues...\n  \u2193\nSkill: api.publish\n  \u2193\nAgent: Reports success to user\n  \u2193\nUser: Receives validated spec + compiled models\n</code></pre>"},{"location":"betty-architecture/#design-principles","title":"Design Principles","text":""},{"location":"betty-architecture/#1-separation-of-concerns","title":"1. Separation of Concerns","text":"Layer Responsibility Should NOT Commands User interface Contain business logic Agents Reasoning &amp; planning Execute code directly Workflows Orchestration Make decisions Skills Execution Reason about context Hooks Validation Block for long periods"},{"location":"betty-architecture/#2-composability","title":"2. Composability","text":"<p>Every layer should be composable: - Commands can invoke agents OR skills OR workflows - Agents can use skills OR workflows - Workflows chain skills - Skills are atomic and independent - Hooks can trigger any of the above</p>"},{"location":"betty-architecture/#3-auditability","title":"3. Auditability","text":"<p>Every layer produces audit trails: <pre><code>{\n  \"command\": \"/api-design\",\n  \"agent\": \"api.designer\",\n  \"workflow\": \"api_first_development.yaml\",\n  \"skills_executed\": [\n    {\"skill\": \"api.define\", \"status\": \"success\", \"duration_ms\": 234},\n    {\"skill\": \"api.validate\", \"status\": \"success\", \"duration_ms\": 456}\n  ],\n  \"hooks_triggered\": [\n    {\"hook\": \"validate-openapi-spec\", \"status\": \"pass\"}\n  ],\n  \"artifacts\": [\n    \"specs/user-service.openapi.yaml\",\n    \"src/models/user-service/User.ts\"\n  ]\n}\n</code></pre></p>"},{"location":"betty-architecture/#4-fail-fast-with-hooks","title":"4. Fail-Fast with Hooks","text":"<p>Hooks provide immediate feedback: - Invalid OpenAPI? Blocked at edit time, not commit time - Breaking change? Blocked at commit time, not production time - Invalid models? Blocked at generation time, not compile time</p>"},{"location":"betty-architecture/#5-progressive-enhancement","title":"5. Progressive Enhancement","text":"<p>Start simple, add layers as needed:</p> <p>Minimum (just skills): <pre><code>python skills/api.validate/api_validate.py specs/user.yaml\n</code></pre></p> <p>Better (add hooks): <pre><code>on_file_edit:\n  - command: api.validate {file_path}\n</code></pre></p> <p>Good (add workflows): <pre><code>steps:\n  - skill: api.define\n  - skill: api.validate\n  - skill: api.generate-models\n</code></pre></p> <p>Better (add agents): <pre><code>/api-design user-service  # Agent handles everything\n</code></pre></p> <p>Best (add commands): <pre><code>/api-design user-service  # One command, full automation\n</code></pre></p>"},{"location":"betty-architecture/#implementation-roadmap","title":"Implementation Roadmap","text":""},{"location":"betty-architecture/#phase-1-foundation-hooks-skills","title":"Phase 1: Foundation (Hooks + Skills)","text":"<p>Goal: Automatic validation as safety rails</p> <ol> <li>Create <code>hook.define</code> skill</li> <li>Create <code>api.validate</code> skill (Zalando guidelines)</li> <li>Create <code>api.define</code> skill (OpenAPI scaffolding)</li> <li>Generate hooks for automatic validation</li> </ol> <p>Deliverable: Editing <code>*.openapi.yaml</code> files automatically validates against Zalando guidelines.</p>"},{"location":"betty-architecture/#phase-2-orchestration-workflows","title":"Phase 2: Orchestration (Workflows)","text":"<p>Goal: Repeatable processes with audit trails</p> <ol> <li>Create <code>api.generate-models</code> skill (Modelina integration)</li> <li>Create <code>api.compatibility</code> skill (breaking change detection)</li> <li>Create <code>api_first_development.yaml</code> workflow</li> <li>Create <code>api_validation_suite.yaml</code> workflow</li> </ol> <p>Deliverable: Single workflow creates spec \u2192 validates \u2192 generates models \u2192 publishes.</p>"},{"location":"betty-architecture/#phase-3-interface-commands","title":"Phase 3: Interface (Commands)","text":"<p>Goal: User-friendly entry points</p> <ol> <li>Create <code>command.define</code> skill</li> <li>Register <code>/api-design</code> command</li> <li>Register <code>/api-validate</code> command</li> <li>Register <code>/api-migrate</code> command</li> </ol> <p>Deliverable: Users can type <code>/api-design service-name</code> and get complete API scaffolding.</p>"},{"location":"betty-architecture/#phase-4-intelligence-agents","title":"Phase 4: Intelligence (Agents)","text":"<p>Goal: Reasoning and iterative refinement</p> <ol> <li>Create <code>agent.define</code> skill</li> <li>Create <code>api.designer</code> agent</li> <li>Create <code>api.reviewer</code> agent</li> <li>Integrate agents with commands</li> </ol> <p>Deliverable: Agent iteratively refines API specs based on validation feedback until they pass all guidelines.</p>"},{"location":"betty-architecture/#key-insights","title":"Key Insights","text":"<ol> <li> <p>Hooks are the game-changer: They transform validation from a manual checklist item to an automatic guardrail.</p> </li> <li> <p>Skills are the foundation: Everything builds on skills. Get skills right, and the rest follows.</p> </li> <li> <p>Workflows provide repeatability: They're the difference between ad-hoc processes and engineering discipline.</p> </li> <li> <p>Agents add intelligence: They handle the \"figure it out\" tasks that workflows can't.</p> </li> <li> <p>Commands improve UX: They make complex operations feel simple.</p> </li> <li> <p>Layers enable progressive complexity: Start with skills, add layers as needed.</p> </li> </ol>"},{"location":"betty-architecture/#see-also","title":"See Also","text":"<ul> <li>Betty Skills Framework - Complete skill taxonomy</li> <li>API-Driven Development Guide - Detailed implementation guide</li> <li>Hooks Reference - Claude Code hooks documentation</li> <li>Agent Skills Overview - Claude Code agent documentation</li> </ul>"},{"location":"betty-framework-overview/","title":"Betty framework overview","text":""},{"location":"betty-framework-overview/#docsbetty-framework-overviewmd","title":"\ud83d\udcd8 <code>docs/betty-framework-overview.md</code>","text":""},{"location":"betty-framework-overview/#1-overview","title":"1. Overview","text":"<p>Explain the goal:</p> <p>Betty Framework is a self-bootstrapping skill system built on top of Claude Code. It can generate, validate, and register new Claude Code-compatible skills using its own skill chain.</p>"},{"location":"betty-framework-overview/#2-core-concepts","title":"2. Core Concepts","text":"Component Description Skill Atomic unit of functionality. Each lives under <code>/skills/&lt;name&gt;/</code> with its own manifest, SKILL.md, and handler script. Agent Higher-level process combining multiple skills into workflows. Registry JSON catalog at <code>/registry/skills.json</code> tracking every skill\u2019s metadata and status. Lifecycle <code>skill.create \u2192 skill.define \u2192 registry.update \u2192 (future) workflow.compose</code>."},{"location":"betty-framework-overview/#3-current-implemented-skills","title":"3. Current Implemented Skills","text":"Skill Purpose Key Files <code>skill.create</code> Scaffolds new skill folders and manifests. <code>skills/skill.create/skill_create.py</code>, <code>skill.yaml</code>, <code>SKILL.md</code> <code>skill.define</code> Validates and registers skill manifests. <code>skills/skill.define/skill_define.py</code>, <code>skill.yaml</code>, <code>SKILL.md</code> <code>registry.update</code> Updates <code>/registry/skills.json</code> for new or changed skills. <code>skills/registry.update/registry_update.py</code>, <code>skill.yaml</code>, <code>SKILL.md</code>"},{"location":"betty-framework-overview/#4-how-the-bootstrapping-loop-works","title":"4. How the Bootstrapping Loop Works","text":"<pre><code>[skill.create] \u2192 generates new skill folder + manifest\n       \u2193\n[skill.define] \u2192 validates the manifest\n       \u2193\n[registry.update] \u2192 adds it to registry/skills.json\n</code></pre> <p>Each skill calls the next as a subprocess so Betty can self-maintain.</p>"},{"location":"betty-framework-overview/#5-directory-layout","title":"5. Directory Layout","text":"<pre><code>betty-framework/\n\u251c\u2500\u2500 docs/\n\u2502   \u2514\u2500\u2500 betty-framework-overview.md\n\u251c\u2500\u2500 registry/\n\u2502   \u2514\u2500\u2500 skills.json\n\u251c\u2500\u2500 skills/\n\u2502   \u251c\u2500\u2500 skill.create/\n\u2502   \u251c\u2500\u2500 skill.define/\n\u2502   \u2514\u2500\u2500 registry.update/\n\u2514\u2500\u2500 tools/        (optional utilities)\n</code></pre>"},{"location":"betty-framework-overview/#6-running-locally","title":"6. Running Locally","text":"<pre><code># Create a new skill\npython skills/skill.create/skill_create.py workflow.compose \"Compose and orchestrate workflows\"\n\n# Validate a skill\npython skills/skill.define/skill_define.py skills/workflow.compose/skill.yaml\n\n# Update registry explicitly\npython skills/registry.update/registry_update.py skills/workflow.compose/skill.yaml\n</code></pre>"},{"location":"betty-framework-overview/#7-next-milestones","title":"7. Next Milestones","text":"<ul> <li>Add <code>workflow.compose</code> to orchestrate multi-step operations.</li> <li>Package everything into a Claude Code plugin (<code>plugin.yaml</code>) so <code>/skill/create</code> etc. run natively inside Claude.</li> <li>Add documentation generation (<code>generate.docs</code> skill) to automate SKILL.md creation.</li> </ul>"},{"location":"claude-code-router-integration/","title":"Integrating Claude Code Router with Betty","text":""},{"location":"claude-code-router-integration/#executive-summary","title":"Executive Summary","text":"<p>Claude Code Router (by musistudio) is an open-source proxy that sits between Claude Code and LLM providers, enabling Betty agents to use any LLM without any code changes to Betty itself.</p> <p>Repository: https://github.com/musistudio/claude-code-router (20k+ stars)</p> <p>This is the simplest and most elegant solution for multi-LLM support in Betty - it's essentially \"Path 3\" from our analysis, but already implemented and production-ready.</p>"},{"location":"claude-code-router-integration/#how-claude-code-router-works","title":"How Claude Code Router Works","text":""},{"location":"claude-code-router-integration/#architecture-overview","title":"Architecture Overview","text":"<pre><code>Claude Code CLI\n    \u2193 (API requests)\nClaude Code Router Proxy \u2190 You configure this!\n    \u2193 (routes to)\n\u250c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u252c\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2510\n\u2502  OpenRouter \u2502  DeepSeek    \u2502  Ollama    \u2502  Gemini \u2502\n\u2514\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2534\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2518\n    \u2193 (models run Betty's agent reasoning)\nBetty Framework\n    \u2193 (executes)\nSkills (unchanged)\n</code></pre> <p>Key Insight: The router is transparent to both Claude Code and Betty. It intercepts HTTP requests to Anthropic's API and routes them to configured providers.</p>"},{"location":"claude-code-router-integration/#what-gets-routed","title":"What Gets Routed","text":"<p>When Betty agents run in Claude Code: 1. Claude Code makes API calls to <code>api.anthropic.com</code> 2. Router intercepts these calls 3. Router transforms request format for target provider (OpenAI, DeepSeek, etc.) 4. Target LLM processes the request (agent reasoning, skill orchestration) 5. Router transforms response back to Claude Code format 6. Claude Code receives response and continues normally</p> <p>Betty is completely unaware that a different LLM is being used!</p>"},{"location":"claude-code-router-integration/#installation-setup","title":"Installation &amp; Setup","text":""},{"location":"claude-code-router-integration/#step-1-install-claude-code-router","title":"Step 1: Install Claude Code Router","text":"<pre><code># Install globally via npm\nnpm install -g @musistudio/claude-code-router\n\n# Verify installation\nccr --version\n</code></pre>"},{"location":"claude-code-router-integration/#step-2-interactive-configuration","title":"Step 2: Interactive Configuration","text":"<pre><code># Run interactive setup\nccr code\n\n# This creates: ~/.claude-code-router/config.json\n</code></pre> <p>The interactive setup will ask: - Which providers you want to use (OpenRouter, DeepSeek, Ollama, etc.) - API keys for each provider - Default routing rules - Model preferences</p>"},{"location":"claude-code-router-integration/#step-3-configure-providers","title":"Step 3: Configure Providers","text":"<p>Edit <code>~/.claude-code-router/config.json</code>:</p> <pre><code>{\n  \"Providers\": [\n    {\n      \"name\": \"openrouter\",\n      \"api_base_url\": \"https://openrouter.ai/api/v1/chat/completions\",\n      \"api_key\": \"sk-or-v1-xxx\",\n      \"models\": [\n        \"anthropic/claude-3.5-sonnet\",\n        \"openai/gpt-4\",\n        \"google/gemini-2.5-pro-preview\",\n        \"meta-llama/llama-3.3-70b-instruct\"\n      ]\n    },\n    {\n      \"name\": \"deepseek\",\n      \"api_base_url\": \"https://api.deepseek.com/chat/completions\",\n      \"api_key\": \"sk-xxx\",\n      \"models\": [\n        \"deepseek-chat\",\n        \"deepseek-reasoner\"\n      ]\n    },\n    {\n      \"name\": \"ollama\",\n      \"api_base_url\": \"http://localhost:11434/api/chat\",\n      \"models\": [\n        \"llama3.3:70b\",\n        \"mistral-large\"\n      ]\n    }\n  ],\n  \"Router\": {\n    \"default\": \"openrouter,anthropic/claude-3.5-sonnet\",\n    \"background\": \"deepseek,deepseek-chat\",\n    \"think\": \"deepseek,deepseek-reasoner\",\n    \"longContext\": \"openrouter,google/gemini-2.5-pro-preview\"\n  }\n}\n</code></pre>"},{"location":"claude-code-router-integration/#step-4-launch-claude-code-via-router","title":"Step 4: Launch Claude Code via Router","text":"<pre><code># Instead of running 'claude' directly, run:\nccr code\n\n# Or set up an alias\nalias claude='ccr code'\n</code></pre>"},{"location":"claude-code-router-integration/#routing-strategies-for-betty-agents","title":"Routing Strategies for Betty Agents","text":""},{"location":"claude-code-router-integration/#context-based-routing","title":"Context-Based Routing","text":"<p>Claude Code Router supports four routing contexts that map perfectly to Betty's use cases:</p>"},{"location":"claude-code-router-integration/#1-default-general-agent-reasoning","title":"1. Default (General Agent Reasoning)","text":"<pre><code>\"Router\": {\n  \"default\": \"openrouter,openai/gpt-4\"\n}\n</code></pre> <p>Used for: Standard agent orchestration, skill selection, decision-making</p> <p>Betty agents: <code>api.designer</code>, <code>api.analyzer</code>, most general-purpose agents</p> <p>Recommended models: - <code>openai/gpt-4</code> - Best for complex reasoning - <code>anthropic/claude-3.5-sonnet</code> - Balanced performance - <code>deepseek-chat</code> - Cost-effective alternative</p>"},{"location":"claude-code-router-integration/#2-background-asynclong-running-tasks","title":"2. Background (Async/Long-Running Tasks)","text":"<pre><code>\"Router\": {\n  \"background\": \"deepseek,deepseek-chat\"\n}\n</code></pre> <p>Used for: Background skill execution, batch processing, low-priority tasks</p> <p>Betty use cases: - Bulk API validation across multiple specs - Registry updates - Documentation generation</p> <p>Recommended models: - <code>deepseek-chat</code> - Fast and cheap - <code>openai/gpt-3.5-turbo</code> - Cost-effective - Local models via Ollama - No API costs</p>"},{"location":"claude-code-router-integration/#3-think-complex-reasoning","title":"3. Think (Complex Reasoning)","text":"<pre><code>\"Router\": {\n  \"think\": \"deepseek,deepseek-reasoner\"\n}\n</code></pre> <p>Used for: Deep analysis, complex problem-solving, iterative refinement</p> <p>Betty agents with <code>reasoning_mode: iterative</code>: - <code>api.designer</code> - Iteratively refining API specs - Complex validation and error analysis - Breaking change impact assessment</p> <p>Recommended models: - <code>deepseek-reasoner</code> - Specialized reasoning model - <code>openai/o1</code> - Advanced reasoning - <code>anthropic/claude-opus-4</code> - Deep thinking</p>"},{"location":"claude-code-router-integration/#4-long-context-large-codebasesdocs","title":"4. Long Context (Large Codebases/Docs)","text":"<pre><code>\"Router\": {\n  \"longContext\": \"openrouter,google/gemini-2.5-pro-preview\"\n}\n</code></pre> <p>Used for: Processing large API specs, analyzing multiple files, comprehensive reviews</p> <p>Betty use cases: - Analyzing entire API portfolios - Cross-spec compatibility checks - Large-scale refactoring analysis</p> <p>Recommended models: - <code>google/gemini-2.5-pro-preview</code> - 2M+ token context - <code>anthropic/claude-3.5-sonnet</code> - 200k context - <code>cohere/command-r-plus</code> - 128k context</p>"},{"location":"claude-code-router-integration/#betty-specific-configuration-examples","title":"Betty-Specific Configuration Examples","text":""},{"location":"claude-code-router-integration/#example-1-cost-optimized-setup","title":"Example 1: Cost-Optimized Setup","text":"<p>Goal: Minimize costs while maintaining quality for Betty agents</p> <pre><code>{\n  \"Providers\": [\n    {\n      \"name\": \"openrouter\",\n      \"api_base_url\": \"https://openrouter.ai/api/v1/chat/completions\",\n      \"api_key\": \"sk-or-v1-xxx\",\n      \"models\": [\"anthropic/claude-3.5-sonnet\", \"openai/gpt-4\"]\n    },\n    {\n      \"name\": \"ollama\",\n      \"api_base_url\": \"http://localhost:11434/api/chat\",\n      \"models\": [\"llama3.3:70b\"]\n    }\n  ],\n  \"Router\": {\n    \"default\": \"ollama,llama3.3:70b\",           // Local model for most work\n    \"background\": \"ollama,llama3.3:70b\",        // Local for background tasks\n    \"think\": \"openrouter,anthropic/claude-3.5-sonnet\",  // Claude for complex reasoning\n    \"longContext\": \"openrouter,anthropic/claude-3.5-sonnet\"\n  }\n}\n</code></pre> <p>Cost profile: - 90% of operations: Free (local model) - 10% of operations: Paid (Claude for complex tasks) - Estimated savings: 85-95%</p>"},{"location":"claude-code-router-integration/#example-2-quality-first-setup","title":"Example 2: Quality-First Setup","text":"<p>Goal: Best possible results for Betty agents</p> <pre><code>{\n  \"Providers\": [\n    {\n      \"name\": \"openrouter\",\n      \"api_base_url\": \"https://openrouter.ai/api/v1/chat/completions\",\n      \"api_key\": \"sk-or-v1-xxx\",\n      \"models\": [\n        \"openai/gpt-4\",\n        \"openai/o1\",\n        \"anthropic/claude-opus-4\",\n        \"google/gemini-2.5-pro-preview\"\n      ]\n    }\n  ],\n  \"Router\": {\n    \"default\": \"openrouter,openai/gpt-4\",\n    \"background\": \"openrouter,openai/gpt-4\",\n    \"think\": \"openrouter,openai/o1\",\n    \"longContext\": \"openrouter,google/gemini-2.5-pro-preview\"\n  }\n}\n</code></pre> <p>Quality profile: - Best-in-class models for each task type - Optimal for production/enterprise use - Higher cost but best results</p>"},{"location":"claude-code-router-integration/#example-3-hybrid-setup-recommended","title":"Example 3: Hybrid Setup (Recommended)","text":"<p>Goal: Balance cost and quality for Betty workflows</p> <pre><code>{\n  \"Providers\": [\n    {\n      \"name\": \"openrouter\",\n      \"api_base_url\": \"https://openrouter.ai/api/v1/chat/completions\",\n      \"api_key\": \"sk-or-v1-xxx\",\n      \"models\": [\n        \"anthropic/claude-3.5-sonnet\",\n        \"openai/gpt-4\",\n        \"google/gemini-2.5-pro-preview\"\n      ]\n    },\n    {\n      \"name\": \"deepseek\",\n      \"api_base_url\": \"https://api.deepseek.com/chat/completions\",\n      \"api_key\": \"sk-xxx\",\n      \"models\": [\"deepseek-chat\", \"deepseek-reasoner\"]\n    }\n  ],\n  \"Router\": {\n    \"default\": \"deepseek,deepseek-chat\",                        // Fast &amp; cheap for standard work\n    \"background\": \"deepseek,deepseek-chat\",                     // Cheap for background\n    \"think\": \"deepseek,deepseek-reasoner\",                      // Specialized reasoning\n    \"longContext\": \"openrouter,google/gemini-2.5-pro-preview\"  // Best for large context\n  }\n}\n</code></pre> <p>Profile: - Most operations: DeepSeek (very cost-effective) - Complex reasoning: DeepSeek Reasoner - Large specs: Gemini (2M token context) - Best balance of cost/quality</p>"},{"location":"claude-code-router-integration/#dynamic-model-switching","title":"Dynamic Model Switching","text":""},{"location":"claude-code-router-integration/#using-model-command","title":"Using <code>/model</code> Command","text":"<p>While Betty is running, you can dynamically switch models using Claude Code's <code>/model</code> command:</p> <pre><code># In Claude Code session\n/model openrouter anthropic/claude-3.5-sonnet\n\n# Run Betty agent\n/api-design user-service\n\n# Switch to DeepSeek for cost savings\n/model deepseek deepseek-chat\n\n# Run another agent\n/api-validate user-service-spec\n</code></pre>"},{"location":"claude-code-router-integration/#model-selection-strategy","title":"Model Selection Strategy","text":"Betty Task Recommended Model Context Reasoning API Design (<code>api.designer</code>) GPT-4, Claude Sonnet <code>think</code> Complex reasoning, iterative refinement API Validation (<code>api.validate</code>) DeepSeek Chat, Claude Haiku <code>default</code> Simple validation, pattern matching Model Generation (<code>api.generate-models</code>) DeepSeek Chat, GPT-3.5 <code>background</code> Deterministic transformation Compatibility Analysis (<code>api.compatibility</code>) Claude Sonnet, GPT-4 <code>think</code> Complex diff analysis Bulk Operations Local Ollama, DeepSeek <code>background</code> Cost optimization Large API Portfolios Gemini 2.5 Pro, Claude Opus <code>longContext</code> Handle massive specs"},{"location":"claude-code-router-integration/#configuring-betty-agents-for-router","title":"Configuring Betty Agents for Router","text":""},{"location":"claude-code-router-integration/#option-a-no-changes-required-recommended","title":"Option A: No Changes Required (Recommended)","text":"<p>Betty agents work as-is with the router. The router handles everything transparently:</p> <pre><code># agents/api.designer/agent.yaml\n# No changes needed!\nname: api.designer\nversion: 0.1.0\nreasoning_mode: iterative\n\nskills_available:\n  - api.define\n  - api.validate\n</code></pre> <p>The router's <code>default</code> and <code>think</code> contexts will automatically be used based on task complexity.</p>"},{"location":"claude-code-router-integration/#option-b-add-router-hints-future-enhancement","title":"Option B: Add Router Hints (Future Enhancement)","text":"<p>If you want explicit control, you could extend agent manifests with routing hints:</p> <pre><code># agents/api.designer/agent.yaml\nname: api.designer\nversion: 0.2.0\nreasoning_mode: iterative\n\n# NEW: Router configuration hints\nrouter_preferences:\n  preferred_context: think          # Prefer 'think' context\n  min_context_window: 100000        # Require 100k+ context\n  preferred_providers:\n    - anthropic\n    - openai\n  fallback_strategy: use_default    # Fall back to 'default' if preferred unavailable\n\nskills_available:\n  - api.define\n  - api.validate\n</code></pre> <p>Note: This requires Betty to pass these hints to Claude Code (future work).</p>"},{"location":"claude-code-router-integration/#integration-steps-for-betty","title":"Integration Steps for Betty","text":""},{"location":"claude-code-router-integration/#current-state-immediate-use-no-code-changes","title":"Current State: Immediate Use (No Code Changes)","text":"<ol> <li> <p>Install Claude Code Router:    <pre><code>npm install -g @musistudio/claude-code-router\n</code></pre></p> </li> <li> <p>Configure providers (<code>~/.claude-code-router/config.json</code>):</p> </li> <li>Add OpenRouter, DeepSeek, Ollama, or other providers</li> <li> <p>Set routing rules for <code>default</code>, <code>background</code>, <code>think</code>, <code>longContext</code></p> </li> <li> <p>Launch Claude Code via router:    <pre><code>ccr code\n</code></pre></p> </li> <li> <p>Use Betty normally:    <pre><code># Betty commands work exactly as before\n/api-design user-service\n/api-validate user-service-spec\n</code></pre></p> </li> <li> <p>Betty agents now use configured LLMs - no code changes needed!</p> </li> </ol>"},{"location":"claude-code-router-integration/#future-enhancements-betty-aware-routing","title":"Future Enhancements: Betty-Aware Routing","text":""},{"location":"claude-code-router-integration/#1-add-router-configuration-to-betty","title":"1. Add Router Configuration to Betty","text":"<p>Create <code>betty/router_config.py</code>:</p> <pre><code>\"\"\"Router configuration for Betty agents.\"\"\"\n\nfrom typing import Dict, Any\n\n# Map Betty reasoning modes to router contexts\nREASONING_MODE_TO_CONTEXT = {\n    \"iterative\": \"think\",     # Iterative agents need deep reasoning\n    \"oneshot\": \"default\"      # Oneshot agents use standard context\n}\n\n# Map agent capabilities to preferred models\nCAPABILITY_TO_MODEL = {\n    \"Design RESTful APIs\": \"think\",           # Complex design work\n    \"Validate API specs\": \"default\",          # Standard validation\n    \"Generate code models\": \"background\",     # Simple transformation\n    \"Analyze compatibility\": \"think\",         # Complex analysis\n    \"Process large portfolios\": \"longContext\" # Large context needed\n}\n\ndef get_recommended_context(agent_manifest: Dict[str, Any]) -&gt; str:\n    \"\"\"Get recommended router context for agent.\"\"\"\n\n    # Check reasoning mode\n    mode = agent_manifest.get(\"reasoning_mode\", \"oneshot\")\n    base_context = REASONING_MODE_TO_CONTEXT.get(mode, \"default\")\n\n    # Check capabilities\n    capabilities = agent_manifest.get(\"capabilities\", [])\n    for capability in capabilities:\n        if \"large\" in capability.lower() or \"portfolio\" in capability.lower():\n            return \"longContext\"\n        if \"complex\" in capability.lower() or \"design\" in capability.lower():\n            return \"think\"\n\n    return base_context\n</code></pre>"},{"location":"claude-code-router-integration/#2-add-routing-metadata-to-agent-manifests","title":"2. Add Routing Metadata to Agent Manifests","text":"<p>Extend agent schema to include router hints:</p> <pre><code># agents/api.designer/agent.yaml\nname: api.designer\nversion: 0.3.0\n\n# Standard fields\nreasoning_mode: iterative\nskills_available: [api.define, api.validate]\n\n# NEW: Router metadata\nmetadata:\n  router:\n    preferred_context: think\n    min_tokens: 100000\n    preferred_providers: [anthropic, openai]\n    cost_tier: standard  # budget|standard|premium\n\n  complexity:\n    reasoning_intensity: high\n    context_window_needs: medium\n    iteration_likelihood: high\n</code></pre>"},{"location":"claude-code-router-integration/#3-create-router-configuration-skill","title":"3. Create Router Configuration Skill","text":"<p>Create <code>skills/router.configure/</code> to generate optimal router configs:</p> <pre><code># Generate router config optimized for Betty\nbetty run router.configure --profile hybrid\n# Creates ~/.claude-code-router/config.json\n\n# Generate cost-optimized config\nbetty run router.configure --profile cost-optimized\n\n# Generate quality-first config\nbetty run router.configure --profile quality-first\n</code></pre>"},{"location":"claude-code-router-integration/#advanced-features","title":"Advanced Features","text":""},{"location":"claude-code-router-integration/#1-provider-specific-transformers","title":"1. Provider-Specific Transformers","text":"<p>Claude Code Router supports custom transformers to modify requests/responses:</p> <pre><code>{\n  \"Providers\": [\n    {\n      \"name\": \"custom-provider\",\n      \"api_base_url\": \"https://api.example.com/chat\",\n      \"transformer\": {\n        \"request\": {\n          \"headers\": {\n            \"X-Betty-Agent\": \"{agent_name}\"\n          },\n          \"body\": {\n            \"custom_field\": \"value\"\n          }\n        },\n        \"response\": {\n          \"map\": {\n            \"content\": \"choices[0].message.content\"\n          }\n        }\n      }\n    }\n  ]\n}\n</code></pre> <p>Betty use case: Add Betty-specific metadata to LLM requests for tracking/analytics.</p>"},{"location":"claude-code-router-integration/#2-fallback-chains","title":"2. Fallback Chains","text":"<p>Configure automatic fallback if primary provider fails:</p> <pre><code>{\n  \"Router\": {\n    \"default\": \"openrouter,openai/gpt-4\",\n    \"fallback\": [\n      \"openrouter,anthropic/claude-3.5-sonnet\",\n      \"deepseek,deepseek-chat\",\n      \"ollama,llama3.3:70b\"\n    ]\n  }\n}\n</code></pre>"},{"location":"claude-code-router-integration/#3-cost-tracking","title":"3. Cost Tracking","text":"<p>Router can log all requests for cost analysis:</p> <pre><code>{\n  \"Logging\": {\n    \"enabled\": true,\n    \"log_file\": \"~/.claude-code-router/usage.log\",\n    \"include_costs\": true\n  }\n}\n</code></pre> <p>Betty enhancement: Aggregate costs per agent/skill for budget tracking.</p>"},{"location":"claude-code-router-integration/#benefits-for-betty","title":"Benefits for Betty","text":""},{"location":"claude-code-router-integration/#1-zero-code-changes","title":"1. Zero Code Changes","text":"<ul> <li>Betty works exactly as before</li> <li>No modifications to agent manifests</li> <li>No changes to skill implementations</li> <li>Drop-in replacement for Claude</li> </ul>"},{"location":"claude-code-router-integration/#2-cost-optimization","title":"2. Cost Optimization","text":"<ul> <li>Route simple tasks to cheap models (DeepSeek, local Ollama)</li> <li>Route complex reasoning to premium models (GPT-4, Claude Opus)</li> <li>Estimated savings: 70-90% vs. all-Claude workflow</li> </ul>"},{"location":"claude-code-router-integration/#3-model-diversity","title":"3. Model Diversity","text":"<ul> <li>Use best model for each task type</li> <li>Test agents with multiple models</li> <li>Avoid vendor lock-in</li> <li>Access latest models instantly</li> </ul>"},{"location":"claude-code-router-integration/#4-local-development","title":"4. Local Development","text":"<ul> <li>Use Ollama for offline development</li> <li>No API costs during testing</li> <li>Faster iteration cycles</li> <li>Full privacy (data never leaves your machine)</li> </ul>"},{"location":"claude-code-router-integration/#5-enterprise-features","title":"5. Enterprise Features","text":"<ul> <li>Custom model deployment support</li> <li>On-premises LLM routing</li> <li>Compliance with data residency requirements</li> <li>Audit trails via router logging</li> </ul>"},{"location":"claude-code-router-integration/#testing-strategy","title":"Testing Strategy","text":""},{"location":"claude-code-router-integration/#phase-1-validation-week-1","title":"Phase 1: Validation (Week 1)","text":"<pre><code># 1. Install router\nnpm install -g @musistudio/claude-code-router\n\n# 2. Configure with DeepSeek (cheap for testing)\nccr code  # Interactive setup\n\n# 3. Test existing Betty workflows\nccr code\n&gt; /api-design test-service\n&gt; /api-validate test-service-spec\n\n# 4. Verify outputs match Claude-generated results\n</code></pre>"},{"location":"claude-code-router-integration/#phase-2-multi-model-testing-week-2","title":"Phase 2: Multi-Model Testing (Week 2)","text":"<pre><code># Test matrix\nModels to test:\n  - anthropic/claude-3.5-sonnet (baseline)\n  - openai/gpt-4 (comparison)\n  - deepseek-chat (cost optimization)\n  - llama3.3:70b via Ollama (local)\n\nBetty agents to test:\n  - api.designer (iterative, complex)\n  - api.validator (oneshot, simple)\n  - api.compatibility (oneshot, analytical)\n\nMetrics:\n  - Output quality (subjective evaluation)\n  - Cost per operation\n  - Latency\n  - Success rate\n</code></pre>"},{"location":"claude-code-router-integration/#phase-3-production-rollout-week-3-4","title":"Phase 3: Production Rollout (Week 3-4)","text":"<pre><code># 1. Deploy recommended hybrid config\n# 2. Monitor usage and costs\n# 3. Tune routing rules based on performance\n# 4. Document best practices\n</code></pre>"},{"location":"claude-code-router-integration/#limitations-considerations","title":"Limitations &amp; Considerations","text":""},{"location":"claude-code-router-integration/#1-provider-compatibility","title":"1. Provider Compatibility","text":"<ul> <li>Not all providers support all Claude features (tools, vision, etc.)</li> <li>Some transformers may lose fidelity</li> <li>Test thoroughly with each provider</li> </ul>"},{"location":"claude-code-router-integration/#2-context-window-differences","title":"2. Context Window Differences","text":"<ul> <li>GPT-4: 128k tokens</li> <li>Claude Sonnet: 200k tokens</li> <li>Gemini 2.5: 2M+ tokens</li> <li>Ensure provider can handle your spec sizes</li> </ul>"},{"location":"claude-code-router-integration/#3-prompt-engineering-differences","title":"3. Prompt Engineering Differences","text":"<ul> <li>Models may interpret agent instructions differently</li> <li>Some tuning may be needed for optimal results</li> <li>Claude-specific prompts may not translate perfectly</li> </ul>"},{"location":"claude-code-router-integration/#4-cost-variability","title":"4. Cost Variability","text":"<ul> <li>Pricing changes frequently across providers</li> <li>Monitor costs and adjust routing as needed</li> <li>Set up billing alerts</li> </ul>"},{"location":"claude-code-router-integration/#5-rate-limits","title":"5. Rate Limits","text":"<ul> <li>Each provider has different rate limits</li> <li>Configure appropriate retry logic</li> <li>Consider multiple providers for high-volume use</li> </ul>"},{"location":"claude-code-router-integration/#recommended-next-steps","title":"Recommended Next Steps","text":""},{"location":"claude-code-router-integration/#immediate-this-week","title":"Immediate (This Week)","text":"<ol> <li>\u2705 Install Claude Code Router: <code>npm install -g @musistudio/claude-code-router</code></li> <li>\u2705 Test with DeepSeek (cheap, fast): Configure and validate</li> <li>\u2705 Run existing Betty workflows: Verify compatibility</li> </ol>"},{"location":"claude-code-router-integration/#short-term-next-2-weeks","title":"Short-term (Next 2 Weeks)","text":"<ol> <li>Configure hybrid setup (DeepSeek + OpenRouter)</li> <li>Test all Betty agents with multiple models</li> <li>Document optimal routing strategies</li> <li>Measure cost savings vs. Claude-only</li> </ol>"},{"location":"claude-code-router-integration/#medium-term-next-month","title":"Medium-term (Next Month)","text":"<ol> <li>Add router configuration to Betty docs</li> <li>Create <code>router.configure</code> skill for optimal setup</li> <li>Extend agent manifests with router hints</li> <li>Build cost tracking and analytics</li> </ol>"},{"location":"claude-code-router-integration/#long-term-ongoing","title":"Long-term (Ongoing)","text":"<ol> <li>Contribute back to claude-code-router project</li> <li>Share Betty-specific routing strategies with community</li> <li>Explore custom provider integrations</li> <li>Build Betty-specific router dashboard</li> </ol>"},{"location":"claude-code-router-integration/#conclusion","title":"Conclusion","text":"<p>Claude Code Router is the perfect solution for Betty's multi-LLM needs:</p> <p>\u2705 Zero code changes - Works immediately with existing Betty agents \u2705 Production-ready - 20k+ stars, active development, MIT license \u2705 Cost-effective - 70-90% savings with smart routing \u2705 Flexible - 8+ providers, local models, custom transformers \u2705 Enterprise-ready - On-premises support, audit logging, fallback chains</p> <p>This is Path 3 from our analysis, but already implemented and battle-tested.</p>"},{"location":"claude-code-router-integration/#resources","title":"Resources","text":"<ul> <li>Repository: https://github.com/musistudio/claude-code-router</li> <li>Documentation: https://claudecoderouter.com/</li> <li>OpenRouter: https://openrouter.ai/ (unified API for 200+ models)</li> <li>DeepSeek: https://platform.deepseek.com/ (cost-effective reasoning)</li> <li>Ollama: https://ollama.ai/ (local model hosting)</li> </ul>"},{"location":"claude-code-router-integration/#quick-start-commands","title":"Quick Start Commands","text":"<pre><code># Install\nnpm install -g @musistudio/claude-code-router\n\n# Setup\nccr code  # Follow interactive prompts\n\n# Use Betty as normal (now with any LLM!)\n/api-design user-service\n\n# Check which model is being used\n/model\n\n# Switch models dynamically\n/model deepseek deepseek-chat\n</code></pre> <p>That's it! Betty now supports any LLM with zero code changes.</p>"},{"location":"contributing/","title":"Contributing to Betty Framework","text":"<p>Thank you for your interest in contributing to Betty! This document provides guidelines and best practices for contributing to the project.</p>"},{"location":"contributing/#table-of-contents","title":"Table of Contents","text":"<ul> <li>Code of Conduct</li> <li>Getting Started</li> <li>Development Workflow</li> <li>Contribution Guidelines</li> <li>Style Guide</li> <li>Testing</li> <li>Documentation</li> <li>Pull Request Process</li> </ul>"},{"location":"contributing/#code-of-conduct","title":"Code of Conduct","text":"<p>Betty Framework is committed to providing a welcoming and inclusive environment for all contributors. Please be respectful, constructive, and professional in all interactions.</p>"},{"location":"contributing/#getting-started","title":"Getting Started","text":""},{"location":"contributing/#prerequisites","title":"Prerequisites","text":"<ul> <li>Python 3.11 or newer</li> <li>Git</li> <li>PyYAML (<code>pip install pyyaml</code>)</li> <li>Basic understanding of YAML and Python</li> <li>Familiarity with Claude Code is helpful but not required</li> </ul>"},{"location":"contributing/#setting-up-your-development-environment","title":"Setting Up Your Development Environment","text":"<ol> <li>Fork the repository on GitHub</li> <li>Clone your fork locally:    <pre><code>git clone https://github.com/YOUR-USERNAME/betty.git\ncd betty\n</code></pre></li> <li>Install dependencies:    <pre><code>pip install pyyaml\n</code></pre></li> <li>Verify the installation by running a skill:    <pre><code>python skills/skill.create/skill_create.py --help\n</code></pre></li> </ol>"},{"location":"contributing/#development-workflow","title":"Development Workflow","text":""},{"location":"contributing/#creating-a-new-skill","title":"Creating a New Skill","text":"<p>Follow Betty's self-hosting philosophy by using existing skills to create new ones:</p> <pre><code># 1. Create the skill scaffold\npython skills/skill.create/skill_create.py \\\n  my.skill \\\n  \"Description of what this skill does\" \\\n  --inputs \"input1,input2\" \\\n  --outputs \"output1\"\n\n# 2. Implement the skill logic\n# Edit skills/my.skill/my_skill.py with your implementation\n\n# 3. Update the SKILL.md documentation\n# Edit skills/my.skill/SKILL.md with usage examples\n\n# 4. Validate the manifest\npython skills/skill.define/skill_define.py skills/my.skill/skill.yaml\n\n# 5. Test your skill\npython skills/my.skill/my_skill.py &lt;test-args&gt;\n\n# 6. Update the registry\npython skills/registry.update/registry_update.py skills/my.skill/skill.yaml\n</code></pre>"},{"location":"contributing/#creating-a-new-agent","title":"Creating a New Agent","text":"<pre><code># 1. Create the agent directory and manifest\nmkdir -p agents/my.agent\n\n# 2. Create agent.yaml following the agent schema\n# See docs/betty-architecture.md for agent manifest structure\n\n# 3. Validate and register\npython skills/agent.define/agent_define.py agents/my.agent/agent.yaml\n\n# 4. Create agent documentation\n# Create agents/my.agent/README.md following the agent template\n</code></pre>"},{"location":"contributing/#creating-a-new-command-or-hook","title":"Creating a New Command or Hook","text":"<pre><code># For commands:\npython skills/command.define/command_define.py commands/my-command.yaml\n\n# For hooks:\npython skills/hook.register/hook_register.py hooks/my-hook.yaml\n</code></pre>"},{"location":"contributing/#contribution-guidelines","title":"Contribution Guidelines","text":""},{"location":"contributing/#general-principles","title":"General Principles","text":"<ol> <li>Structure over improvisation \u2013 Follow Betty's established patterns and conventions</li> <li>Self-documenting \u2013 Code should be clear, with comprehensive documentation</li> <li>Test thoroughly \u2013 Test all code paths and edge cases</li> <li>Audit trail \u2013 All operations should be logged appropriately</li> </ol>"},{"location":"contributing/#naming-conventions","title":"Naming Conventions","text":"<ul> <li>Skills: Lowercase with dot notation (e.g., <code>api.validate</code>, <code>skill.create</code>)</li> <li>Format: <code>&lt;domain&gt;.&lt;action&gt;</code></li> <li>Domain examples: <code>api</code>, <code>skill</code>, <code>workflow</code>, <code>agent</code>, <code>hook</code></li> <li> <p>Action examples: <code>create</code>, <code>validate</code>, <code>define</code>, <code>update</code></p> </li> <li> <p>Agents: Lowercase with dot notation (e.g., <code>api.designer</code>, <code>api.analyzer</code>)</p> </li> <li> <p>Format: <code>&lt;domain&gt;.&lt;role&gt;</code></p> </li> <li> <p>Commands: Slash prefix with kebab-case (e.g., <code>/api-design</code>, <code>/validate-spec</code>)</p> </li> <li> <p>Hooks: Kebab-case descriptive names (e.g., <code>validate-openapi-specs</code>, <code>prevent-breaking-changes</code>)</p> </li> <li> <p>Files: Snake_case for Python files, UPPERCASE for documentation markers</p> </li> <li>Python: <code>skill_create.py</code>, <code>api_validate.py</code></li> <li>Docs: <code>SKILL.md</code>, <code>README.md</code></li> </ul>"},{"location":"contributing/#manifest-requirements","title":"Manifest Requirements","text":"<p>Every skill MUST include:</p> <ol> <li>skill.yaml \u2013 Manifest with:</li> <li><code>name</code>: Unique identifier</li> <li><code>version</code>: Semantic version (e.g., <code>0.1.0</code>)</li> <li><code>description</code>: Clear, concise description (20+ characters)</li> <li><code>inputs</code>: Array of input parameters with types and descriptions</li> <li><code>outputs</code>: Array of output artifacts</li> <li><code>dependencies</code>: Array of required skills (use <code>[]</code> if none)</li> <li> <p><code>status</code>: <code>draft</code> or <code>active</code></p> </li> <li> <p>SKILL.md \u2013 Documentation with:</p> </li> <li>Purpose and overview</li> <li>Usage instructions with examples</li> <li>Input/output descriptions</li> <li>Integration examples</li> <li> <p>Common errors and troubleshooting</p> </li> <li> <p>Implementation file \u2013 Python script (or other runtime) that:</p> </li> <li>Accepts arguments via command line</li> <li>Validates inputs properly</li> <li>Provides clear error messages</li> <li>Returns structured output (JSON when possible)</li> <li>Logs operations appropriately</li> </ol>"},{"location":"contributing/#required-fields-in-manifests","title":"Required Fields in Manifests","text":""},{"location":"contributing/#skill-manifest-skillyaml","title":"Skill Manifest (skill.yaml)","text":"<pre><code>name: domain.action\nversion: 0.1.0\ndescription: \"Clear description of what this skill does (minimum 20 characters)\"\n\ninputs:\n  - name: param_name\n    type: string\n    required: true\n    description: \"What this parameter is for\"\n\noutputs:\n  - name: output_name\n    type: object\n    description: \"What this output contains\"\n\ndependencies: []  # or list of required skills\n\nstatus: draft  # or active\n\nentrypoints:  # optional but recommended\n  - command: /skill/domain/action\n    handler: domain_action.py\n    runtime: python\n    permissions: [filesystem:read, filesystem:write]\n\ntags: [category, feature]  # optional but recommended\n</code></pre>"},{"location":"contributing/#agent-manifest-agentyaml","title":"Agent Manifest (agent.yaml)","text":"<pre><code>name: domain.role\nversion: 0.1.0\ndescription: \"What this agent does\"\n\nreasoning_mode: iterative  # or oneshot\n\ncapabilities:\n  - \"Capability 1\"\n  - \"Capability 2\"\n\nskills_available:\n  - skill.name1\n  - skill.name2\n\nstatus: draft  # or active\n\ntags: [category, feature]\n</code></pre>"},{"location":"contributing/#style-guide","title":"Style Guide","text":""},{"location":"contributing/#python-code-style","title":"Python Code Style","text":"<ul> <li>Follow PEP 8 conventions</li> <li>Use type hints where appropriate</li> <li>Write docstrings for all functions and classes</li> <li>Use descriptive variable names</li> <li>Keep functions focused and small (single responsibility)</li> </ul>"},{"location":"contributing/#code-organization","title":"Code Organization","text":"<pre><code>#!/usr/bin/env python3\n\"\"\"\nskill_name.py \u2013 Brief description\nLonger description if needed.\n\"\"\"\n\nimport os\nimport sys\n# ... other imports\n\n# Add parent directory to path for imports\nsys.path.insert(0, os.path.abspath(os.path.join(os.path.dirname(__file__), \"../..\")))\n\nfrom betty.config import ...\nfrom betty.validation import ...\n# ... betty imports\n\n# Constants\nCONSTANT_NAME = \"value\"\n\n# Functions in logical order\ndef helper_function():\n    \"\"\"Helper function docstring.\"\"\"\n    pass\n\ndef main():\n    \"\"\"Main CLI entry point.\"\"\"\n    pass\n\nif __name__ == \"__main__\":\n    main()\n</code></pre>"},{"location":"contributing/#error-handling","title":"Error Handling","text":"<ul> <li>Use Betty's custom exceptions from <code>betty.errors</code></li> <li>Provide clear, actionable error messages</li> <li>Return structured error responses (JSON)</li> <li>Log errors appropriately using <code>betty.logging_utils</code></li> </ul> <pre><code>from betty.errors import SkillValidationError, format_error_response\n\ntry:\n    # ... operation\nexcept SkillValidationError as e:\n    logger.error(str(e))\n    error_info = format_error_response(e)\n    # ... handle error\n</code></pre>"},{"location":"contributing/#testing","title":"Testing","text":""},{"location":"contributing/#manual-testing","title":"Manual Testing","text":"<p>Before submitting a pull request:</p> <ol> <li> <p>Test the skill directly:    <pre><code>python skills/my.skill/my_skill.py &lt;valid-args&gt;\npython skills/my.skill/my_skill.py &lt;invalid-args&gt;  # Should fail gracefully\n</code></pre></p> </li> <li> <p>Validate the manifest:    <pre><code>python skills/skill.define/skill_define.py skills/my.skill/skill.yaml\n</code></pre></p> </li> <li> <p>Test in a workflow:    <pre><code># Create a test workflow that uses your skill\npython skills/workflow.compose/workflow_compose.py workflows/test_my_skill.yaml\n</code></pre></p> </li> <li> <p>Test with hooks (if applicable):    <pre><code># Test hook triggering\npython skills/hook.define/hook_define.py ...\n</code></pre></p> </li> </ol>"},{"location":"contributing/#integration-testing","title":"Integration Testing","text":"<p>Ensure your changes work with existing skills:</p> <pre><code># Test the complete skill lifecycle\npython skills/skill.create/skill_create.py test.integration \"Test skill\"\npython skills/skill.define/skill_define.py skills/test.integration/skill.yaml\npython skills/registry.update/registry_update.py skills/test.integration/skill.yaml\n</code></pre>"},{"location":"contributing/#documentation","title":"Documentation","text":""},{"location":"contributing/#skillmd-template","title":"SKILL.md Template","text":"<p>Every skill must have a comprehensive SKILL.md. See existing skills for examples:</p> <pre><code>---\nname: Skill Name\ndescription: Brief description\n---\n\n# skill.name\n\n## Overview\nWhat this skill does and why it exists.\n\n## Purpose\nSpecific problems this skill solves.\n\n## Usage\n```bash\npython skills/skill.name/skill_name.py &lt;args&gt;\n</code></pre>"},{"location":"contributing/#inputs","title":"Inputs","text":"Parameter Type Required Description ... ... ... ..."},{"location":"contributing/#outputs","title":"Outputs","text":"<p>Description of what the skill produces.</p>"},{"location":"contributing/#examples","title":"Examples","text":""},{"location":"contributing/#example-1-common-use-case","title":"Example 1: Common Use Case","text":"<p>...</p>"},{"location":"contributing/#integration","title":"Integration","text":"<p>How to use with workflows, hooks, etc.</p>"},{"location":"contributing/#common-errors","title":"Common Errors","text":"Error Cause Solution ... ... ..."},{"location":"contributing/#see-also","title":"See Also","text":"<ul> <li>Related skills</li> <li>Documentation links <pre><code>### Updating Existing Documentation\n\n- Keep README.md in sync with new features\n- Update architecture docs if adding new patterns\n- Add entries to glossary for new terminology\n- Update example workflows if changing skill interfaces\n\n## Pull Request Process\n\n### Before Submitting\n\n1. \u2705 Skill implemented and tested\n2. \u2705 Manifest (skill.yaml/agent.yaml) validated\n3. \u2705 SKILL.md or README.md created\n4. \u2705 Registry updated (skills.json/agents.json)\n5. \u2705 Code follows style guidelines\n6. \u2705 No breaking changes to existing skills (unless discussed)\n7. \u2705 Examples and tests provided\n\n### Submitting a Pull Request\n\n1. Create a feature branch:\n   ```bash\n   git checkout -b feature/my-new-skill\n   ```\n\n2. Make your changes following the guidelines above\n\n3. Commit with clear messages:\n   ```bash\n   git add .\n   git commit -m \"Add skill.name for &lt;purpose&gt;\n\n   - Implements &lt;feature&gt;\n   - Validates &lt;constraints&gt;\n   - Documented in SKILL.md\n   - Updated registry with active status\"\n   ```\n\n4. Push to your fork:\n   ```bash\n   git push origin feature/my-new-skill\n   ```\n\n5. Open a Pull Request on GitHub with:\n   - Clear title describing the change\n   - Description of what the PR adds/fixes\n   - Examples of usage\n   - Any breaking changes noted\n   - Screenshots/output samples if applicable\n\n### PR Review Process\n\n1. Maintainers will review your PR\n2. Address any requested changes\n3. Once approved, your PR will be merged\n4. Your contribution will be included in the next release\n\n### Commit Message Format\n</code></pre> :  <p> <ul> <li>Bullet points for key changes</li> <li>Reference issues if applicable (#123) <pre><code>Types: `feat`, `fix`, `docs`, `refactor`, `test`, `chore`\n\n## Status Lifecycle\n\nNew contributions should start as `draft`:\n\n```yaml\nstatus: draft\n</code></pre></li> </ul> <p>After review and testing, maintainers will promote to <code>active</code>:</p> <pre><code>status: active\n</code></pre>"},{"location":"contributing/#questions-or-need-help","title":"Questions or Need Help?","text":"<ul> <li>Check existing documentation in <code>docs/</code></li> <li>Review similar skills for patterns</li> <li>See the Glossary for terminology</li> <li>Open an issue for discussion before large changes</li> </ul>"},{"location":"contributing/#license","title":"License","text":"<p>By contributing to Betty Framework, you agree that your contributions will be licensed under the project's license.</p>"},{"location":"contributing/#quick-reference-checklist","title":"Quick Reference Checklist","text":"<p>Before submitting a PR for a new skill:</p> <ul> <li>[ ] Skill name follows <code>domain.action</code> pattern</li> <li>[ ] skill.yaml includes all required fields</li> <li>[ ] SKILL.md is comprehensive with examples</li> <li>[ ] Implementation handles errors gracefully</li> <li>[ ] Skill has been tested manually</li> <li>[ ] Manifest validated with skill.define</li> <li>[ ] Registry updated with registry.update</li> <li>[ ] Status set to <code>draft</code> initially</li> <li>[ ] Documentation is clear and complete</li> <li>[ ] Follows Python style guidelines</li> <li>[ ] Commit messages are descriptive</li> <li>[ ] PR description explains the change</li> </ul> <p>Thank you for contributing to Betty Framework! \ud83d\ude80</p>"},{"location":"glossary/","title":"Betty Framework Glossary","text":"<p>This glossary defines key terms used throughout the Betty Framework documentation.</p>"},{"location":"glossary/#a","title":"A","text":""},{"location":"glossary/#agent","title":"Agent","text":"<p>An intelligent orchestrator with reasoning capabilities that can iteratively execute skills based on context and feedback. Agents operate at Layer 2 of Betty's architecture and can be either iterative (retry on failure) or oneshot (single execution). Defined by <code>agent.yaml</code> manifests.</p> <p>Example: The <code>api.designer</code> agent uses <code>api.define</code>, <code>api.validate</code>, and <code>api.generate-models</code> skills iteratively to create compliant API specifications.</p>"},{"location":"glossary/#agent-registry","title":"Agent Registry","text":"<p>A JSON file (<code>/registry/agents.json</code>) that tracks all registered agents in the Betty ecosystem. Managed by the <code>agent.define</code> skill.</p>"},{"location":"glossary/#audit-log","title":"Audit Log","text":"<p>A record of all skill and workflow executions for compliance and debugging. Maintained by the <code>audit.log</code> skill (when available) and stored in workflow history.</p>"},{"location":"glossary/#asyncapi","title":"AsyncAPI","text":"<p>An industry-standard specification format for event-driven APIs, supported by Betty's API skills alongside OpenAPI.</p>"},{"location":"glossary/#b","title":"B","text":""},{"location":"glossary/#betty","title":"Betty","text":"<p>The Build Execution sTructured sYstem - a framework that transforms Claude Code's plugin system into a structured engineering discipline with five architectural layers.</p>"},{"location":"glossary/#blocking-hook","title":"Blocking Hook","text":"<p>A hook with <code>blocking: true</code> that prevents an operation from completing if the hook fails. Used for critical validations like preventing commits with breaking changes.</p>"},{"location":"glossary/#breaking-change","title":"Breaking Change","text":"<p>A modification to an API specification that is not backward compatible with previous versions. Detected by the <code>api.compatibility</code> skill.</p>"},{"location":"glossary/#c","title":"C","text":""},{"location":"glossary/#command","title":"Command","text":"<p>A user-facing slash command (e.g., <code>/api-design</code>) that provides an intuitive entry point to Betty capabilities. Commands operate at Layer 1 and can delegate to agents, workflows, or skills. Defined by command manifests and registered via <code>command.define</code>.</p>"},{"location":"glossary/#command-registry","title":"Command Registry","text":"<p>A JSON file (<code>/registry/commands.json</code>) that tracks all registered commands. Updated by the <code>command.define</code> skill.</p>"},{"location":"glossary/#claude-code","title":"Claude Code","text":"<p>Anthropic's official CLI for Claude - the runtime environment in which Betty operates. Betty extends Claude Code with structured workflows and governance.</p>"},{"location":"glossary/#d","title":"D","text":""},{"location":"glossary/#dependency","title":"Dependency","text":"<p>A required skill or external resource that another skill needs to function. Listed in skill manifests under the <code>dependencies</code> field.</p>"},{"location":"glossary/#draft-status","title":"Draft Status","text":"<p>A status (<code>draft</code>) indicating that a skill, agent, command, or hook is under development and not yet production-ready. Contrasts with <code>active</code> status.</p>"},{"location":"glossary/#e","title":"E","text":""},{"location":"glossary/#entrypoint","title":"Entrypoint","text":"<p>A CLI command definition in a skill manifest that specifies how to invoke the skill, including parameters, permissions, and runtime requirements.</p>"},{"location":"glossary/#event","title":"Event","text":"<p>A trigger point for hooks, such as <code>on_file_edit</code>, <code>on_commit</code>, or <code>on_push</code>. Hooks execute automatically when their associated event occurs.</p>"},{"location":"glossary/#f","title":"F","text":""},{"location":"glossary/#five-layer-model","title":"Five-Layer Model","text":"<p>Betty's architectural pattern consisting of: (1) Commands, (2) Agents, (3) Workflows, (4) Skills, and (5) Hooks. Each layer serves a distinct purpose and delegates to the layer below.</p>"},{"location":"glossary/#g","title":"G","text":""},{"location":"glossary/#governance","title":"Governance","text":"<p>The policy enforcement and validation layer (Layer 5) implemented through hooks and the <code>policy.enforce</code> skill. Ensures organizational standards are automatically applied.</p>"},{"location":"glossary/#guideline-set","title":"Guideline Set","text":"<p>A collection of API design rules (e.g., Zalando API Guidelines) that specifications must conform to. Used by <code>api.validate</code> and <code>api.define</code> skills.</p>"},{"location":"glossary/#h","title":"H","text":""},{"location":"glossary/#hook","title":"Hook","text":"<p>An automatic validation or action triggered by events like file edits, commits, or pushes. Hooks operate at Layer 5 and enforce governance policies. Created via <code>hook.define</code> or <code>hook.register</code>.</p>"},{"location":"glossary/#hook-registry","title":"Hook Registry","text":"<p>A JSON file (<code>/registry/hooks.json</code>) that tracks formalized hook manifests for version control and review. Different from <code>.claude/hooks.yaml</code> which is the live configuration.</p>"},{"location":"glossary/#i","title":"I","text":""},{"location":"glossary/#inputs","title":"Inputs","text":"<p>Parameters that a skill accepts. Defined in skill manifests with name, type, required status, and description.</p>"},{"location":"glossary/#iterative-agent","title":"Iterative Agent","text":"<p>An agent with <code>reasoning_mode: iterative</code> that can retry operations based on feedback. Useful for tasks requiring refinement, like API design with validation loops.</p>"},{"location":"glossary/#l","title":"L","text":""},{"location":"glossary/#layer","title":"Layer","text":"<p>One of the five architectural tiers in Betty: Commands, Agents, Workflows, Skills, or Hooks. Each layer has specific responsibilities and interfaces.</p>"},{"location":"glossary/#m","title":"M","text":""},{"location":"glossary/#manifest","title":"Manifest","text":"<p>A YAML configuration file that defines a skill, agent, command, or hook. Contains metadata, parameters, dependencies, and other specifications.</p>"},{"location":"glossary/#modelina","title":"Modelina","text":"<p>An AsyncAPI code generator used by the <code>api.generate-models</code> skill to create type-safe models from API specifications in multiple languages.</p>"},{"location":"glossary/#o","title":"O","text":""},{"location":"glossary/#oneshot-agent","title":"Oneshot Agent","text":"<p>An agent with <code>reasoning_mode: oneshot</code> that executes once without retries. Suitable for simple, deterministic tasks.</p>"},{"location":"glossary/#openapi","title":"OpenAPI","text":"<p>An industry-standard specification format for REST APIs (formerly Swagger). Supported by all Betty API skills.</p>"},{"location":"glossary/#outputs","title":"Outputs","text":"<p>Artifacts produced by a skill execution. Defined in skill manifests with name, type, and description.</p>"},{"location":"glossary/#p","title":"P","text":""},{"location":"glossary/#policy-enforcement","title":"Policy Enforcement","text":"<p>The process of validating operations against organizational rules before execution. Implemented by the <code>policy.enforce</code> skill and run automatically by <code>registry.update</code>.</p>"},{"location":"glossary/#plugin","title":"Plugin","text":"<p>In Claude Code terms, an extension that adds functionality. Betty itself can be packaged as a Claude Code plugin, and Betty skills are analogous to Claude Code plugins.</p>"},{"location":"glossary/#r","title":"R","text":""},{"location":"glossary/#registry","title":"Registry","text":"<p>A JSON file tracking registered components (skills, agents, commands, or hooks). Provides a single source of truth for the Betty ecosystem.</p>"},{"location":"glossary/#registry-update","title":"Registry Update","text":"<p>The process of adding or modifying entries in a registry. Centralized through the <code>registry.update</code> skill to ensure consistency and policy compliance.</p>"},{"location":"glossary/#reasoning-mode","title":"Reasoning Mode","text":"<p>The execution strategy for an agent: either <code>iterative</code> (with retries and feedback loops) or <code>oneshot</code> (single execution). Defined in agent manifests.</p>"},{"location":"glossary/#s","title":"S","text":""},{"location":"glossary/#skill","title":"Skill","text":"<p>An atomic unit of functionality - a testable, composable operation like validating an API spec or generating models. Skills operate at Layer 4 and are the building blocks of workflows and agents. Defined by <code>skill.yaml</code> manifests.</p>"},{"location":"glossary/#skill-registry","title":"Skill Registry","text":"<p>A JSON file (<code>/registry/skills.json</code>) containing all registered skills with their metadata, inputs, outputs, and dependencies.</p>"},{"location":"glossary/#status","title":"Status","text":"<p>The lifecycle state of a component: <code>draft</code> (under development) or <code>active</code> (production-ready). Controls whether components are used in production workflows.</p>"},{"location":"glossary/#t","title":"T","text":""},{"location":"glossary/#tags","title":"Tags","text":"<p>Categorization labels applied to skills, agents, commands, or hooks. Enable filtering and organization (e.g., <code>[\"api\", \"validation\", \"openapi\"]</code>).</p>"},{"location":"glossary/#thread-safe","title":"Thread-Safe","text":"<p>A property of operations that can be safely executed concurrently without data corruption. <code>registry.update</code> uses file locking to ensure thread-safe registry updates.</p>"},{"location":"glossary/#v","title":"V","text":""},{"location":"glossary/#validation","title":"Validation","text":"<p>The process of checking that a manifest, API specification, or workflow conforms to required schemas and rules. Core to Betty's quality assurance.</p>"},{"location":"glossary/#w","title":"W","text":""},{"location":"glossary/#workflow","title":"Workflow","text":"<p>A declarative YAML definition of multi-step processes that chain skills sequentially. Workflows operate at Layer 3 and enable complex operations to be defined once and reused. Executed by <code>workflow.compose</code>.</p>"},{"location":"glossary/#workflow-history","title":"Workflow History","text":"<p>A record of workflow executions stored in <code>/registry/workflow_history.json</code>. Tracks which workflows ran, when, and their outcomes.</p>"},{"location":"glossary/#y","title":"Y","text":""},{"location":"glossary/#yaml","title":"YAML","text":"<p>YAML Ain't Markup Language - the human-readable format used for all Betty manifests (skills, agents, workflows, commands, hooks).</p>"},{"location":"glossary/#z","title":"Z","text":""},{"location":"glossary/#zalando-api-guidelines","title":"Zalando API Guidelines","text":"<p>An enterprise-standard set of REST API design rules. Betty's API skills default to validating against these guidelines, though others (Google, Microsoft) are also supported.</p>"},{"location":"glossary/#related-documentation","title":"Related Documentation","text":"<ul> <li>Betty Architecture - Understanding the Five-Layer Model</li> <li>Contributing - How to contribute to Betty</li> <li>Developer Guide - Building and extending Betty</li> <li>Main README - Project overview and quickstart</li> </ul>"},{"location":"glossary/#terminology-conventions","title":"Terminology Conventions","text":"<p>Throughout Betty documentation: - Skill = lowercase with dot notation (e.g., <code>api.validate</code>) - Agent = lowercase with dot notation (e.g., <code>api.designer</code>) - Command = slash prefix (e.g., <code>/api-design</code>) - Hook = kebab-case descriptive name (e.g., <code>validate-openapi-specs</code>) - Registry = capitalized when referring to the concept, lowercase for file paths</p>"},{"location":"governance-architecture/","title":"Betty Framework Governance Architecture","text":""},{"location":"governance-architecture/#overview","title":"Overview","text":"<p>Betty's governance layer provides enterprise-grade control, compliance, and observability for AI-assisted engineering workflows.</p>"},{"location":"governance-architecture/#components","title":"Components","text":""},{"location":"governance-architecture/#1-policy-enforcement-policyenforce","title":"1. Policy Enforcement (<code>policy.enforce</code>)","text":"<p>Purpose: Validate skills, workflows, and operations against organizational policies before execution.</p> <p>Policy Types: - Naming Policies: Enforce skill naming conventions (e.g., <code>domain.action</code> format) - Permission Policies: Control filesystem, network, and API access - Dependency Policies: Restrict which skills can depend on others - Approval Policies: Require human review for sensitive operations - Compliance Policies: Enforce SOC2, ISO 27001, or custom standards</p> <p>Policy Definition Format (YAML): <pre><code>policy:\n  name: skill-naming-convention\n  version: 1.0.0\n  description: Enforce lowercase dot-separated naming\n  type: validation\n  rules:\n    - field: name\n      pattern: \"^[a-z][a-z0-9]*\\\\.[a-z][a-z0-9]*$\"\n      message: \"Skill names must be lowercase.dotted format\"\n  enforcement: blocking  # blocking | warning | audit\n  scope: [skills]\n</code></pre></p> <p>Policy Storage: <code>/registry/policies/*.yaml</code></p> <p>Enforcement Points: 1. Pre-creation: Before <code>skill.create</code> generates files 2. Pre-registration: Before <code>registry.update</code> commits to registry 3. Pre-execution: Before <code>workflow.compose</code> runs workflows 4. Continuous: Periodic audit of existing skills</p>"},{"location":"governance-architecture/#2-telemetry-observability-telemetrycapture","title":"2. Telemetry &amp; Observability (<code>telemetry.capture</code>)","text":"<p>Purpose: Collect runtime metrics, audit trails, and performance data for all Betty operations.</p> <p>Telemetry Events: - <code>skill.created</code> - New skill scaffolded - <code>skill.validated</code> - Manifest validation completed - <code>skill.registered</code> - Added to registry - <code>workflow.started</code> - Workflow execution began - <code>workflow.step.completed</code> - Individual step finished - <code>workflow.completed</code> - Full workflow finished - <code>policy.enforced</code> - Policy check performed - <code>policy.violated</code> - Policy violation detected</p> <p>Event Schema: <pre><code>{\n  \"event_type\": \"skill.created\",\n  \"timestamp\": \"2025-10-23T00:00:00Z\",\n  \"user\": \"engineer@riskexec.com\",\n  \"session_id\": \"uuid\",\n  \"skill_name\": \"data.transform\",\n  \"context\": {\n    \"tool\": \"claude-code\",\n    \"version\": \"1.0.0\"\n  },\n  \"outcome\": \"success\",\n  \"duration_ms\": 245\n}\n</code></pre></p> <p>Storage: - Events: <code>/registry/telemetry/events.jsonl</code> (JSON Lines format) - Metrics: <code>/registry/telemetry/metrics.json</code> (aggregated) - Audit Trail: <code>/registry/audit_log.json</code> (compliance-focused)</p> <p>Integrations: - Export to Datadog, New Relic, Splunk - Send to enterprise logging systems - Trigger alerts on policy violations</p>"},{"location":"governance-architecture/#3-version-control-registry-diff-registrydiff","title":"3. Version Control &amp; Registry Diff (<code>registry.diff</code>)","text":"<p>Purpose: Track changes to skills over time, enabling rollback and audit.</p> <p>Capabilities: - Compare registry versions - Show skill manifest deltas - Track who changed what and when - Support semantic versioning (0.1.0 \u2192 0.2.0) - Enable rollback to previous versions</p> <p>Registry History Format: <pre><code>{\n  \"version\": \"2025.10.23.001\",\n  \"timestamp\": \"2025-10-23T00:15:30Z\",\n  \"changes\": [\n    {\n      \"skill\": \"workflow.validate\",\n      \"action\": \"updated\",\n      \"field\": \"status\",\n      \"old_value\": \"draft\",\n      \"new_value\": \"active\",\n      \"changed_by\": \"claude-agent\"\n    }\n  ]\n}\n</code></pre></p>"},{"location":"governance-architecture/#4-approval-workflows","title":"4. Approval Workflows","text":"<p>Purpose: Require human approval for sensitive operations before execution.</p> <p>Approval Gates: - Creating skills that access production systems - Registering skills with elevated permissions - Executing workflows that modify critical infrastructure - Deploying skills to production environments</p> <p>Approval Process: 1. Operation submitted to approval queue 2. Notification sent to approvers (Slack, email, etc.) 3. Approver reviews context and approves/rejects 4. Operation proceeds or is blocked based on decision</p> <p>Storage: <code>/registry/approvals/*.json</code></p>"},{"location":"governance-architecture/#security-model","title":"Security Model","text":""},{"location":"governance-architecture/#permission-levels","title":"Permission Levels","text":"<p>Skills declare required permissions: <pre><code>permissions:\n  - filesystem.read\n  - filesystem.write\n  - network.http\n  - secrets.read\n</code></pre></p> <p>Policy enforces restrictions: - Skills cannot escalate permissions - Network access requires explicit approval - Secret access logged and audited - File access limited to Betty workspace by default</p>"},{"location":"governance-architecture/#audit-trail","title":"Audit Trail","text":"<p>Every operation creates immutable audit log entry: <pre><code>{\n  \"timestamp\": \"2025-10-23T00:00:00Z\",\n  \"operation\": \"registry.update\",\n  \"skill\": \"data.transform\",\n  \"user\": \"engineer@riskexec.com\",\n  \"ip_address\": \"10.0.1.42\",\n  \"outcome\": \"success\",\n  \"policy_checks\": [\n    {\"policy\": \"naming-convention\", \"result\": \"pass\"},\n    {\"policy\": \"permission-limits\", \"result\": \"pass\"}\n  ]\n}\n</code></pre></p>"},{"location":"governance-architecture/#compliance-features","title":"Compliance Features","text":""},{"location":"governance-architecture/#soc-2-requirements","title":"SOC 2 Requirements","text":"<ul> <li>\u2705 Access controls (permission system)</li> <li>\u2705 Change management (registry versioning)</li> <li>\u2705 Audit logging (telemetry + audit trail)</li> <li>\u2705 Monitoring (telemetry metrics)</li> <li>\u2705 Incident response (policy violation alerts)</li> </ul>"},{"location":"governance-architecture/#iso-27001-requirements","title":"ISO 27001 Requirements","text":"<ul> <li>\u2705 Information security controls (permission policies)</li> <li>\u2705 Access management (approval workflows)</li> <li>\u2705 Operations security (audit logging)</li> <li>\u2705 Compliance monitoring (policy enforcement)</li> </ul>"},{"location":"governance-architecture/#implementation-roadmap","title":"Implementation Roadmap","text":""},{"location":"governance-architecture/#phase-1-foundation-week-1","title":"Phase 1: Foundation (Week 1)","text":"<ul> <li>Implement <code>policy.enforce</code> skill</li> <li>Create policy schema and parser</li> <li>Build basic policy engine</li> </ul>"},{"location":"governance-architecture/#phase-2-observability-week-1-2","title":"Phase 2: Observability (Week 1-2)","text":"<ul> <li>Implement <code>telemetry.capture</code> skill</li> <li>Create event collection system</li> <li>Build metrics aggregation</li> </ul>"},{"location":"governance-architecture/#phase-3-versioning-week-2","title":"Phase 3: Versioning (Week 2)","text":"<ul> <li>Implement <code>registry.diff</code> skill</li> <li>Add version tracking to registry</li> <li>Build rollback mechanism</li> </ul>"},{"location":"governance-architecture/#phase-4-approval-system-week-3","title":"Phase 4: Approval System (Week 3)","text":"<ul> <li>Design approval workflow</li> <li>Implement approval queue</li> <li>Add notification system</li> </ul>"},{"location":"governance-architecture/#phase-5-integration-week-3-4","title":"Phase 5: Integration (Week 3-4)","text":"<ul> <li>Integrate governance into existing skills</li> <li>Add enforcement points</li> <li>Test end-to-end</li> </ul>"},{"location":"governance-architecture/#usage-examples","title":"Usage Examples","text":""},{"location":"governance-architecture/#enforcing-naming-policy","title":"Enforcing Naming Policy","text":"<pre><code># Define policy\ncat &gt; registry/policies/naming.yaml &lt;&lt;EOF\npolicy:\n  name: skill-naming-convention\n  rules:\n    - field: name\n      pattern: \"^[a-z][a-z0-9]*\\\\.[a-z][a-z0-9]*$\"\nEOF\n\n# Enforce before creation\npython skills/policy.enforce/policy_enforce.py --action create --skill-name \"BadName\"\n# \u274c Policy violation: skill-naming-convention\n#    Skill names must be lowercase.dotted format\n\npython skills/policy.enforce/policy_enforce.py --action create --skill-name \"data.transform\"\n# \u2705 Policy check passed\n</code></pre>"},{"location":"governance-architecture/#capturing-telemetry","title":"Capturing Telemetry","text":"<pre><code># Telemetry automatically captured by skills\npython skills/skill.create/skill_create.py data.transform \"Transform data\"\n# Creates skill + emits telemetry event\n\n# View telemetry\npython skills/telemetry.capture/telemetry_query.py --event-type skill.created --last 24h\n</code></pre>"},{"location":"governance-architecture/#viewing-registry-changes","title":"Viewing Registry Changes","text":"<pre><code># Show recent changes\npython skills/registry.diff/registry_diff.py --compare HEAD~1 HEAD\n\n# Output:\n# Changed: workflow.validate\n#   status: draft \u2192 active\n# Added: workflow.compose\n</code></pre>"},{"location":"governance-architecture/#next-steps","title":"Next Steps","text":"<ol> <li>Implement core governance skills</li> <li>Integrate with existing Betty skills</li> <li>Add policy templates for common use cases</li> <li>Build observability dashboards</li> <li>Document governance best practices</li> </ol>"},{"location":"multi-llm-integration-paths/","title":"Multi-LLM Integration Paths for Betty","text":"<p>UPDATE (2025-10-23): We identified an existing open-source solution that implements Path 3!</p> <p>Recommended Solution: Use claude-code-router (20k+ stars)</p> <p>See claude-code-router-integration.md for comprehensive integration guide.</p> <p>This document remains useful for understanding the architectural trade-offs.</p>"},{"location":"multi-llm-integration-paths/#executive-summary","title":"Executive Summary","text":"<p>Betty currently has zero direct LLM integration. All reasoning happens through Claude Code's runtime, which provides Claude as the underlying LLM. To enable Betty agents to use any LLM (OpenAI, Anthropic, local models, etc.), we need to introduce an abstraction layer.</p> <p>This document outlines three architectural approaches, from simplest to most comprehensive.</p>"},{"location":"multi-llm-integration-paths/#current-architecture-limitations","title":"Current Architecture Limitations","text":""},{"location":"multi-llm-integration-paths/#what-betty-does-today","title":"What Betty Does Today:","text":"<ul> <li>Orchestrates skills (deterministic Python functions)</li> <li>Defines agent patterns (YAML manifests describing what skills agents can use)</li> <li>Validates and registers components (skills, agents, workflows)</li> <li>Runs inside Claude Code as a framework</li> </ul>"},{"location":"multi-llm-integration-paths/#what-betty-does-not-do","title":"What Betty Does NOT Do:","text":"<ul> <li>\u274c Call LLM APIs directly (no Anthropic SDK, no OpenAI client)</li> <li>\u274c Manage model selection or routing</li> <li>\u274c Handle LLM authentication or rate limiting</li> <li>\u274c Provide reasoning capabilities (delegates to Claude Code)</li> </ul>"},{"location":"multi-llm-integration-paths/#the-dependency","title":"The Dependency:","text":"<pre><code>Betty Framework\n    \u2193 (runs inside)\nClaude Code IDE\n    \u2193 (provides)\nClaude LLM (for agent reasoning)\n</code></pre> <p>Problem: Betty agents can only reason via Claude because Claude Code only supports Claude.</p>"},{"location":"multi-llm-integration-paths/#three-paths-forward","title":"Three Paths Forward","text":""},{"location":"multi-llm-integration-paths/#path-1-llm-powered-skills-recommended-starting-point","title":"Path 1: LLM-Powered Skills \u2b50 Recommended Starting Point","text":"<p>Concept: Create skills that can call any LLM, while keeping agent orchestration via Claude Code.</p> <p>Architecture: <pre><code>Claude Code Agent (reasoning/planning)\n    \u2193 orchestrates\nBetty Skills\n    \u251c\u2500\u2500 api.define (deterministic)\n    \u251c\u2500\u2500 api.validate (deterministic)\n    \u2514\u2500\u2500 llm.query (NEW - calls any LLM)\n</code></pre></p> <p>Implementation:</p> <pre><code># skills/llm.query/skill.yaml\nname: llm.query\nversion: 0.1.0\ndescription: Query any LLM with a prompt and return structured results\n\ninputs:\n  - name: prompt\n    type: string\n    required: true\n  - name: model\n    type: string\n    required: false\n    default: gpt-4\n    options: [gpt-4, gpt-3.5-turbo, claude-opus-4, claude-sonnet-4, llama-3-70b]\n  - name: temperature\n    type: float\n    required: false\n    default: 0.7\n  - name: system_prompt\n    type: string\n    required: false\n\noutputs:\n  - name: response\n    type: string\n  - name: model_used\n    type: string\n  - name: tokens_used\n    type: object\n</code></pre> <pre><code># skills/llm.query/llm_query.py\nimport os\nimport sys\nimport json\nfrom typing import Dict, Any\n\n# Multi-LLM client (litellm, langchain, or custom)\nfrom litellm import completion\n\ndef query_llm(\n    prompt: str,\n    model: str = \"gpt-4\",\n    temperature: float = 0.7,\n    system_prompt: str | None = None\n) -&gt; Dict[str, Any]:\n    \"\"\"Query any LLM via unified interface.\"\"\"\n\n    messages = []\n    if system_prompt:\n        messages.append({\"role\": \"system\", \"content\": system_prompt})\n    messages.append({\"role\": \"user\", \"content\": prompt})\n\n    try:\n        response = completion(\n            model=model,\n            messages=messages,\n            temperature=temperature\n        )\n\n        return {\n            \"ok\": True,\n            \"response\": response.choices[0].message.content,\n            \"model_used\": response.model,\n            \"tokens_used\": {\n                \"prompt\": response.usage.prompt_tokens,\n                \"completion\": response.usage.completion_tokens,\n                \"total\": response.usage.total_tokens\n            }\n        }\n    except Exception as e:\n        return {\n            \"ok\": False,\n            \"error\": str(e),\n            \"model\": model\n        }\n\ndef main():\n    if len(sys.argv) &lt; 3:\n        print(json.dumps({\n            \"ok\": False,\n            \"error\": \"Usage: llm.query &lt;prompt&gt; &lt;model&gt;\"\n        }, indent=2))\n        sys.exit(1)\n\n    prompt = sys.argv[1]\n    model = sys.argv[2] if len(sys.argv) &gt; 2 else \"gpt-4\"\n\n    result = query_llm(prompt, model)\n    print(json.dumps(result, indent=2))\n    sys.exit(0 if result[\"ok\"] else 1)\n\nif __name__ == \"__main__\":\n    main()\n</code></pre> <p>Usage in Agents:</p> <pre><code># agents/api.analyzer/agent.yaml\nname: api.analyzer\nversion: 0.1.0\nreasoning_mode: oneshot\n\nskills_available:\n  - api.validate\n  - llm.query  # Can now query any LLM!\n\ncapabilities:\n  - Analyze OpenAPI specs using multiple LLMs\n  - Compare responses from different models\n  - Generate insights using best model for task\n</code></pre> <p>Pros: - \u2705 Easy to implement (single new skill) - \u2705 Works with existing Betty architecture - \u2705 Agents still orchestrated by Claude (no breaking changes) - \u2705 Can use any LLM via skills (OpenAI, local models, etc.)</p> <p>Cons: - \u26a0\ufe0f Agent reasoning still happens via Claude - \u26a0\ufe0f Not suitable for replacing agent orchestration layer</p> <p>Best For: - Hybrid workflows (Claude orchestrates, but delegates specific tasks to other LLMs) - Testing/comparing different models for specific tasks - Cost optimization (use cheaper models for simple queries)</p>"},{"location":"multi-llm-integration-paths/#path-2-betty-agent-runtime-medium-complexity","title":"Path 2: Betty Agent Runtime \ud83d\udd27 Medium Complexity","text":"<p>Concept: Build Betty's own agent execution engine that can use any LLM for reasoning.</p> <p>Architecture: <pre><code>Betty CLI (new)\n    \u2193\nBetty Agent Runtime (new - selects LLM)\n    \u2193 reasons with\nAny LLM (OpenAI, Anthropic, Local)\n    \u2193 orchestrates\nBetty Skills (existing)\n</code></pre></p> <p>Components to Build:</p> <ol> <li> <p>LLM Router (<code>betty/router.py</code>): <pre><code>from abc import ABC, abstractmethod\nfrom typing import List, Dict, Any\n\nclass LLMProvider(ABC):\n    @abstractmethod\n    def complete(self, messages: List[Dict], **kwargs) -&gt; str:\n        pass\n\nclass AnthropicProvider(LLMProvider):\n    def __init__(self, api_key: str):\n        from anthropic import Anthropic\n        self.client = Anthropic(api_key=api_key)\n\n    def complete(self, messages: List[Dict], **kwargs) -&gt; str:\n        response = self.client.messages.create(\n            model=kwargs.get(\"model\", \"claude-opus-4\"),\n            messages=messages,\n            max_tokens=kwargs.get(\"max_tokens\", 4096)\n        )\n        return response.content[0].text\n\nclass OpenAIProvider(LLMProvider):\n    def __init__(self, api_key: str):\n        from openai import OpenAI\n        self.client = OpenAI(api_key=api_key)\n\n    def complete(self, messages: List[Dict], **kwargs) -&gt; str:\n        response = self.client.chat.completions.create(\n            model=kwargs.get(\"model\", \"gpt-4\"),\n            messages=messages\n        )\n        return response.choices[0].message.content\n\nclass LLMRouter:\n    \"\"\"Route agent tasks to appropriate LLM.\"\"\"\n\n    def __init__(self):\n        self.providers = {\n            \"anthropic\": AnthropicProvider(os.getenv(\"ANTHROPIC_API_KEY\")),\n            \"openai\": OpenAIProvider(os.getenv(\"OPENAI_API_KEY\")),\n        }\n\n    def select_provider(self, agent_config: Dict) -&gt; LLMProvider:\n        \"\"\"Select LLM based on agent configuration.\"\"\"\n        preferred = agent_config.get(\"llm_preference\", \"anthropic\")\n        return self.providers.get(preferred, self.providers[\"anthropic\"])\n</code></pre></p> </li> <li> <p>Agent Executor (<code>betty/executor.py</code>): <pre><code>class AgentExecutor:\n    \"\"\"Execute agents with any LLM.\"\"\"\n\n    def __init__(self, router: LLMRouter):\n        self.router = router\n        self.skill_runner = SkillRunner()\n\n    def run_agent(self, agent_name: str, task: str) -&gt; Dict[str, Any]:\n        \"\"\"Execute agent with configured LLM.\"\"\"\n\n        # Load agent manifest\n        manifest = load_agent_manifest(agent_name)\n\n        # Select LLM\n        provider = self.router.select_provider(manifest)\n\n        # Build agent prompt\n        prompt = self.build_agent_prompt(manifest, task)\n\n        # Execute with iterative loop\n        max_retries = manifest.get(\"error_handling\", {}).get(\"max_retries\", 3)\n        for attempt in range(max_retries + 1):\n            # LLM plans next steps\n            plan = provider.complete([\n                {\"role\": \"system\", \"content\": prompt},\n                {\"role\": \"user\", \"content\": task}\n            ])\n\n            # Execute planned skills\n            results = self.execute_skills(plan)\n\n            # Check if successful\n            if all(r[\"ok\"] for r in results):\n                return {\"ok\": True, \"results\": results}\n\n            # Iterative refinement\n            if manifest[\"reasoning_mode\"] == \"iterative\":\n                task = self.refine_task(task, results)\n            else:\n                break\n\n        return {\"ok\": False, \"error\": \"Max retries exceeded\"}\n</code></pre></p> </li> <li> <p>Agent Configuration (extend manifests): <pre><code># agents/api.designer/agent.yaml\nname: api.designer\nversion: 0.2.0\n\nllm_config:\n  primary_provider: openai\n  primary_model: gpt-4\n  fallback_provider: anthropic\n  fallback_model: claude-sonnet-4\n  reasoning_budget: high  # or low/medium\n\nreasoning_mode: iterative\nskills_available:\n  - api.define\n  - api.validate\n</code></pre></p> </li> <li> <p>CLI Entry Point (<code>betty/cli.py</code>): <pre><code>import click\nfrom betty.executor import AgentExecutor\nfrom betty.router import LLMRouter\n\n@click.group()\ndef cli():\n    \"\"\"Betty Framework CLI\"\"\"\n    pass\n\n@cli.command()\n@click.argument(\"agent_name\")\n@click.argument(\"task\")\ndef run(agent_name: str, task: str):\n    \"\"\"Run an agent with any LLM.\"\"\"\n    router = LLMRouter()\n    executor = AgentExecutor(router)\n    result = executor.run_agent(agent_name, task)\n\n    if result[\"ok\"]:\n        click.echo(\"Success!\")\n        click.echo(json.dumps(result[\"results\"], indent=2))\n    else:\n        click.echo(\"Failed:\", err=True)\n        click.echo(result[\"error\"], err=True)\n        sys.exit(1)\n\nif __name__ == \"__main__\":\n    cli()\n</code></pre></p> </li> </ol> <p>Usage: <pre><code># Run agent with OpenAI\nexport OPENAI_API_KEY=sk-...\nbetty run api.designer \"Design a user service API\"\n\n# Run agent with Anthropic\nexport ANTHROPIC_API_KEY=sk-ant-...\nbetty run api.analyzer \"Analyze the user service spec\"\n</code></pre></p> <p>Pros: - \u2705 Full control over LLM selection - \u2705 Can run Betty standalone (not dependent on Claude Code) - \u2705 Enables cost optimization and model comparison - \u2705 Works with local models (Ollama, etc.)</p> <p>Cons: - \u26a0\ufe0f Requires building agent execution engine - \u26a0\ufe0f Need to replicate Claude Code's agent orchestration logic - \u26a0\ufe0f More complex to maintain</p> <p>Best For: - Running Betty outside Claude Code - Production deployments with custom LLM requirements - Enterprise environments with specific model governance</p>"},{"location":"multi-llm-integration-paths/#path-3-claude-code-router-plugin-most-integrated","title":"Path 3: Claude Code Router Plugin \ud83d\ude80 Most Integrated","text":"<p>Concept: Extend Claude Code itself to support multiple LLMs via a router plugin.</p> <p>Architecture: <pre><code>Claude Code (extended)\n    \u2193\nClaude Code Router Plugin (NEW)\n    \u251c\u2500\u2500 Route to Claude (Anthropic)\n    \u251c\u2500\u2500 Route to OpenAI\n    \u251c\u2500\u2500 Route to Local Models\n    \u2514\u2500\u2500 Route based on task complexity\n    \u2193\nBetty Framework (unchanged)\n</code></pre></p> <p>This requires: 1. Understanding Claude Code's plugin architecture (if it exists) 2. Building a router that Claude Code can use before delegating to agents 3. Configuring Betty agents with model preferences that Claude Code respects</p> <p>Hypothetical Implementation:</p> <pre><code># .claude/config.yaml (new configuration)\nllm_router:\n  enabled: true\n  default_provider: anthropic\n\n  providers:\n    anthropic:\n      models: [claude-opus-4, claude-sonnet-4, claude-haiku-4-5]\n      api_key_env: ANTHROPIC_API_KEY\n\n    openai:\n      models: [gpt-4, gpt-3.5-turbo]\n      api_key_env: OPENAI_API_KEY\n\n    local:\n      models: [llama-3-70b, mistral-large]\n      endpoint: http://localhost:11434\n\n  routing_rules:\n    - agent_pattern: \"api.*\"\n      preferred_provider: openai\n      preferred_model: gpt-4\n\n    - agent_pattern: \"*.analyzer\"\n      preferred_provider: anthropic\n      preferred_model: claude-sonnet-4\n\n    - task_complexity: simple\n      preferred_provider: local\n      preferred_model: llama-3-70b\n</code></pre> <p>Pros: - \u2705 Seamless integration with Claude Code - \u2705 Betty remains unchanged (just configuration) - \u2705 All tools/features of Claude Code still work - \u2705 Centralized model governance</p> <p>Cons: - \u274c Requires Claude Code to support this (may not be possible) - \u274c Dependent on Anthropic's roadmap - \u274c May not be feasible if Claude Code is closed-source</p> <p>Best For: - If Anthropic adds multi-LLM support to Claude Code - Contributing to Claude Code's open-source development - Long-term vision where Claude Code becomes LLM-agnostic</p>"},{"location":"multi-llm-integration-paths/#recommendation","title":"Recommendation","text":""},{"location":"multi-llm-integration-paths/#start-with-path-1-plan-for-path-2","title":"Start with Path 1, Plan for Path 2","text":"<p>Phase 1 (Immediate): Implement <code>llm.query</code> skill - Add LiteLLM-based skill for querying any LLM - Keep Claude Code for agent orchestration - Enable hybrid workflows</p> <p>Phase 2 (Medium-term): Build Betty Agent Runtime - Implement <code>betty/router.py</code> and <code>betty/executor.py</code> - Add CLI for running agents standalone - Enable production deployments outside Claude Code</p> <p>Phase 3 (Long-term): Explore Claude Code Plugin - Monitor Claude Code's plugin ecosystem - Contribute to open-source efforts if applicable - Advocate for multi-LLM support in Claude Code</p>"},{"location":"multi-llm-integration-paths/#next-steps","title":"Next Steps","text":"<ol> <li> <p>Prototype <code>llm.query</code> skill:    <pre><code>betty create skill llm.query\n# Implement using LiteLLM\n</code></pre></p> </li> <li> <p>Test with existing agents:    <pre><code># Update api.designer to use llm.query for specific tasks\n</code></pre></p> </li> <li> <p>Design Betty Agent Runtime:</p> </li> <li>Sketch out <code>router.py</code> and <code>executor.py</code></li> <li>Define agent manifest extensions</li> <li> <p>Plan migration path</p> </li> <li> <p>Investigate Claude Code extensibility:</p> </li> <li>Research if Claude Code supports plugins</li> <li>Reach out to Anthropic developer relations</li> <li>Explore open-source contributions</li> </ol>"},{"location":"multi-llm-integration-paths/#references","title":"References","text":"<ul> <li>Betty Architecture: <code>/home/user/betty/docs/betty-architecture.md</code></li> <li>Agent Schema: <code>/home/user/betty/docs/agent-schema-reference.md</code></li> <li>Skill Creation: <code>/home/user/betty/skills/skill.create/</code></li> <li>LiteLLM: https://github.com/BerriAI/litellm (unified LLM interface)</li> </ul>"},{"location":"references/","title":"Betty Framework Reference Links","text":"<ul> <li>RiskExec Betty Marketplace (GitHub)</li> </ul>"},{"location":"references/#claude-code-reference-links","title":"Claude Code Reference Links","text":"<ul> <li>Claude Code CLI Reference</li> <li>Slash Commands</li> <li>Checkpointing</li> <li>Hooks</li> <li>Plugins Reference</li> <li>Plugins Overview</li> <li>Plugin Marketplaces</li> <li>Agent Skills Overview</li> <li>Agent Skills Best Practices</li> <li></li> </ul>"},{"location":"skills-framework/","title":"Betty Skills Framework","text":"<p>This document defines the complete taxonomy of skills that make up the Betty Framework. Each skill is implemented as a Claude Code-compatible plugin and published through the Betty Marketplace once certified.</p>"},{"location":"skills-framework/#1-core-definition-skills-the-betty-kernel","title":"1. Core Definition Skills (The Betty Kernel)","text":"Skill ID Description <code>agent.define</code> Create and validate agent manifests. <code>skill.define</code> Define, validate, and version skill manifests. <code>command.define</code> Register executable commands and their I/O schemas. <code>hook.define</code> Create pre- and post-execution hooks for skills and workflows. <code>context.schema</code> Define and validate structured context objects shared between skills. <code>evaluation.define</code> Define evaluation metrics and test conditions for skills."},{"location":"skills-framework/#2-runtime-execution-skills","title":"2. Runtime &amp; Execution Skills","text":"Skill ID Description <code>runtime.execute</code> Execute skills or workflows within the Claude Code runtime. <code>workflow.compose</code> Compose declarative, multi-step workflows. <code>hook.run</code> Execute pre- and post-execution hooks. <code>sandbox.run</code> Run commands in isolated, secure sandboxes. <code>policy.enforce</code> Enforce Betty governance policies during execution."},{"location":"skills-framework/#3-integration-marketplace-skills","title":"3. Integration &amp; Marketplace Skills","text":"Skill ID Description <code>plugin.install</code> Install and update Claude Code plugins from sources. <code>marketplace.sync</code> Sync available plugins from the RiskExec Marketplace. <code>registry.update</code> Update the Betty Skill Registry with new definitions. <code>dependency.graph</code> Generate dependency maps between skills and agents. <code>tool.register</code> Register external tools or APIs for use in workflows."},{"location":"skills-framework/#4-governance-observability-skills","title":"4. Governance &amp; Observability Skills","text":"Skill ID Description <code>audit.log</code> Log all skill and agent executions with structured metadata. <code>telemetry.capture</code> Collect runtime metrics for analysis and optimization. <code>provenance.track</code> Track data lineage across the SDLC. <code>qa.evaluate</code> Run QA checks and validation suites. <code>policy.validate</code> Validate outputs against organizational and compliance policies."},{"location":"skills-framework/#5-lifecycle-evolution-skills","title":"5. Lifecycle &amp; Evolution Skills","text":"Skill ID Description <code>bootstrap.project</code> Initialize new Betty projects and repositories. <code>update.self</code> Update Betty\u2019s own skills and core logic. <code>refactor.skill</code> Refactor and migrate skills to new versions. <code>archive.deprecated</code> Deactivate and archive outdated skills. <code>generate.docs</code> Automatically generate documentation from manifests."},{"location":"skills-framework/#6-meta-self-referential-skills-betty-bootstrapping-layer","title":"6. Meta &amp; Self-Referential Skills (Betty Bootstrapping Layer)","text":"Skill ID Description <code>skill.clone</code> Clone existing skill manifests. <code>skill.compose</code> Compose multiple skills into a composite skill. <code>skill.inspect</code> Inspect and summarize skill metadata. <code>skill.evaluate</code> Test and evaluate skill performance. <code>skill.publish</code> Publish skills to the Marketplace after validation."},{"location":"skills-framework/#notes","title":"Notes","text":"<ul> <li>Skills marked as core are required for any Betty-based project.</li> <li>Non-core skills can be installed independently as plugins.</li> <li>All skills will include manifests in <code>/skills/&lt;name&gt;/skill.yaml</code>.</li> <li>Each category will have a <code>README.md</code> describing its scope and current implementation status.</li> </ul>"},{"location":"skills-framework/#next-steps","title":"Next Steps","text":"<ol> <li>Scaffold each skill folder under <code>/skills/</code>.</li> <li>Create a minimal <code>skill.yaml</code> and <code>README.md</code> for each skill.</li> <li>Generate <code>/registry/skills.json</code> once all skills have placeholders.</li> </ol>"}]}