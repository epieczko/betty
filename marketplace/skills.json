{
  "marketplace_version": "1.0.0",
  "generated_at": "2025-10-23T19:40:03.537996+00:00",
  "description": "Betty Framework Certified Skills Marketplace",
  "total_skills": 24,
  "certified_count": 19,
  "draft_count": 5,
  "catalog": [
    {
      "name": "workflow.validate",
      "version": "0.1.0",
      "description": "Validates Betty workflow YAML definitions to ensure correct structure and required fields.\n",
      "status": "certified",
      "tags": [],
      "manifest_path": "skills/workflow.validate/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run workflow.validate: /workflow/validate"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/workflow.validate",
      "dependencies": [
        "context.schema"
      ],
      "entrypoints": [
        {
          "command": "/workflow/validate",
          "handler": "workflow_validate.py",
          "runtime": "python",
          "description": "Validate the structure of a workflow YAML file before execution.\n",
          "parameters": [
            {
              "name": "workflow.yaml",
              "type": "string",
              "required": true,
              "description": "Path to the workflow YAML file."
            }
          ],
          "permissions": [
            "filesystem",
            "read"
          ]
        }
      ],
      "inputs": [
        "workflow.yaml"
      ],
      "outputs": [
        "validation_result.json"
      ]
    },
    {
      "name": "hook.define",
      "version": "0.1.0",
      "description": "Create and register validation hooks for Claude Code",
      "status": "certified",
      "tags": [
        "hooks",
        "validation",
        "automation",
        "claude-code"
      ],
      "manifest_path": "skills/hook.define/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run hook.define: /skill/hook/define"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/hook.define",
      "dependencies": [
        "context.schema"
      ],
      "entrypoints": [
        {
          "command": "/skill/hook/define",
          "handler": "hook_define.py",
          "runtime": "python",
          "permissions": [
            "filesystem:read",
            "filesystem:write"
          ]
        }
      ],
      "inputs": [
        {
          "name": "event",
          "type": "string",
          "required": true,
          "description": "Hook event trigger (on_file_edit, on_file_save, on_commit, on_push, on_tool_use)"
        },
        {
          "name": "pattern",
          "type": "string",
          "required": false,
          "description": "File pattern to match (e.g., \"*.openapi.yaml\", \"specs/**/*.yaml\")"
        },
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Command to execute when hook triggers (skill name or full command)"
        },
        {
          "name": "blocking",
          "type": "boolean",
          "required": false,
          "default": true,
          "description": "Whether hook should block operation if it fails"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "default": 30000,
          "description": "Timeout in milliseconds (default 30 seconds)"
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "Human-readable description of what the hook does"
        }
      ],
      "outputs": [
        {
          "name": "hook_config",
          "type": "object",
          "description": "Generated hook configuration"
        },
        {
          "name": "hooks_file_path",
          "type": "string",
          "description": "Path to .claude/hooks.yaml file"
        }
      ]
    },
    {
      "name": "api.validate",
      "version": "0.1.0",
      "description": "Validate OpenAPI and AsyncAPI specifications against enterprise guidelines",
      "status": "certified",
      "tags": [
        "api",
        "validation",
        "openapi",
        "asyncapi",
        "zalando"
      ],
      "manifest_path": "skills/api.validate/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run api.validate: /skill/api/validate"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/api.validate",
      "dependencies": [
        "context.schema"
      ],
      "entrypoints": [
        {
          "command": "/skill/api/validate",
          "handler": "api_validate.py",
          "runtime": "python",
          "permissions": [
            "filesystem:read",
            "network:http"
          ]
        }
      ],
      "inputs": [
        {
          "name": "spec_path",
          "type": "string",
          "required": true,
          "description": "Path to the API specification file (OpenAPI or AsyncAPI)"
        },
        {
          "name": "guideline_set",
          "type": "string",
          "required": false,
          "default": "zalando",
          "description": "Which API guidelines to validate against (zalando, google, microsoft)"
        },
        {
          "name": "strict",
          "type": "boolean",
          "required": false,
          "default": false,
          "description": "Enable strict mode (warnings become errors)"
        }
      ],
      "outputs": [
        {
          "name": "validation_report",
          "type": "object",
          "description": "Detailed validation results including errors and warnings"
        },
        {
          "name": "valid",
          "type": "boolean",
          "description": "Whether the spec is valid"
        },
        {
          "name": "guideline_version",
          "type": "string",
          "description": "Version of guidelines used for validation"
        }
      ]
    },
    {
      "name": "api.define",
      "version": "0.1.0",
      "description": "Create OpenAPI and AsyncAPI specifications from templates",
      "status": "certified",
      "tags": [
        "api",
        "openapi",
        "asyncapi",
        "scaffolding",
        "zalando"
      ],
      "manifest_path": "skills/api.define/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run api.define: /skill/api/define"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/api.define",
      "dependencies": [
        "context.schema"
      ],
      "entrypoints": [
        {
          "command": "/skill/api/define",
          "handler": "api_define.py",
          "runtime": "python",
          "permissions": [
            "filesystem:read",
            "filesystem:write"
          ]
        }
      ],
      "inputs": [
        {
          "name": "service_name",
          "type": "string",
          "required": true,
          "description": "Name of the service/API (e.g., user-service, order-api)"
        },
        {
          "name": "spec_type",
          "type": "string",
          "required": false,
          "default": "openapi",
          "description": "Type of specification (openapi or asyncapi)"
        },
        {
          "name": "template",
          "type": "string",
          "required": false,
          "default": "zalando",
          "description": "Template to use (zalando, basic, minimal)"
        },
        {
          "name": "output_dir",
          "type": "string",
          "required": false,
          "default": "specs",
          "description": "Output directory for generated specification"
        },
        {
          "name": "version",
          "type": "string",
          "required": false,
          "default": "1.0.0",
          "description": "API version"
        }
      ],
      "outputs": [
        {
          "name": "spec_path",
          "type": "string",
          "description": "Path to generated specification file"
        },
        {
          "name": "spec_content",
          "type": "object",
          "description": "Generated specification content"
        }
      ]
    },
    {
      "name": "api.generate-models",
      "version": "0.1.0",
      "description": "Generate type-safe models from OpenAPI and AsyncAPI specifications using Modelina",
      "status": "certified",
      "tags": [
        "api",
        "codegen",
        "modelina",
        "openapi",
        "asyncapi",
        "typescript",
        "python",
        "java"
      ],
      "manifest_path": "skills/api.generate-models/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run api.generate-models: /skill/api/generate-models"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/api.generate-models",
      "dependencies": [
        "context.schema"
      ],
      "entrypoints": [
        {
          "command": "/skill/api/generate-models",
          "handler": "modelina_generate.py",
          "runtime": "python",
          "permissions": [
            "filesystem:read",
            "filesystem:write",
            "process:execute"
          ]
        }
      ],
      "inputs": [
        {
          "name": "spec_path",
          "type": "string",
          "required": true,
          "description": "Path to API specification file (OpenAPI or AsyncAPI)"
        },
        {
          "name": "language",
          "type": "string",
          "required": true,
          "description": "Target language (typescript, python, java, go, csharp)"
        },
        {
          "name": "output_dir",
          "type": "string",
          "required": false,
          "default": "src/models",
          "description": "Output directory for generated models"
        },
        {
          "name": "package_name",
          "type": "string",
          "required": false,
          "description": "Package/module name for generated code"
        }
      ],
      "outputs": [
        {
          "name": "models_path",
          "type": "string",
          "description": "Path to directory containing generated models"
        },
        {
          "name": "files_generated",
          "type": "array",
          "description": "List of generated model files"
        },
        {
          "name": "model_count",
          "type": "number",
          "description": "Number of models generated"
        }
      ]
    },
    {
      "name": "api.compatibility",
      "version": "0.1.0",
      "description": "Detect breaking changes between API specification versions",
      "status": "certified",
      "tags": [
        "api",
        "compatibility",
        "breaking-changes",
        "versioning",
        "openapi"
      ],
      "manifest_path": "skills/api.compatibility/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run api.compatibility: /skill/api/compatibility"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/api.compatibility",
      "dependencies": [
        "context.schema"
      ],
      "entrypoints": [
        {
          "command": "/skill/api/compatibility",
          "handler": "check_compatibility.py",
          "runtime": "python",
          "permissions": [
            "filesystem:read"
          ]
        }
      ],
      "inputs": [
        {
          "name": "old_spec_path",
          "type": "string",
          "required": true,
          "description": "Path to the old/previous API specification"
        },
        {
          "name": "new_spec_path",
          "type": "string",
          "required": true,
          "description": "Path to the new/current API specification"
        },
        {
          "name": "fail_on_breaking",
          "type": "boolean",
          "required": false,
          "default": true,
          "description": "Exit with error code if breaking changes detected"
        }
      ],
      "outputs": [
        {
          "name": "compatible",
          "type": "boolean",
          "description": "Whether the new spec is backward compatible"
        },
        {
          "name": "breaking_changes",
          "type": "array",
          "description": "List of breaking changes detected"
        },
        {
          "name": "non_breaking_changes",
          "type": "array",
          "description": "List of non-breaking changes detected"
        },
        {
          "name": "change_summary",
          "type": "object",
          "description": "Summary of all changes"
        }
      ]
    },
    {
      "name": "agent.define",
      "version": "0.1.0",
      "description": "Validates and registers agent manifests for the Betty Framework. Ensures schema compliance, validates skill references, and updates the Agent Registry.\n",
      "status": "certified",
      "tags": [
        "agents",
        "validation",
        "registry",
        "layer2"
      ],
      "manifest_path": "skills/agent.define/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run agent.define: /agent/define"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/agent.define",
      "dependencies": [
        "skill.define"
      ],
      "entrypoints": [
        {
          "command": "/agent/define",
          "handler": "agent_define.py",
          "runtime": "python",
          "description": "Validate an agent manifest and register it in the Agent Registry.\n",
          "parameters": [
            {
              "name": "manifest_path",
              "type": "string",
              "required": true,
              "description": "Path to the agent.yaml file to validate"
            }
          ],
          "permissions": [
            "filesystem:read",
            "filesystem:write"
          ]
        }
      ],
      "inputs": [
        {
          "name": "manifest_path",
          "type": "string",
          "required": true,
          "description": "Path to the agent.yaml file to validate"
        }
      ],
      "outputs": [
        {
          "name": "validation_result",
          "type": "object",
          "description": "Validation results including errors and warnings"
        },
        {
          "name": "registry_updated",
          "type": "boolean",
          "description": "Whether agent was successfully registered"
        }
      ]
    },
    {
      "name": "command.define",
      "version": "0.1.0",
      "description": "Validate and register command manifests in the Command Registry",
      "status": "certified",
      "tags": [
        "command",
        "registry",
        "validation",
        "infrastructure"
      ],
      "manifest_path": "skills/command.define/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run command.define: /skill/command/define"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/command.define",
      "dependencies": [
        "None"
      ],
      "entrypoints": [
        {
          "command": "/skill/command/define",
          "handler": "command_define.py",
          "runtime": "python",
          "permissions": [
            "filesystem:read",
            "filesystem:write"
          ]
        }
      ],
      "inputs": [
        {
          "name": "manifest_path",
          "type": "string",
          "required": true,
          "description": "Path to the command manifest file (YAML)"
        }
      ],
      "outputs": [
        {
          "name": "validation_result",
          "type": "object",
          "description": "Validation results and registration status",
          "schema": {
            "properties": {
              "ok": "boolean",
              "status": "string",
              "errors": "array",
              "path": "string",
              "details": "object"
            }
          }
        }
      ]
    },
    {
      "name": "hook.register",
      "version": "0.1.0",
      "description": "Validate and register hook manifests in the Hook Registry",
      "status": "certified",
      "tags": [
        "hook",
        "registry",
        "validation",
        "infrastructure",
        "policy"
      ],
      "manifest_path": "skills/hook.register/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run hook.register: /skill/hook/register"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/hook.register",
      "dependencies": [
        "None"
      ],
      "entrypoints": [
        {
          "command": "/skill/hook/register",
          "handler": "hook_register.py",
          "runtime": "python",
          "permissions": [
            "filesystem:read",
            "filesystem:write"
          ]
        }
      ],
      "inputs": [
        {
          "name": "manifest_path",
          "type": "string",
          "required": true,
          "description": "Path to the hook manifest file (YAML)"
        }
      ],
      "outputs": [
        {
          "name": "validation_result",
          "type": "object",
          "description": "Validation results and registration status",
          "schema": {
            "properties": {
              "ok": "boolean",
              "status": "string",
              "errors": "array",
              "path": "string",
              "details": "object"
            }
          }
        }
      ]
    },
    {
      "name": "workflow.compose",
      "version": "0.1.0",
      "description": "Executes multi-step Betty Framework workflows by chaining existing skills. Enables declarative orchestration of skill pipelines.\n",
      "status": "certified",
      "tags": [],
      "manifest_path": "skills/workflow.compose/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run workflow.compose: /workflow/compose"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/workflow.compose",
      "dependencies": [
        "skill.create",
        "skill.define",
        "registry.update"
      ],
      "entrypoints": [
        {
          "command": "/workflow/compose",
          "handler": "workflow_compose.py",
          "runtime": "python",
          "description": "Execute a Betty workflow defined in a YAML file.\n",
          "parameters": [
            {
              "name": "workflow_path",
              "type": "string",
              "required": true,
              "description": "Path to a workflow YAML file to execute."
            }
          ],
          "permissions": [
            "filesystem",
            "read",
            "write"
          ]
        }
      ],
      "inputs": [
        "workflow_path"
      ],
      "outputs": [
        "workflow_history.json"
      ]
    },
    {
      "name": "policy.enforce",
      "version": "0.1.0",
      "description": "Validates operations against organizational policies before execution",
      "status": "certified",
      "tags": [],
      "manifest_path": "skills/policy.enforce/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [],
      "documentation_url": "https://betty-framework.dev/docs/skills/policy.enforce",
      "dependencies": [],
      "entrypoints": [],
      "inputs": [
        "action",
        "target",
        "policy_set"
      ],
      "outputs": [
        "validation_result.json",
        "policy_violations.json"
      ]
    },
    {
      "name": "run.agent",
      "version": "0.1.0",
      "description": "Simulates execution of a Betty agent by loading its manifest, constructing the prompt, and demonstrating which skills would be invoked. Useful for testing agent design and understanding agent behavior.\n",
      "status": "certified",
      "tags": [
        "agents",
        "simulation",
        "testing",
        "layer2"
      ],
      "manifest_path": "skills/run.agent/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run run.agent: /agent/run"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/run.agent",
      "dependencies": [
        "agent.define"
      ],
      "entrypoints": [
        {
          "command": "/agent/run",
          "handler": "run_agent.py",
          "runtime": "python",
          "description": "Simulate execution of an agent manifest. Shows the constructed prompt, mock Claude response, and skills that would be invoked.\n",
          "parameters": [
            {
              "name": "agent_path",
              "type": "string",
              "required": true,
              "description": "Path to agent.yaml file or agent name (e.g., api.designer)"
            },
            {
              "name": "input_text",
              "type": "string",
              "required": false,
              "description": "Optional input text to provide to the agent"
            }
          ],
          "permissions": [
            "filesystem:read"
          ]
        }
      ],
      "inputs": [
        {
          "name": "agent_path",
          "type": "string",
          "required": true,
          "description": "Path to agent manifest (agent.yaml) or agent name"
        },
        {
          "name": "input_text",
          "type": "string",
          "required": false,
          "description": "Optional task/query to provide to the agent"
        }
      ],
      "outputs": [
        {
          "name": "execution_log",
          "type": "object",
          "description": "Details of the simulated agent execution including prompt and skills"
        }
      ]
    },
    {
      "name": "skill.define",
      "version": "0.1.0",
      "description": "Validates and registers skill manifests (.skill.yaml) for the Betty Framework. Ensures schema compliance and updates the Skill Registry.\n",
      "status": "certified",
      "tags": [],
      "manifest_path": "skills/skill.define/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run skill.define: /skill/define"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/skill.define",
      "dependencies": [],
      "entrypoints": [
        {
          "command": "/skill/define",
          "handler": "skill_define.py",
          "runtime": "python",
          "description": "Validate a Claude Code skill manifest and register it in the Betty Skill Registry.\n",
          "parameters": [
            {
              "name": "manifest_path",
              "type": "string",
              "required": true,
              "description": "Path to the skill.yaml file to validate."
            }
          ],
          "permissions": [
            "filesystem",
            "read",
            "write"
          ]
        }
      ],
      "inputs": [
        "manifest_path"
      ],
      "outputs": [
        "validation_result.json",
        "updated_registry.json"
      ]
    },
    {
      "name": "skill.create",
      "version": "0.1.0",
      "description": "Generates a new Betty Framework Skill directory and manifest. Used to bootstrap new Claude Code-compatible skills inside the Betty Framework.\n",
      "status": "certified",
      "tags": [],
      "manifest_path": "skills/skill.create/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run skill.create: /skill/create"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/skill.create",
      "dependencies": [
        "skill.define",
        "context.schema"
      ],
      "entrypoints": [
        {
          "command": "/skill/create",
          "handler": "skill_create.py",
          "runtime": "python",
          "description": "Scaffolds a new Betty Skill directory, generates its manifest, validates it with skill.define, and updates the registry.\n",
          "parameters": [
            {
              "name": "skill_name",
              "type": "string",
              "description": "Name of the new skill (e.g., runtime.execute)",
              "required": true
            },
            {
              "name": "description",
              "type": "string",
              "description": "Description of what the skill will do",
              "required": true
            },
            {
              "name": "inputs",
              "type": "string",
              "description": "Comma-separated list of input parameters (optional)",
              "required": false
            },
            {
              "name": "outputs",
              "type": "string",
              "description": "Comma-separated list of output parameters (optional)",
              "required": false
            }
          ],
          "permissions": [
            "filesystem",
            "read",
            "write"
          ]
        }
      ],
      "inputs": [
        "skill_name",
        "description",
        "inputs",
        "outputs"
      ],
      "outputs": [
        "skill_directory",
        "manifest_path",
        "registration_record.json"
      ]
    },
    {
      "name": "registry.update",
      "version": "0.1.0",
      "description": "Updates the Betty Framework Skill Registry by adding or modifying entries based on validated skill manifests.\n",
      "status": "certified",
      "tags": [],
      "manifest_path": "skills/registry.update/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run registry.update: /registry/update"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/registry.update",
      "dependencies": [
        "skill.define"
      ],
      "entrypoints": [
        {
          "command": "/registry/update",
          "handler": "registry_update.py",
          "runtime": "python",
          "description": "Add or update entries in the Skill Registry.\n",
          "parameters": [
            {
              "name": "manifest_path",
              "type": "string",
              "required": true,
              "description": "Path to the skill manifest (.skill.yaml) being added or updated."
            }
          ],
          "permissions": [
            "filesystem",
            "read",
            "write"
          ]
        }
      ],
      "inputs": [
        "manifest_path"
      ],
      "outputs": [
        "registry_update_result.json"
      ]
    },
    {
      "name": "plugin.sync",
      "version": "0.1.0",
      "description": "Automatically generates plugin.yaml from Betty Framework registries. Reads skills.json, commands.json, and hooks.json to build a complete plugin configuration.\n",
      "status": "certified",
      "tags": [
        "plugin",
        "registry",
        "automation",
        "infrastructure"
      ],
      "manifest_path": "skills/plugin.sync/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run plugin.sync: /plugin/sync"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/plugin.sync",
      "dependencies": [
        "registry.update"
      ],
      "entrypoints": [
        {
          "command": "/plugin/sync",
          "handler": "plugin_sync.py",
          "runtime": "python",
          "description": "Generate plugin.yaml from registry files. Syncs active skills with entrypoints into plugin commands.\n",
          "parameters": [],
          "permissions": [
            "filesystem:read",
            "filesystem:write"
          ]
        }
      ],
      "inputs": [],
      "outputs": [
        "plugin.yaml",
        "generation_report.json"
      ]
    },
    {
      "name": "generate.marketplace",
      "version": "0.1.0",
      "description": "Generate marketplace catalog files from Betty Framework registries. Filters active and certified skills/agents and outputs marketplace-ready JSON files.\n",
      "status": "certified",
      "tags": [
        "marketplace",
        "registry",
        "automation",
        "infrastructure"
      ],
      "manifest_path": "skills/generate.marketplace/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run generate.marketplace: /marketplace/generate"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/generate.marketplace",
      "dependencies": [
        "registry.update"
      ],
      "entrypoints": [
        {
          "command": "/marketplace/generate",
          "handler": "generate_marketplace.py",
          "runtime": "python",
          "description": "Generate marketplace catalogs from registry files. Filters by status: active and certified: true.\n",
          "parameters": [],
          "permissions": [
            "filesystem:read",
            "filesystem:write"
          ]
        }
      ],
      "inputs": [],
      "outputs": [
        "marketplace/skills.json",
        "marketplace/agents.json"
      ]
    },
    {
      "name": "agent.run",
      "version": "0.1.0",
      "description": "Execute a registered Betty agent by loading its manifest, generating a Claude-friendly prompt, invoking skills based on the agent's workflow, and logging results. Supports both iterative and oneshot reasoning modes with optional Claude API integration.\n",
      "status": "certified",
      "tags": [
        "agents",
        "execution",
        "claude-api",
        "orchestration",
        "layer2"
      ],
      "manifest_path": "skills/agent.run/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run agent.run: /agent/run"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/agent.run",
      "dependencies": [
        "agent.define"
      ],
      "entrypoints": [
        {
          "command": "/agent/run",
          "handler": "agent_run.py",
          "runtime": "python",
          "description": "Execute a Betty agent with optional task context. Generates Claude-friendly prompts, invokes the Claude API (or simulates), executes planned skills, and logs all results to agent_logs/ directory.\n",
          "parameters": [
            {
              "name": "agent_path",
              "type": "string",
              "required": true,
              "description": "Path to agent.yaml file or agent name (e.g., api.designer)"
            },
            {
              "name": "task_context",
              "type": "string",
              "required": false,
              "description": "Optional task or query for the agent to execute"
            },
            {
              "name": "save_log",
              "type": "boolean",
              "required": false,
              "default": true,
              "description": "Save execution log to agent_logs/<agent>_<timestamp>.json"
            }
          ],
          "permissions": [
            "filesystem:read",
            "filesystem:write",
            "network:http"
          ]
        }
      ],
      "inputs": [
        {
          "name": "agent_path",
          "type": "string",
          "required": true,
          "description": "Path to agent manifest (agent.yaml) or agent name (e.g., api.designer)"
        },
        {
          "name": "task_context",
          "type": "string",
          "required": false,
          "description": "Task or query to provide to the agent for execution"
        },
        {
          "name": "save_log",
          "type": "boolean",
          "required": false,
          "default": true,
          "description": "Whether to save execution log to agent_logs/<agent>.json"
        }
      ],
      "outputs": [
        {
          "name": "execution_result",
          "type": "object",
          "description": "Complete execution results including prompt, Claude response, and skill outputs",
          "schema": {
            "properties": {
              "ok": "boolean",
              "status": "string",
              "timestamp": "string",
              "errors": "array",
              "details": {
                "type": "object",
                "properties": {
                  "timestamp": "string",
                  "agent": "object",
                  "task_context": "string",
                  "prompt": "string",
                  "skills_available": "array",
                  "claude_response": "object",
                  "execution_results": "array",
                  "summary": "object",
                  "log_path": "string"
                }
              }
            }
          }
        }
      ]
    },
    {
      "name": "plugin.build",
      "version": "0.1.0",
      "description": "Automatically bundle a plugin directory (or the whole repo) into a deployable Claude Code plugin package. Gathers all declared entrypoints, validates handler files exist, and packages everything into .tar.gz or .zip under /dist.\n",
      "status": "certified",
      "tags": [
        "plugin",
        "packaging",
        "build",
        "deployment",
        "distribution"
      ],
      "manifest_path": "skills/plugin.build/skill.yaml",
      "maintainer": "Betty Core Team",
      "usage_examples": [
        "Run plugin.build: /plugin/build"
      ],
      "documentation_url": "https://betty-framework.dev/docs/skills/plugin.build",
      "dependencies": [
        "plugin.sync"
      ],
      "entrypoints": [
        {
          "command": "/plugin/build",
          "handler": "plugin_build.py",
          "runtime": "python",
          "description": "Bundle plugin directory into deployable package. Validates all entrypoints and handlers before packaging.\n",
          "parameters": [
            {
              "name": "plugin_path",
              "type": "string",
              "required": false,
              "description": "Path to plugin.yaml (defaults to ./plugin.yaml)"
            },
            {
              "name": "output_format",
              "type": "string",
              "required": false,
              "description": "Package format (tar.gz or zip, defaults to tar.gz)"
            },
            {
              "name": "output_dir",
              "type": "string",
              "required": false,
              "description": "Output directory (defaults to ./dist)"
            }
          ],
          "permissions": [
            "filesystem:read",
            "filesystem:write"
          ]
        }
      ],
      "inputs": [
        {
          "name": "plugin_path",
          "type": "string",
          "required": false,
          "description": "Path to plugin.yaml (defaults to ./plugin.yaml)"
        },
        {
          "name": "output_format",
          "type": "string",
          "required": false,
          "description": "Package format (tar.gz or zip, defaults to tar.gz)"
        },
        {
          "name": "output_dir",
          "type": "string",
          "required": false,
          "description": "Output directory (defaults to ./dist)"
        }
      ],
      "outputs": [
        {
          "name": "plugin_package",
          "type": "file",
          "description": "Packaged plugin archive (.tar.gz or .zip)"
        },
        {
          "name": "build_report",
          "type": "object",
          "description": "JSON report with validated entrypoints, missing files, and package checksum"
        }
      ]
    }
  ]
}