{
  "registry_version": "1.0.0",
  "generated_at": "2025-10-25T17:30:16.402673+00:00",
  "skills": [
    {
      "name": "workflow.validate",
      "version": "0.1.0",
      "description": "Validates Betty workflow YAML definitions to ensure correct structure and required fields.\n",
      "inputs": [
        "workflow.yaml"
      ],
      "outputs": [
        "validation_result.json"
      ],
      "dependencies": [
        "context.schema"
      ],
      "status": "active",
      "entrypoints": [
        {
          "command": "/workflow/validate",
          "handler": "workflow_validate.py",
          "runtime": "python",
          "description": "Validate the structure of a workflow YAML file before execution.\n",
          "parameters": [
            {
              "name": "workflow.yaml",
              "type": "string",
              "required": true,
              "description": "Path to the workflow YAML file."
            }
          ],
          "permissions": [
            "filesystem:read"
          ]
        }
      ]
    },
    {
      "name": "test.hello",
      "version": "0.1.0",
      "description": "A simple test skill that prints hello world",
      "inputs": [],
      "outputs": [],
      "dependencies": [],
      "status": "draft"
    },
    {
      "name": "test.example",
      "version": "0.1.0",
      "description": "Example skill for testing workflow orchestration",
      "inputs": [],
      "outputs": [],
      "dependencies": [],
      "status": "draft"
    },
    {
      "name": "hook.define",
      "version": "0.1.0",
      "description": "Create and register validation hooks for Claude Code",
      "inputs": [
        {
          "name": "event",
          "type": "string",
          "required": true,
          "description": "Hook event trigger (on_file_edit, on_file_save, on_commit, on_push, on_tool_use)"
        },
        {
          "name": "pattern",
          "type": "string",
          "required": false,
          "description": "File pattern to match (e.g., \"*.openapi.yaml\", \"specs/**/*.yaml\")"
        },
        {
          "name": "command",
          "type": "string",
          "required": true,
          "description": "Command to execute when hook triggers (skill name or full command)"
        },
        {
          "name": "blocking",
          "type": "boolean",
          "required": false,
          "default": true,
          "description": "Whether hook should block operation if it fails"
        },
        {
          "name": "timeout",
          "type": "number",
          "required": false,
          "default": 30000,
          "description": "Timeout in milliseconds (default 30 seconds)"
        },
        {
          "name": "description",
          "type": "string",
          "required": false,
          "description": "Human-readable description of what the hook does"
        }
      ],
      "outputs": [
        {
          "name": "hook_config",
          "type": "object",
          "description": "Generated hook configuration"
        },
        {
          "name": "hooks_file_path",
          "type": "string",
          "description": "Path to .claude/hooks.yaml file"
        }
      ],
      "dependencies": [
        "context.schema"
      ],
      "entrypoints": [
        {
          "command": "/skill/hook/define",
          "handler": "hook_define.py",
          "runtime": "python",
          "permissions": [
            "filesystem:read",
            "filesystem:write"
          ]
        }
      ],
      "status": "active",
      "tags": [
        "hooks",
        "validation",
        "automation",
        "claude-code"
      ]
    },
    {
      "name": "api.validate",
      "version": "0.1.0",
      "description": "Validate OpenAPI and AsyncAPI specifications against enterprise guidelines",
      "inputs": [
        {
          "name": "spec_path",
          "type": "string",
          "required": true,
          "description": "Path to the API specification file (OpenAPI or AsyncAPI)"
        },
        {
          "name": "guideline_set",
          "type": "string",
          "required": false,
          "default": "zalando",
          "description": "Which API guidelines to validate against (zalando, google, microsoft)"
        },
        {
          "name": "strict",
          "type": "boolean",
          "required": false,
          "default": false,
          "description": "Enable strict mode (warnings become errors)"
        }
      ],
      "outputs": [
        {
          "name": "validation_report",
          "type": "object",
          "description": "Detailed validation results including errors and warnings"
        },
        {
          "name": "valid",
          "type": "boolean",
          "description": "Whether the spec is valid"
        },
        {
          "name": "guideline_version",
          "type": "string",
          "description": "Version of guidelines used for validation"
        }
      ],
      "dependencies": [
        "context.schema"
      ],
      "entrypoints": [
        {
          "command": "/skill/api/validate",
          "handler": "api_validate.py",
          "runtime": "python",
          "permissions": [
            "filesystem:read",
            "network:http"
          ]
        }
      ],
      "status": "active",
      "tags": [
        "api",
        "validation",
        "openapi",
        "asyncapi",
        "zalando"
      ]
    },
    {
      "name": "api.define",
      "version": "0.1.0",
      "description": "Create OpenAPI and AsyncAPI specifications from templates",
      "inputs": [
        {
          "name": "service_name",
          "type": "string",
          "required": true,
          "description": "Name of the service/API (e.g., user-service, order-api)"
        },
        {
          "name": "spec_type",
          "type": "string",
          "required": false,
          "default": "openapi",
          "description": "Type of specification (openapi or asyncapi)"
        },
        {
          "name": "template",
          "type": "string",
          "required": false,
          "default": "zalando",
          "description": "Template to use (zalando, basic, minimal)"
        },
        {
          "name": "output_dir",
          "type": "string",
          "required": false,
          "default": "specs",
          "description": "Output directory for generated specification"
        },
        {
          "name": "version",
          "type": "string",
          "required": false,
          "default": "1.0.0",
          "description": "API version"
        }
      ],
      "outputs": [
        {
          "name": "spec_path",
          "type": "string",
          "description": "Path to generated specification file"
        },
        {
          "name": "spec_content",
          "type": "object",
          "description": "Generated specification content"
        }
      ],
      "dependencies": [
        "context.schema"
      ],
      "entrypoints": [
        {
          "command": "/skill/api/define",
          "handler": "api_define.py",
          "runtime": "python",
          "permissions": [
            "filesystem:read",
            "filesystem:write"
          ]
        }
      ],
      "status": "active",
      "tags": [
        "api",
        "openapi",
        "asyncapi",
        "scaffolding",
        "zalando"
      ]
    },
    {
      "name": "docs.sync.plugin_manifest",
      "version": "0.1.0",
      "description": "Reconciles plugin.yaml with Betty Framework registries to ensure consistency. Identifies missing, orphaned, and mismatched command entries and suggests corrections.",
      "inputs": [],
      "outputs": [
        "plugin.preview.yaml",
        "plugin_manifest_diff.md"
      ],
      "dependencies": [
        "plugin.sync",
        "registry.update"
      ],
      "status": "active",
      "entrypoints": [
        {
          "command": "/docs/sync/plugin-manifest",
          "handler": "plugin_manifest_sync.py",
          "runtime": "python",
          "description": "Reconcile plugin.yaml with registry files. Identifies discrepancies and generates plugin.preview.yaml with suggested updates and a detailed diff report.",
          "parameters": [],
          "permissions": [
            "filesystem:read",
            "filesystem:write"
          ]
        }
      ],
      "tags": [
        "docs",
        "plugin",
        "registry",
        "validation",
        "reconciliation",
        "infrastructure"
      ]
    },
    {
      "name": "docs.sync.readme",
      "version": "0.1.0",
      "description": "Regenerate the top-level README.md to reflect all current registered skills and agents. Pulls from registry/skills.json and registry/agents.json, groups by category, and updates documentation sections while maintaining repo style and tone.\n",
      "inputs": [],
      "outputs": [
        "README.md",
        "sync_report.json"
      ],
      "dependencies": [
        "registry.update"
      ],
      "status": "active",
      "entrypoints": [
        {
          "command": "/docs/sync/readme",
          "handler": "readme_sync.py",
          "runtime": "python",
          "description": "Sync README.md with current registry state. Updates skills tables, agents links, and documentation map to reflect all registered skills and agents.\n",
          "parameters": [],
          "permissions": [
            "filesystem:read",
            "filesystem:write"
          ]
        }
      ],
      "tags": [
        "docs",
        "documentation",
        "registry",
        "automation",
        "maintenance"
      ]
    },
    {
      "name": "registry.update",
      "version": "0.2.1",
      "description": "Updates the Betty Framework Skill Registry by adding or modifying entries based on validated skill manifests. Supports automatic version bumping based on semantic versioning rules.\n",
      "inputs": [
        "manifest_path",
        "auto_version"
      ],
      "outputs": [
        "registry_update_result.json"
      ],
      "dependencies": [
        "skill.define",
        "registry.diff"
      ],
      "status": "active",
      "entrypoints": [
        {
          "command": "/registry/update",
          "handler": "registry_update.py",
          "runtime": "python",
          "description": "Add or update entries in the Skill Registry with optional automatic version bumping.\n",
          "parameters": [
            {
              "name": "manifest_path",
              "type": "string",
              "required": true,
              "description": "Path to the skill manifest (.skill.yaml) being added or updated."
            },
            {
              "name": "auto_version",
              "type": "boolean",
              "required": false,
              "description": "Enable automatic version bumping based on changes detected. Rules: field removed \u2192 major bump, field/permission added \u2192 minor bump, other changes \u2192 patch bump.\n"
            }
          ],
          "permissions": [
            "filesystem",
            "read",
            "write"
          ]
        }
      ],
      "tags": [
        "docs",
        "documentation",
        "registry",
        "automation",
        "maintenance"
      ]
    },
    {
      "name": "agent.run",
      "version": "0.1.0",
      "description": "Execute a registered Betty agent by loading its manifest, generating a Claude-friendly prompt, invoking skills based on the agent's workflow, and logging results. Supports both iterative and oneshot reasoning modes with optional Claude API integration.",
      "inputs": [
        {
          "name": "agent_path",
          "type": "string",
          "required": true,
          "description": "Path to agent manifest (agent.yaml) or agent name (e.g., api.designer)"
        },
        {
          "name": "task_context",
          "type": "string",
          "required": false,
          "description": "Task or query to provide to the agent for execution"
        },
        {
          "name": "save_log",
          "type": "boolean",
          "required": false,
          "default": true,
          "description": "Whether to save execution log to agent_logs/<agent>.json"
        }
      ],
      "outputs": [
        {
          "name": "execution_result",
          "type": "object",
          "description": "Complete execution results including prompt, Claude response, and skill outputs"
        }
      ],
      "dependencies": [
        "agent.define"
      ],
      "entrypoints": [
        {
          "command": "/agent/run",
          "handler": "agent_run.py",
          "runtime": "python",
          "description": "Execute a Betty agent with optional task context. Generates Claude-friendly prompts, invokes the Claude API (or simulates), executes planned skills, and logs all results to agent_logs/ directory.",
          "parameters": [
            {
              "name": "agent_path",
              "type": "string",
              "required": true,
              "description": "Path to agent.yaml file or agent name (e.g., api.designer)"
            },
            {
              "name": "task_context",
              "type": "string",
              "required": false,
              "description": "Optional task or query for the agent to execute"
            },
            {
              "name": "save_log",
              "type": "boolean",
              "required": false,
              "default": true,
              "description": "Save execution log to agent_logs/<agent>_<timestamp>.json"
            }
          ],
          "permissions": [
            "filesystem:read",
            "filesystem:write",
            "network:http"
          ]
        }
      ],
      "status": "active",
      "tags": [
        "agents",
        "execution",
        "claude-api",
        "orchestration",
        "layer2"
      ]
    },
    {
      "name": "git.commit",
      "version": "0.1.0",
      "description": "Generate descriptive commit messages by analyzing git diffs. Use when the user asks for help writing commit messages or reviewing staged changes. Follows conventional commits format with types (feat, fix, docs, etc.) and scopes.\n",
      "inputs": [
        {
          "name": "git_diff",
          "type": "string",
          "required": false,
          "description": "Git diff content (auto-detected from staged changes if not provided)"
        },
        {
          "name": "scope",
          "type": "string",
          "required": false,
          "description": "Scope of the changes (e.g., api, ui, database)"
        }
      ],
      "outputs": [
        {
          "name": "commit_message",
          "type": "string",
          "description": "Generated commit message following conventional commits format"
        },
        {
          "name": "commit_type",
          "type": "string",
          "description": "Detected commit type (feat, fix, docs, refactor, test, chore, style)"
        }
      ],
      "dependencies": [],
      "entrypoints": [
        {
          "command": "/git/commit",
          "handler": "git_commit.py",
          "runtime": "python",
          "description": "Generate conventional commit messages by analyzing git diffs. Helps write clear, consistent commit messages following best practices.\n",
          "parameters": [
            {
              "name": "scope",
              "type": "string",
              "required": false,
              "description": "Optional scope for the commit (e.g., api, ui, core)"
            }
          ],
          "permissions": [
            "filesystem:read"
          ]
        }
      ],
      "status": "active",
      "tags": [
        "git",
        "commit",
        "conventional-commits",
        "documentation",
        "developer-tools"
      ],
      "updated_at": "2025-10-25T17:30:16.402667+00:00"
    }
  ]
}