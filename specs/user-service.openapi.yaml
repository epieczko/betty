openapi: 3.1.0

info:
  title: UserService
  version: 1.0.0
  description: RESTful API for user service management
  contact:
    name: Platform Team
    email: platform@company.com
  x-api-id: 9aebe49f-0550-4386-b23b-231eb04485bd
  x-audience: company-internal

servers:
  - url: https://api.company.com/user-service/v1
    description: Production

paths:
  /users:
    get:
      summary: List users
      operationId: listUser
      tags: [User]
      parameters:
        - name: limit
          in: query
          description: Maximum number of items to return
          schema:
            type: integer
            minimum: 1
            maximum: 100
            default: 20
        - name: offset
          in: query
          description: Number of items to skip
          schema:
            type: integer
            minimum: 0
            default: 0
      responses:
        '200':
          description: List of users
          headers:
            X-Flow-ID:
              description: Request flow ID for tracing
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                type: object
                required: [users, pagination]
                properties:
                  users:
                    type: array
                    items:
                      $ref: '#/components/schemas/User'
                  pagination:
                    $ref: '#/components/schemas/Pagination'
        '400':
          $ref: '#/components/responses/BadRequest'
        '500':
          $ref: '#/components/responses/InternalError'

    post:
      summary: Create a new user
      operationId: createUser
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserCreate'
      responses:
        '201':
          description: User created successfully
          headers:
            Location:
              description: URL of the created resource
              schema:
                type: string
                format: uri
            X-Flow-ID:
              description: Request flow ID for tracing
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '409':
          $ref: '#/components/responses/Conflict'
        '500':
          $ref: '#/components/responses/InternalError'

  /users/{user_id}:
    parameters:
      - name: user_id
        in: path
        required: true
        description: Unique identifier of the user
        schema:
          type: string
          format: uuid

    get:
      summary: Get user by ID
      operationId: getUserById
      tags: [User]
      responses:
        '200':
          description: User details
          headers:
            X-Flow-ID:
              description: Request flow ID for tracing
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    put:
      summary: Update user
      operationId: updateUser
      tags: [User]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/UserUpdate'
      responses:
        '200':
          description: User updated successfully
          headers:
            X-Flow-ID:
              description: Request flow ID for tracing
              schema:
                type: string
                format: uuid
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

    delete:
      summary: Delete user
      operationId: deleteUser
      tags: [User]
      responses:
        '204':
          description: User deleted successfully
          headers:
            X-Flow-ID:
              description: Request flow ID for tracing
              schema:
                type: string
                format: uuid
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalError'

components:
  schemas:
    User:
      type: object
      required: [user_id, created_at]
      properties:
        user_id:
          type: string
          format: uuid
          description: Unique identifier
        created_at:
          type: string
          format: date-time
          description: Creation timestamp
        updated_at:
          type: string
          format: date-time
          description: Last update timestamp

    UserCreate:
      type: object
      required: []
      properties:
        # Add creation-specific fields here

    UserUpdate:
      type: object
      properties:
        # Add update-specific fields here

    Pagination:
      type: object
      required: [limit, offset, total]
      properties:
        limit:
          type: integer
          description: Number of items per page
        offset:
          type: integer
          description: Number of items skipped
        total:
          type: integer
          description: Total number of items available

    Problem:
      type: object
      required: [type, title, status]
      properties:
        type:
          type: string
          format: uri
          description: URI reference identifying the problem type
        title:
          type: string
          description: Short, human-readable summary
        status:
          type: integer
          description: HTTP status code
        detail:
          type: string
          description: Human-readable explanation
        instance:
          type: string
          format: uri
          description: URI reference identifying the specific occurrence

  responses:
    BadRequest:
      description: Bad request - invalid parameters or malformed request
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://api.company.com/problems/bad-request
            title: Bad Request
            status: 400
            detail: "Invalid query parameter 'limit': must be between 1 and 100"

    NotFound:
      description: Resource not found
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://api.company.com/problems/not-found
            title: Not Found
            status: 404
            detail: User with the specified ID was not found

    Conflict:
      description: Conflict - resource already exists or state conflict
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://api.company.com/problems/conflict
            title: Conflict
            status: 409
            detail: User with this identifier already exists

    InternalError:
      description: Internal server error
      content:
        application/problem+json:
          schema:
            $ref: '#/components/schemas/Problem'
          example:
            type: https://api.company.com/problems/internal-error
            title: Internal Server Error
            status: 500
            detail: An unexpected error occurred while processing the request

  securitySchemes:
    bearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT
      description: JWT-based authentication

security:
  - bearerAuth: []
